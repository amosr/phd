[1 of 1] Compiling BlowupBH         ( BlowupBH.hs, BlowupBH.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 29,748, types: 36,749, coercions: 11,103}

$wsplitPoints
$wsplitPoints =
  \ w w1 ->
    (# +:+ (singletonP w) (singletonP w),
       +:+ (singletonP w1) (singletonP w1) #)

splitPoints
splitPoints =
  \ w w1 ->
    let { (# ww1, ww2 #) ~ _ <- $wsplitPoints w w1 } in (ww1, ww2)

lvl
lvl =
  unpackCString# "libraries/vector/Data/Vector/Generic/Mutable.hs"#

lvl1
lvl1 = I# 480

lvl2
lvl2 = unpackCString# "new"#

lvl3
lvl3 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

$dDT1
$dDT1 = $fDTVector $fUnboxInt

lvl4
lvl4 = $fDT(,) $fDTInt $dDT1

lvl5
lvl5 = unpackCString# "joinD_impl/count"#

lvl6
lvl6 = What lvl5

lvl7
lvl7 = I# 0

lvl8
lvl8 = unpackCString# "zipWithUP/map"#

lvl9
lvl9 = What lvl8

lvl10
lvl10 = WFMapGen lvl9 WSlice

lvl11
lvl11 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl12
lvl12 = $fDT(,) $fDTInt $dDT1

lvl13
lvl13 = What lvl5

lvl14
lvl14 = What lvl8

lvl15
lvl15 = WFMapGen lvl14 WSlice

lvl16
lvl16 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl17
lvl17 = $fDT(,) $fDTInt $dDT1

lvl18
lvl18 = What lvl5

lvl19
lvl19 = $fDT(,) $fDTUSegd $fDTInt

lvl20
lvl20 = $fDT(,) lvl19 $fDTInt

lvl21
lvl21 = unpackCString# "appendSUPV/append"#

lvl22
lvl22 = What lvl21

lvl23
lvl23 =
  unpackCString#
    "libraries/vector/Data/Vector/Fusion/Stream/Monadic.hs"#

lvl24
lvl24 = I# 1283

lvl25
lvl25 = unpackCString# "enumFromTo"#

lvl26
lvl26 = unpackCString# "vector too large"#

lvl27
lvl27 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl28
lvl28 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl29
lvl29 = $fDT(,) $fDTInt $dDT1

lvl30
lvl30 = What lvl5

lvl31
lvl31 = What lvl8

lvl32
lvl32 = WFMapGen lvl31 WSlice

lvl33
lvl33 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl34
lvl34 = $fDT(,) $fDTInt $dDT1

lvl35
lvl35 = What lvl5

lvl36
lvl36 = What lvl8

lvl37
lvl37 = WFMapGen lvl36 WSlice

lvl38
lvl38 =
  \ @ b @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl39
lvl39 = \ @ s -> $fPrimMonadST ($fMonadST)

lvl40
lvl40 = unpackCString# "libraries/vector/Data/Vector/Generic.hs"#

lvl41
lvl41 = I# 1829

lvl42
lvl42 = unpackCString# "copy"#

lvl43
lvl43 = unpackCString# "length mismatch"#

lvl44
lvl44 = \ @ s -> checkError lvl40 lvl41 Bounds lvl42 lvl43

lvl45
lvl45 = What lvl5

lvl46
lvl46 = unpackCString# "mapUP/map"#

lvl47
lvl47 = What lvl46

lvl48
lvl48 = WFMapGen lvl47 WSlice

$wgetsrc
$wgetsrc =
  \ @ b w ww w1 w2 ->
    let { D:Unbox ww2 ww3 ~ ww1 <- ww } in
    let { __DEFAULT ~ xs1 <- w1 } in
    let { Gang dt ds1 ds2 ~ wild <- theGang } in
    let { I# x ~ _ <- basicLength ww2 xs1 } in
    let { __DEFAULT ~ wild2 <- quotInt# x dt } in
    let {
      l
      l = I# wild2 } in
    let {
      a11
      a11 = +# wild2 1 } in
    let {
      lvl211
      lvl211 = I# a11 } in
    let {
      lvl212
      lvl212 = $p1Vector ww2 } in
    let {
      lvl213
      lvl213 = basicUnsafeSlice ww2 } in
    let {
      lvl214
      lvl214 = basicLength ww2 } in
    let {
      lvl215
      lvl215 = \ @ s -> basicUnsafeFreeze ww2 } in
    let {
      lvl216
      lvl216 = basicUnsafeIndexM ww2 } in
    let {
      lvl217
      lvl217 = + w } in
    let { __DEFAULT ~ wild3 <- remInt# x dt } in
    let { DVector ipv ipv1 ipv2 ipv3 ipv4 ipv5 ~ nt
    <- (generateD
          ($fDTVector ww1)
          lvl48
          wild
          (\ i ->
             let { D:MVector ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15
                             ww16 ~ _
             <- lvl212
             } in
             let { __DEFAULT ~ v2
             <- lvl213
                  (let { I# x1 ~ _ <- i } in
                   case <# x1 wild3 of _ {
                     False -> I# (+# (*# wild2 x1) wild3);
                     True -> I# (*# (+# wild2 1) x1)
                   })
                  (let { I# x1 ~ _ <- i } in
                   case <# x1 wild3 of _ {
                     False -> l;
                     True -> lvl211
                   })
                  xs1
             } in
             let { I# ipv ~ n <- lvl214 v2 } in
             runSTRep
               (\ @ s s1 ->
                  let { (# ipv3, ipv4 #) ~ _ <- ((ww8 (lvl39) n) `cast` ...) s1 } in
                  letrec {
                    $s$wa
                    $s$wa =
                      \ sc sc1 sc2 ->
                        case >=# sc1 ipv of _ {
                          False ->
                            let { Box x1 ~ _ <- lvl216 $fMonadBox v2 (I# sc1) } in
                            let { (# ipv6, ipv7 #) ~ _
                            <- ((ww11 (lvl39) ipv4 (I# sc2) (lvl217 x1 w2)) `cast` ...) sc
                            } in
                            $s$wa ipv6 (+# sc1 1) (+# sc2 1);
                          True -> (# sc, I# sc2 #)
                        }; } in
                  let { (# ipv5, ipv6 #) ~ _ <- $s$wa ipv3 0 0 } in
                  ((lvl215 (lvl39) (ww6 lvl7 ipv6 ipv4)) `cast` ...) ipv5)))
       `cast` ...
    } in
    runSTRep
      (\ @ s s1 ->
         let { (di, n) ~ _
         <- scanD
              $fDTInt
              lvl45
              wild
              $fNumInt_$c+
              lvl7
              ((DInt ipv ipv1 ipv2) `cast` ...)
         } in
         let { DInt ipv6 ipv7 ipv8 ~ nt1 <- di `cast` ... } in
         let { I# ipv9 ~ n1 <- n } in
         case >=# ipv9 0 of _ {
           False -> case lvl38 ipv9 of wild6 { };
           True ->
             let { (# ipv10, ipv11 #) ~ _
             <- ((basicUnsafeNew ww3 (lvl39) n1) `cast` ...) s1
             } in
             let {
               nt2
               nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
             let {
               $dDT7
               $dDT7 = $fDTVector ww1 } in
             let {
               lvl218
               lvl218 = $fDT(,) $fDTInt $dDT7 } in
             let {
               lvl219
               lvl219 = \ @ s2 -> basicUnsafeSlice ww3 } in
             let { (# ipv14, ipv15 #) ~ _
             <- ($wa1
                   dt
                   ds1
                   ds2
                   (++
                      $fShowComp2
                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                   (WorkCopy n1)
                   ((\ i s2 ->
                       let { (# ipv14, ipv15 #) ~ _
                       <- ((((myD lvl218 (nt2 `cast` ...)) `cast` ...) i) `cast` ...) s2
                       } in
                       let { (x1, y) ~ _ <- ipv15 } in
                       let { I# ipv16 ~ tpl2 <- x1 } in
                       let { __DEFAULT ~ tpl1 <- y } in
                       let { D:Vector ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ~ _ <- ww2 } in
                       let {
                         a12
                         a12 = lvl219 tpl2 (ww8 tpl1) ipv11 } in
                       let { I# x2 ~ _ <- basicLength ww5 (a12 `cast` ...) } in
                       let { I# y1 ~ _ <- ww8 tpl1 } in
                       case ==# x2 y1 of _ {
                         False -> case lvl44 of wild10 { };
                         True ->
                           let { __DEFAULT ~ nt3 <- a12 } in
                           ((ww11 (lvl39) (nt3 `cast` ...) tpl1) `cast` ...) ipv14
                       })
                    `cast` ...)
                   (ipv10 `cast` ...))
                `cast` ...
             } in
             ((basicUnsafeFreeze ww2 (lvl39) (ipv11 `cast` ...)) `cast` ...)
               ipv14
         })

$wccat
$wccat =
  \ @ b ww ww1 ww2 ->
    runSTRep
      (\ @ s s1 ->
         let { (# ipv, ipv1 #) ~ _
         <- newArray# 0 (uninitialised) (s1 `cast` ...)
         } in
         letrec {
           $sa
           $sa =
             \ sc sc1 sc2 sg sc3 sc4 sc5 sc6 sc7 sc8 sc9 sc10 ->
               case <# sc7 sc8 of _ {
                 False ->
                   case >=# sc9 ww1 of _ {
                     False ->
                       let { (# ipv2 #) ~ _ <- indexArray# ww2 (+# ww sc9) } in
                       let { Vector dt dt3 dt4 ~ _ <- ipv2 } in
                       $sa sc sc1 sc2 @~ sg sc3 dt dt3 dt4 0 dt3 (+# sc9 1) sc10;
                     True -> (# sc10, ((MVector sc sc1 sc2) `cast` ..., I# sc3) #)
                   };
                 True ->
                   let { (# ipv2 #) ~ _ <- indexArray# sc6 (+# sc4 sc7) } in
                   case <# sc3 sc1 of _ {
                     False ->
                       let {
                         $j
                         $j =
                           \ n# ->
                             let { (# ipv3, ipv4 #) ~ _
                             <- newArray# n# (uninitialised) (sc10 `cast` ...)
                             } in
                             let { __DEFAULT ~ ipv5
                             <- (copyMutableArray# sc2 sc ipv4 0 sc1 ipv3) `cast` ...
                             } in
                             let { __DEFAULT ~ ipv6
                             <- (writeArray# ipv4 sc3 ipv2 (ipv5 `cast` ...)) `cast` ...
                             } in
                             $sa
                               0
                               n#
                               ipv4
                               @~ (Sym <(TFCo:R:MutableVector[0])> <PrimState (ST s)> <b>)
                               (+# sc3 1)
                               sc4
                               sc5
                               sc6
                               (+# sc7 1)
                               sc8
                               sc9
                               ipv6 } in
                       case <=# sc1 1 of _ {
                         False -> $j (+# sc1 sc1);
                         True -> $j (+# sc1 1)
                       };
                     True ->
                       let { __DEFAULT ~ ipv3
                       <- (writeArray# sc2 (+# sc sc3) ipv2 (sc10 `cast` ...)) `cast` ...
                       } in
                       $sa
                         sc
                         sc1
                         sc2
                         @~ (Sym <(TFCo:R:MutableVector[0])> <PrimState (ST s)> <b>)
                         (+# sc3 1)
                         sc4
                         sc5
                         sc6
                         (+# sc7 1)
                         sc8
                         sc9
                         ipv3
                   }
               }; } in
         case >=# 0 ww1 of _ {
           False ->
             let { (# ipv2 #) ~ _ <- indexArray# ww2 ww } in
             let { Vector dt dt3 dt4 ~ _ <- ipv2 } in
             let { (# ipv5, ipv6 #) ~ _
             <- $sa
                  0
                  0
                  ipv1
                  @~ (Sym <(TFCo:R:MutableVector[0])> <PrimState (ST s)> <b>)
                  0
                  dt
                  dt3
                  dt4
                  0
                  dt3
                  1
                  (ipv `cast` ...)
             } in
             let { (v', n) ~ _ <- ipv6 } in
             let { MVector dt5 dt6 dt7 ~ _ <- v' `cast` ... } in
             let { I# dt9 ~ _ <- n } in
             let { (# ipv3, ipv4 #) ~ _
             <- unsafeFreezeArray# dt7 (ipv5 `cast` ...)
             } in
             (# ipv3 `cast` ..., Vector dt5 dt9 ipv4 #);
           True ->
             let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeArray# ipv1 ipv } in
             (# ipv2 `cast` ..., Vector 0 0 ipv3 #)
         })

a
a = $fDTVector_$cindexD $fUnboxInt

a1
a1 = $fDTVector_$cnewMD $fUnboxInt

a2
a2 = $fDTVector_$creadMD $fUnboxInt

a3
a3 = $fDTVector_$cwriteMD $fUnboxInt

a4
a4 = $fDTVector_$cunsafeFreezeMD $fUnboxInt

a5
a5 = \ @ b tpl tpl1 -> let { __DEFAULT ~ _ <- tpl } in tpl1

a6
a6 = $fDTVector_$csizeD $fUnboxInt

a7
a7 = $fDTVector_$csizeMD $fUnboxInt

a8
a8 = $fDTVector_$cmeasureD $fUnboxInt

$dDT5
$dDT5 = D:DT a a1 a2 a3 a4 a5 a6 a7 a8

lvl49
lvl49 = unpackCString# "foldUP/f"#

lvl50
lvl50 = What lvl49

lvl51
lvl51 = unpackCString# "foldUP/fold"#

lvl52
lvl52 = What lvl51

lvl53
lvl53 = WFMapGen lvl52 WSlice

lvl54
lvl54 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl55
lvl55 = $fDT(,) $fDTInt $dDT1

lvl56
lvl56 = What lvl5

lvl57
lvl57 = $fDT(,) $fDTInt $dDT5

lvl58
lvl58 = unpackCString# "scanUP/map"#

lvl59
lvl59 = What lvl58

lvl60
lvl60 =
  \ _ x ->
    let { (x1, y) ~ _ <- x } in
    let { I# ipv ~ _ <- x1 } in
    let { Vector ipv1 ipv2 ipv3 ~ _ <- y `cast` ... } in
    runSTRep
      (\ @ s s1 ->
         let { (# ipv4, ipv5 #) ~ _
         <- newByteArray# (*# ipv2 8) (s1 `cast` ...)
         } in
         letrec {
           $s$wa
           $s$wa =
             \ sc sc1 sc2 ->
               case >=# sc1 ipv2 of _ {
                 False ->
                   let { __DEFAULT ~ wild2 <- indexIntArray# ipv3 (+# ipv1 sc1) } in
                   $s$wa
                     ((writeIntArray# ipv5 sc2 (+# ipv wild2) (sc `cast` ...))
                      `cast` ...)
                     (+# sc1 1)
                     (+# sc2 1);
                 True -> (# sc, I# sc2 #)
               }; } in
         let { (# ipv6, ipv7 #) ~ _ <- $s$wa (ipv4 `cast` ...) 0 0 } in
         let { I# dt4 ~ _ <- ipv7 } in
         let { (# ipv8, ipv9 #) ~ _
         <- unsafeFreezeByteArray# ipv5 (ipv6 `cast` ...)
         } in
         (# ipv8 `cast` ..., (Vector 0 dt4 ipv9) `cast` ... #))

lvl61
lvl61 = unpackCString# "scanUP/scan"#

lvl62
lvl62 = What lvl61

lvl63
lvl63 = $fDT(,) $dDT5 $fDTInt

lvl64
lvl64 = unpackCString# "scanUP/scanRes"#

lvl65
lvl65 = What lvl64

lvl66
lvl66 = WFMapGen lvl65 WSlice

lvl67
lvl67 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl68
lvl68 = $fDT(,) $fDTInt $dDT1

lvl69
lvl69 = What lvl5

lvl70
lvl70 = $fDT(,) lvl19 $fDTInt

lvl71
lvl71 = What lvl21

lvl72
lvl72 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl73
lvl73 = $fDT(,) $fDTInt $dDT1

lvl74
lvl74 = What lvl5

lvl75
lvl75 = $fDT(,) lvl19 $fDTInt

lvl76
lvl76 = What lvl21

lvl77
lvl77 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl78
lvl78 = $fDT(,) $fDTInt $dDT1

lvl79
lvl79 = What lvl5

lvl80
lvl80 = $fDT(,) lvl19 $fDTInt

lvl81
lvl81 = What lvl21

lvl82
lvl82 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl83
lvl83 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl84
lvl84 = $fDT(,) $fDTInt $dDT1

lvl85
lvl85 = What lvl5

lvl86
lvl86 = $fDT(,) lvl19 $fDTInt

lvl87
lvl87 = unpackCString# "extractsFromVectorsUPVSegdP"#

lvl88
lvl88 = What lvl87

lvl89
lvl89 =
  \ s ->
    let { __DEFAULT ~ s' <- noDuplicate# s } in
    let { (# ipv26, ipv27 #) ~ _
    <- newByteArray# 0 (s' `cast` ...)
    } in
    let { (# ipv28, ipv29 #) ~ _
    <- unsafeFreezeByteArray# ipv27 ipv26
    } in
    (# ipv28, ByteArray ipv29 #) `cast` ...

lvl90
lvl90 = unsafeDupablePerformIO (lvl89 `cast` ...)

lvl91
lvl91 = checkError lvl23 lvl24 Bounds lvl25 lvl26

$dDT2
$dDT2 = D:DT a a1 a2 a3 a4 a5 a6 a7 a8

lvl92
lvl92 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl93
lvl93 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl94
lvl94 = $fDT(,) $fDTInt $dDT1

lvl95
lvl95 = What lvl5

lvl96
lvl96 = $fDT(,) lvl19 $fDTInt

lvl97
lvl97 = What lvl87

lvl98
lvl98 = unsafeDupablePerformIO (lvl89 `cast` ...)

lvl99
lvl99 = What lvl49

lvl100
lvl100 = What lvl51

lvl101
lvl101 = WFMapGen lvl100 WSlice

lvl102
lvl102 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl103
lvl103 = $fDT(,) $fDTInt $dDT1

lvl104
lvl104 = What lvl5

lvl105
lvl105 = $fDT(,) $fDTInt $dDT2

lvl106
lvl106 = What lvl58

lvl107
lvl107 = What lvl61

lvl108
lvl108 = $fDT(,) $dDT2 $fDTInt

lvl109
lvl109 = What lvl64

lvl110
lvl110 = WFMapGen lvl109 WSlice

lvl111
lvl111 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl112
lvl112 = $fDT(,) $fDTInt $dDT1

lvl113
lvl113 = What lvl5

lvl114
lvl114 = unpackCString# "replicateUP/replicate"#

lvl115
lvl115 = What lvl114

lvl116
lvl116 =
  \ _ x ->
    let { I# ipv ~ _ <- x } in
    runSTRep
      (\ @ s s1 ->
         let {
           $j
           $j =
             \ x1 ->
               let { (# ipv1, ipv2 #) ~ _
               <- newByteArray# (*# x1 8) (s1 `cast` ...)
               } in
               letrec {
                 $s$wa
                 $s$wa =
                   \ sc sc1 sc2 ->
                     case <=# sc1 0 of _ {
                       False ->
                         $s$wa
                           ((writeIntArray# ipv2 sc2 1 (sc `cast` ...)) `cast` ...)
                           (-# sc1 1)
                           (+# sc2 1);
                       True -> (# sc, I# sc2 #)
                     }; } in
               let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv1 `cast` ...) ipv 0 } in
               let { I# dt4 ~ _ <- ipv6 } in
               let { (# ipv3, ipv4 #) ~ _
               <- unsafeFreezeByteArray# ipv2 (ipv5 `cast` ...)
               } in
               (# ipv3 `cast` ..., (Vector 0 dt4 ipv4) `cast` ... #) } in
         case <=# ipv 0 of _ {
           False -> $j ipv;
           True -> $j 0
         })

lvl117
lvl117 =
  \ @ s s1 ->
    let { (# ipv, ipv1 #) ~ _
    <- newArray# 0 (uninitialised) (s1 `cast` ...)
    } in
    let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeArray# ipv1 ipv } in
    (# ipv2 `cast` ..., Vector 0 0 ipv3 #)

lvl118
lvl118 =
  let { Vector ipv ipv1 ipv2 ~ _ <- runSTRep lvl117 } in
  runSTRep
    (\ @ s s1 ->
       let { (# ipv3, ipv4 #) ~ _
       <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
       } in
       letrec {
         $s$wa
         $s$wa =
           \ sc sc1 sc2 ->
             case >=# sc1 ipv1 of _ {
               False ->
                 let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv sc1) } in
                 $s$wa
                   ((writeArray#
                       ipv4
                       sc2
                       (let { PNested vsegd xs segd flat ~ _ <- ipv5 `cast` ... } in
                        (PNested vsegd (xs `cast` ...) segd (flat `cast` ...)) `cast` ...)
                       (sc `cast` ...))
                    `cast` ...)
                   (+# sc1 1)
                   (+# sc2 1);
               True -> (# sc, I# sc2 #)
             }; } in
       let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
       let { I# dt6 ~ _ <- ipv6 } in
       let { (# ipv7, ipv8 #) ~ _
       <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
       } in
       (# ipv7 `cast` ..., Vector 0 dt6 ipv8 #))

$dDT3
$dDT3 = D:DT a a1 a2 a3 a4 a5 a6 a7 a8

lvl119
lvl119 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl120
lvl120 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl121
lvl121 = $fDT(,) $fDTInt $dDT1

lvl122
lvl122 = What lvl5

lvl123
lvl123 = $fDT(,) lvl19 $fDTInt

lvl124
lvl124 = What lvl87

lvl125
lvl125 = unsafeDupablePerformIO (lvl89 `cast` ...)

lvl126
lvl126 = What lvl49

lvl127
lvl127 = What lvl51

lvl128
lvl128 = WFMapGen lvl127 WSlice

lvl129
lvl129 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl130
lvl130 = $fDT(,) $fDTInt $dDT1

lvl131
lvl131 = What lvl5

lvl132
lvl132 = $fDT(,) $fDTInt $dDT3

lvl133
lvl133 = What lvl58

lvl134
lvl134 = What lvl61

lvl135
lvl135 = $fDT(,) $dDT3 $fDTInt

lvl136
lvl136 = What lvl64

lvl137
lvl137 = WFMapGen lvl136 WSlice

lvl138
lvl138 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl139
lvl139 = $fDT(,) $fDTInt $dDT1

lvl140
lvl140 = What lvl5

lvl141
lvl141 = What lvl114

lvl142
lvl142 =
  \ _ x ->
    let { I# ipv ~ _ <- x } in
    runSTRep
      (\ @ s s1 ->
         let {
           $j
           $j =
             \ x1 ->
               let { (# ipv1, ipv2 #) ~ _
               <- newByteArray# (*# x1 8) (s1 `cast` ...)
               } in
               letrec {
                 $s$wa
                 $s$wa =
                   \ sc sc1 sc2 ->
                     case <=# sc1 0 of _ {
                       False ->
                         $s$wa
                           ((writeIntArray# ipv2 sc2 1 (sc `cast` ...)) `cast` ...)
                           (-# sc1 1)
                           (+# sc2 1);
                       True -> (# sc, I# sc2 #)
                     }; } in
               let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv1 `cast` ...) ipv 0 } in
               let { I# dt4 ~ _ <- ipv6 } in
               let { (# ipv3, ipv4 #) ~ _
               <- unsafeFreezeByteArray# ipv2 (ipv5 `cast` ...)
               } in
               (# ipv3 `cast` ..., (Vector 0 dt4 ipv4) `cast` ... #) } in
         case <=# ipv 0 of _ {
           False -> $j ipv;
           True -> $j 0
         })

lvl143
lvl143 =
  let { Vector ipv ipv1 ipv2 ~ _ <- runSTRep lvl117 } in
  runSTRep
    (\ @ s s1 ->
       let { (# ipv3, ipv4 #) ~ _
       <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
       } in
       letrec {
         $s$wa
         $s$wa =
           \ sc sc1 sc2 ->
             case >=# sc1 ipv1 of _ {
               False ->
                 let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv sc1) } in
                 $s$wa
                   ((writeArray#
                       ipv4
                       sc2
                       (let { PNested vsegd xs segd flat ~ _ <- ipv5 `cast` ... } in
                        (PNested vsegd (xs `cast` ...) segd (flat `cast` ...)) `cast` ...)
                       (sc `cast` ...))
                    `cast` ...)
                   (+# sc1 1)
                   (+# sc2 1);
               True -> (# sc, I# sc2 #)
             }; } in
       let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
       let { I# dt6 ~ _ <- ipv6 } in
       let { (# ipv7, ipv8 #) ~ _
       <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
       } in
       (# ipv7 `cast` ..., Vector 0 dt6 ipv8 #))

$dDT4
$dDT4 = D:DT a a1 a2 a3 a4 a5 a6 a7 a8

lvl144
lvl144 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl145
lvl145 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl146
lvl146 = $fDT(,) $fDTInt $dDT1

lvl147
lvl147 = What lvl5

lvl148
lvl148 = unpackCString# "UPSegd.replicateWithP/replicateSU"#

lvl149
lvl149 = What lvl148

lvl150
lvl150 = What lvl49

lvl151
lvl151 = What lvl51

lvl152
lvl152 = WFMapGen lvl151 WSlice

lvl153
lvl153 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl154
lvl154 = $fDT(,) $fDTInt $dDT1

lvl155
lvl155 = What lvl5

lvl156
lvl156 = $fDT(,) $fDTInt $dDT4

lvl157
lvl157 = What lvl58

lvl158
lvl158 = What lvl61

lvl159
lvl159 = $fDT(,) $dDT4 $fDTInt

lvl160
lvl160 = What lvl64

lvl161
lvl161 = WFMapGen lvl160 WSlice

lvl162
lvl162 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl163
lvl163 = $fDT(,) $fDTInt $dDT1

lvl164
lvl164 = What lvl5

lvl165
lvl165 = What lvl114

lvl166
lvl166 =
  \ _ x ->
    let { I# ipv ~ _ <- x } in
    runSTRep
      (\ @ s s1 ->
         let {
           $j
           $j =
             \ x1 ->
               let { (# ipv1, ipv2 #) ~ _
               <- newByteArray# (*# x1 8) (s1 `cast` ...)
               } in
               letrec {
                 $s$wa
                 $s$wa =
                   \ sc sc1 sc2 ->
                     case <=# sc1 0 of _ {
                       False ->
                         $s$wa
                           ((writeIntArray# ipv2 sc2 1 (sc `cast` ...)) `cast` ...)
                           (-# sc1 1)
                           (+# sc2 1);
                       True -> (# sc, I# sc2 #)
                     }; } in
               let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv1 `cast` ...) ipv 0 } in
               let { I# dt4 ~ _ <- ipv6 } in
               let { (# ipv3, ipv4 #) ~ _
               <- unsafeFreezeByteArray# ipv2 (ipv5 `cast` ...)
               } in
               (# ipv3 `cast` ..., (Vector 0 dt4 ipv4) `cast` ... #) } in
         case <=# ipv 0 of _ {
           False -> $j ipv;
           True -> $j 0
         })

$dDT6
$dDT6 = D:DT a a1 a2 a3 a4 a5 a6 a7 a8

lvl167
lvl167 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl168
lvl168 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl169
lvl169 = $fDT(,) $fDTInt $dDT1

lvl170
lvl170 = What lvl5

lvl171
lvl171 = What lvl148

lvl172
lvl172 = What lvl49

lvl173
lvl173 = What lvl51

lvl174
lvl174 = WFMapGen lvl173 WSlice

lvl175
lvl175 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl176
lvl176 = $fDT(,) $fDTInt $dDT1

lvl177
lvl177 = What lvl5

lvl178
lvl178 = $fDT(,) $fDTInt $dDT6

lvl179
lvl179 = What lvl58

lvl180
lvl180 = What lvl61

lvl181
lvl181 = $fDT(,) $dDT6 $fDTInt

lvl182
lvl182 = What lvl64

lvl183
lvl183 = WFMapGen lvl182 WSlice

lvl184
lvl184 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl185
lvl185 = $fDT(,) $fDTInt $dDT1

lvl186
lvl186 = What lvl5

lvl187
lvl187 = What lvl114

lvl188
lvl188 =
  \ _ x ->
    let { I# ipv ~ _ <- x } in
    runSTRep
      (\ @ s s1 ->
         let {
           $j
           $j =
             \ x1 ->
               let { (# ipv1, ipv2 #) ~ _
               <- newByteArray# (*# x1 8) (s1 `cast` ...)
               } in
               letrec {
                 $s$wa
                 $s$wa =
                   \ sc sc1 sc2 ->
                     case <=# sc1 0 of _ {
                       False ->
                         $s$wa
                           ((writeIntArray# ipv2 sc2 1 (sc `cast` ...)) `cast` ...)
                           (-# sc1 1)
                           (+# sc2 1);
                       True -> (# sc, I# sc2 #)
                     }; } in
               let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv1 `cast` ...) ipv 0 } in
               let { I# dt4 ~ _ <- ipv6 } in
               let { (# ipv3, ipv4 #) ~ _
               <- unsafeFreezeByteArray# ipv2 (ipv5 `cast` ...)
               } in
               (# ipv3 `cast` ..., (Vector 0 dt4 ipv4) `cast` ... #) } in
         case <=# ipv 0 of _ {
           False -> $j ipv;
           True -> $j 0
         })

$wlsplitPoints
$wlsplitPoints =
  \ w w1 w2 ->
    case w of wild2 {
      __DEFAULT ->
        let { DVector ipv ipv1 ipv2 ipv3 ipv4 ipv5 ~ nt
        <- (imapD'
              $fDTInt $dDT1 lvl187 theGang lvl188 (splitLenD theGang (I# wild2)))
           `cast` ...
        } in
        let { Vector dt3 dt4 dt5 ~ _
        <- (runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl186
                      theGang
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv ipv1 ipv2) `cast` ...)
                 } in
                 let { DInt ipv6 ipv7 ipv8 ~ nt1 <- di `cast` ... } in
                 let { I# ipv9 ~ n1 <- n } in
                 case >=# ipv9 0 of _ {
                   False -> case lvl184 ipv9 of wild3 { };
                   True ->
                     let { (# ipv10, ipv11 #) ~ _
                     <- newByteArray# (*# ipv9 8) (s1 `cast` ...)
                     } in
                     let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                     let {
                       nt2
                       nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                     let { (# ipv14, ipv15 #) ~ _
                     <- ($wa1
                           ww1
                           ww2
                           ww3
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv14, ipv15 #) ~ _
                               <- ((((myD lvl185 (nt2 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv15 } in
                               let { I# ipv16 ~ _ <- x } in
                               let { Vector ipv12 ipv13 ipv17 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv17
                                    (*# ipv12 8)
                                    ipv11
                                    (*# ipv16 8)
                                    (*# ipv13 8)
                                    (ipv14 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv10 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv12, ipv13 #) ~ _
                     <- unsafeFreezeByteArray# ipv11 (ipv14 `cast` ...)
                     } in
                     (# ipv12 `cast` ..., (Vector 0 ipv9 ipv13) `cast` ... #)
                 }))
           `cast` ...
        } in
        let { Gang dt6 ds1 ds2 ~ wild <- theGang } in
        let { __DEFAULT ~ wild1 <- quotInt# dt4 dt6 } in
        let { __DEFAULT ~ wild3 <- remInt# dt4 dt6 } in
        let { DProd dx dy ~ _
        <- (generateD
              lvl181
              lvl183
              wild
              (\ i ->
                 let {
                   ys
                   ys =
                     let { I# x1 ~ _ <- i } in
                     let {
                       $j
                       $j =
                         \ y ->
                           let {
                             $j1
                             $j1 =
                               \ dt7 ->
                                 runSTRep
                                   (\ @ s s1 ->
                                      let { (# ipv6, ipv7 #) ~ _
                                      <- newByteArray# (*# (+# 1 dt7) 8) (s1 `cast` ...)
                                      } in
                                      let {
                                        a11
                                        a11 = +# dt3 y } in
                                      letrec {
                                        $s$wa
                                        $s$wa =
                                          \ sc sc1 sc2 sc3 ->
                                            case >=# sc1 dt7 of _ {
                                              False ->
                                                let { __DEFAULT ~ wild6
                                                <- indexIntArray# dt5 (+# a11 sc1)
                                                } in
                                                let {
                                                  x#
                                                  x# = +# sc2 wild6 } in
                                                $s$wa
                                                  (+# sc 1)
                                                  (+# sc1 1)
                                                  x#
                                                  ((writeIntArray# ipv7 sc x# (sc3 `cast` ...))
                                                   `cast` ...);
                                              True -> (# sc3, I# sc #)
                                            }; } in
                                      let { (# ipv8, ipv9 #) ~ _
                                      <- $s$wa 1 0 0 ((writeIntArray# ipv7 0 0 ipv6) `cast` ...)
                                      } in
                                      let { I# dt9 ~ _ <- ipv9 } in
                                      let { (# ipv10, ipv11 #) ~ _
                                      <- unsafeFreezeByteArray# ipv7 (ipv8 `cast` ...)
                                      } in
                                      (# ipv10 `cast` ..., (Vector 0 dt9 ipv11) `cast` ... #)) } in
                           case <# x1 wild3 of _ {
                             False -> $j1 wild1;
                             True -> $j1 (+# wild1 1)
                           } } in
                     case <# x1 wild3 of _ {
                       False -> $j (+# (*# wild1 x1) wild3);
                       True -> $j (*# (+# wild1 1) x1)
                     } } in
                 (let { Vector dt7 dt8 dt9 ~ _ <- ys `cast` ... } in
                  (Vector dt7 (-# dt8 1) dt9) `cast` ...,
                  let { Vector dt7 dt8 dt9 ~ _ <- ys `cast` ... } in
                  let { __DEFAULT ~ wild5
                  <- indexIntArray# dt9 (+# dt7 (-# dt8 1))
                  } in
                  I# wild5)))
           `cast` ...
        } in
        let { (x1, ds3) ~ _
        <- scanD $fDTInt lvl180 wild $fNumInt_$c+ lvl7 dy
        } in
        let { DInt ipv6 ipv7 ipv8 ~ nt1 <- x1 `cast` ... } in
        let { DVector ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ~ nt2
        <- (imapD'
              lvl178
              $dDT6
              lvl179
              wild
              lvl60
              ((DProd (nt1 `cast` ...) dx) `cast` ...))
           `cast` ...
        } in
        let { Vector dt8 dt9 dt10 ~ _
        <- (runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl177
                      wild
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv9 ipv10 ipv11) `cast` ...)
                 } in
                 let { DInt ipv15 ipv16 ipv17 ~ nt3 <- di `cast` ... } in
                 let { I# ipv18 ~ n1 <- n } in
                 case >=# ipv18 0 of _ {
                   False -> case lvl175 ipv18 of wild8 { };
                   True ->
                     let { (# ipv19, ipv20 #) ~ _
                     <- newByteArray# (*# ipv18 8) (s1 `cast` ...)
                     } in
                     let {
                       nt4
                       nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                     let { (# ipv21, ipv22 #) ~ _
                     <- ($wa1
                           dt6
                           ds1
                           ds2
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv21, ipv22 #) ~ _
                               <- ((((myD lvl176 (nt4 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv22 } in
                               let { I# ipv23 ~ _ <- x } in
                               let { Vector ipv24 ipv25 ipv26 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv26
                                    (*# ipv24 8)
                                    ipv20
                                    (*# ipv23 8)
                                    (*# ipv25 8)
                                    (ipv21 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv19 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv23, ipv24 #) ~ _
                     <- unsafeFreezeByteArray# ipv20 (ipv21 `cast` ...)
                     } in
                     (# ipv23 `cast` ..., (Vector 0 ipv18 ipv24) `cast` ... #)
                 }))
           `cast` ...
        } in
        let { I# dt14 ~ _
        <- foldD
             $fDTInt
             lvl172
             wild
             $fNumInt_$c+
             (generateD
                $fDTInt
                lvl174
                wild
                ((\ i ->
                    let { I# x2 ~ _ <- i } in
                    let {
                      $w$j
                      $w$j =
                        \ w3 ->
                          let {
                            $w$j1
                            $w$j1 =
                              \ w4 ->
                                let {
                                  a11
                                  a11 = +# dt3 w3 } in
                                letrec {
                                  $s$wfoldlM'_loop
                                  $s$wfoldlM'_loop =
                                    \ sc sc1 ->
                                      case >=# sc w4 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild8
                                          <- indexIntArray# dt5 (+# a11 sc)
                                          } in
                                          $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild8);
                                        True -> sc1
                                      }; } in
                                $s$wfoldlM'_loop 0 0 } in
                          case <# x2 wild3 of _ {
                            False -> $w$j1 wild1;
                            True -> $w$j1 (+# wild1 1)
                          } } in
                    case <# x2 wild3 of _ {
                      False ->
                        let { __DEFAULT ~ ww <- $w$j (+# (*# wild1 x2) wild3) } in
                        (I# ww) `cast` ...;
                      True ->
                        let { __DEFAULT ~ ww <- $w$j (*# (+# wild1 1) x2) } in
                        (I# ww) `cast` ...
                    })
                 `cast` ...))
        } in
        let { PInt arr ~ _ <- w1 `cast` ... } in
        let {
          vsegids3
          vsegids3 =
            runSTRep
              (\ @ s s1 ->
                 let {
                   a11
                   a11 = -# dt4 1 } in
                 let {
                   $j
                   $j =
                     \ x ->
                       let { (# ipv15, ipv16 #) ~ _
                       <- newByteArray# (*# x 8) (s1 `cast` ...)
                       } in
                       letrec {
                         $s$wa
                         $s$wa =
                           \ sc sc1 sc2 ->
                             case <=# sc1 a11 of _ {
                               False -> (# sc, I# sc2 #);
                               True ->
                                 $s$wa
                                   ((writeIntArray# ipv16 sc2 sc1 (sc `cast` ...)) `cast` ...)
                                   (+# sc1 1)
                                   (+# sc2 1)
                             }; } in
                       let { (# ipv17, ipv18 #) ~ _ <- $s$wa (ipv15 `cast` ...) 0 0 } in
                       let { I# dt16 ~ _ <- ipv18 } in
                       let { (# ipv19, ipv20 #) ~ _
                       <- unsafeFreezeByteArray# ipv16 (ipv17 `cast` ...)
                       } in
                       (# ipv19 `cast` ..., (Vector 0 dt16 ipv20) `cast` ... #) } in
                 case ># 0 a11 of _ {
                   False ->
                     let {
                       a12
                       a12 = +# a11 1 } in
                     case ># a12 0 of _ {
                       False -> case lvl167 of wild9 { };
                       True -> $j a12
                     };
                   True -> $j 0
                 }) } in
        let {
          dt15
          dt15 =
            runSTRep
              (\ @ s s1 ->
                 let {
                   $j
                   $j =
                     \ x ->
                       let { (# ipv15, ipv16 #) ~ _
                       <- newByteArray# (*# x 8) (s1 `cast` ...)
                       } in
                       letrec {
                         $s$wa
                         $s$wa =
                           \ sc sc1 sc2 ->
                             case <=# sc1 0 of _ {
                               False ->
                                 $s$wa
                                   ((writeIntArray# ipv16 sc2 0 (sc `cast` ...)) `cast` ...)
                                   (-# sc1 1)
                                   (+# sc2 1);
                               True -> (# sc, I# sc2 #)
                             }; } in
                       let { (# ipv17, ipv18 #) ~ _ <- $s$wa (ipv15 `cast` ...) dt4 0 } in
                       let { I# dt17 ~ _ <- ipv18 } in
                       let { (# ipv19, ipv20 #) ~ _
                       <- unsafeFreezeByteArray# ipv16 (ipv17 `cast` ...)
                       } in
                       (# ipv19 `cast` ..., (Vector 0 dt17 ipv20) `cast` ... #) } in
                 case <=# dt4 0 of _ {
                   False -> $j dt4;
                   True -> $j 0
                 }) } in
        let { DVector ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ~ nt3
        <- (imapD'
              $fDTInt $dDT1 lvl165 wild lvl166 (splitLenD wild (I# wild2)))
           `cast` ...
        } in
        let { Vector dt17 dt18 dt19 ~ _
        <- (runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl164
                      wild
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv15 ipv16 ipv17) `cast` ...)
                 } in
                 let { DInt ipv21 ipv22 ipv23 ~ nt4 <- di `cast` ... } in
                 let { I# ipv24 ~ n1 <- n } in
                 case >=# ipv24 0 of _ {
                   False -> case lvl162 ipv24 of wild9 { };
                   True ->
                     let { (# ipv25, ipv26 #) ~ _
                     <- newByteArray# (*# ipv24 8) (s1 `cast` ...)
                     } in
                     let {
                       nt5
                       nt5 = DProd (nt4 `cast` ...) (nt3 `cast` ...) } in
                     let { (# ipv27, ipv28 #) ~ _
                     <- ($wa1
                           dt6
                           ds1
                           ds2
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv27, ipv28 #) ~ _
                               <- ((((myD lvl163 (nt5 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv28 } in
                               let { I# ipv29 ~ _ <- x } in
                               let { Vector ipv30 ipv31 ipv32 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv32
                                    (*# ipv30 8)
                                    ipv26
                                    (*# ipv29 8)
                                    (*# ipv31 8)
                                    (ipv27 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv25 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv29, ipv30 #) ~ _
                     <- unsafeFreezeByteArray# ipv26 (ipv27 `cast` ...)
                     } in
                     (# ipv29 `cast` ..., (Vector 0 ipv24 ipv30) `cast` ... #)
                 }))
           `cast` ...
        } in
        let { __DEFAULT ~ wild7 <- quotInt# dt18 dt6 } in
        let { __DEFAULT ~ wild8 <- remInt# dt18 dt6 } in
        let { DProd dx1 dy1 ~ _
        <- (generateD
              lvl159
              lvl161
              wild
              (\ i ->
                 let {
                   ys
                   ys =
                     let { I# x2 ~ _ <- i } in
                     let {
                       $j
                       $j =
                         \ y ->
                           let {
                             $j1
                             $j1 =
                               \ dt20 ->
                                 runSTRep
                                   (\ @ s s1 ->
                                      let { (# ipv21, ipv22 #) ~ _
                                      <- newByteArray# (*# (+# 1 dt20) 8) (s1 `cast` ...)
                                      } in
                                      let {
                                        a11
                                        a11 = +# dt17 y } in
                                      letrec {
                                        $s$wa
                                        $s$wa =
                                          \ sc sc1 sc2 sc3 ->
                                            case >=# sc1 dt20 of _ {
                                              False ->
                                                let { __DEFAULT ~ wild11
                                                <- indexIntArray# dt19 (+# a11 sc1)
                                                } in
                                                let {
                                                  x#
                                                  x# = +# sc2 wild11 } in
                                                $s$wa
                                                  (+# sc 1)
                                                  (+# sc1 1)
                                                  x#
                                                  ((writeIntArray# ipv22 sc x# (sc3 `cast` ...))
                                                   `cast` ...);
                                              True -> (# sc3, I# sc #)
                                            }; } in
                                      let { (# ipv23, ipv24 #) ~ _
                                      <- $s$wa 1 0 0 ((writeIntArray# ipv22 0 0 ipv21) `cast` ...)
                                      } in
                                      let { I# dt22 ~ _ <- ipv24 } in
                                      let { (# ipv25, ipv26 #) ~ _
                                      <- unsafeFreezeByteArray# ipv22 (ipv23 `cast` ...)
                                      } in
                                      (# ipv25 `cast` ..., (Vector 0 dt22 ipv26) `cast` ... #)) } in
                           case <# x2 wild8 of _ {
                             False -> $j1 wild7;
                             True -> $j1 (+# wild7 1)
                           } } in
                     case <# x2 wild8 of _ {
                       False -> $j (+# (*# wild7 x2) wild8);
                       True -> $j (*# (+# wild7 1) x2)
                     } } in
                 (let { Vector dt20 dt21 dt22 ~ _ <- ys `cast` ... } in
                  (Vector dt20 (-# dt21 1) dt22) `cast` ...,
                  let { Vector dt20 dt21 dt22 ~ _ <- ys `cast` ... } in
                  let { __DEFAULT ~ wild10
                  <- indexIntArray# dt22 (+# dt20 (-# dt21 1))
                  } in
                  I# wild10)))
           `cast` ...
        } in
        let { (x2, ds4) ~ _
        <- scanD $fDTInt lvl158 wild $fNumInt_$c+ lvl7 dy1
        } in
        let { DInt ipv21 ipv22 ipv23 ~ nt4 <- x2 `cast` ... } in
        let { DVector ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ~ nt5
        <- (imapD'
              lvl156
              $dDT4
              lvl157
              wild
              lvl60
              ((DProd (nt4 `cast` ...) dx1) `cast` ...))
           `cast` ...
        } in
        let { Vector dt21 dt22 dt23 ~ dt20
        <- (runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl155
                      wild
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv24 ipv25 ipv26) `cast` ...)
                 } in
                 let { DInt ipv30 ipv31 ipv32 ~ nt6 <- di `cast` ... } in
                 let { I# ipv33 ~ n1 <- n } in
                 case >=# ipv33 0 of _ {
                   False -> case lvl153 ipv33 of wild13 { };
                   True ->
                     let { (# ipv34, ipv35 #) ~ _
                     <- newByteArray# (*# ipv33 8) (s1 `cast` ...)
                     } in
                     let {
                       nt7
                       nt7 = DProd (nt6 `cast` ...) (nt5 `cast` ...) } in
                     let { (# ipv36, ipv37 #) ~ _
                     <- ($wa1
                           dt6
                           ds1
                           ds2
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv36, ipv37 #) ~ _
                               <- ((((myD lvl154 (nt7 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv37 } in
                               let { I# ipv38 ~ _ <- x } in
                               let { Vector ipv39 ipv40 ipv41 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv41
                                    (*# ipv39 8)
                                    ipv35
                                    (*# ipv38 8)
                                    (*# ipv40 8)
                                    (ipv36 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv34 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv38, ipv39 #) ~ _
                     <- unsafeFreezeByteArray# ipv35 (ipv36 `cast` ...)
                     } in
                     (# ipv38 `cast` ..., (Vector 0 ipv33 ipv39) `cast` ... #)
                 }))
           `cast` ...
        } in
        let { I# dt25 ~ _
        <- foldD
             $fDTInt
             lvl150
             wild
             $fNumInt_$c+
             (generateD
                $fDTInt
                lvl152
                wild
                ((\ i ->
                    let { I# x3 ~ _ <- i } in
                    let {
                      $w$j
                      $w$j =
                        \ w3 ->
                          let {
                            $w$j1
                            $w$j1 =
                              \ w4 ->
                                let {
                                  a11
                                  a11 = +# dt17 w3 } in
                                letrec {
                                  $s$wfoldlM'_loop
                                  $s$wfoldlM'_loop =
                                    \ sc sc1 ->
                                      case >=# sc w4 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild13
                                          <- indexIntArray# dt19 (+# a11 sc)
                                          } in
                                          $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild13);
                                        True -> sc1
                                      }; } in
                                $s$wfoldlM'_loop 0 0 } in
                          case <# x3 wild8 of _ {
                            False -> $w$j1 wild7;
                            True -> $w$j1 (+# wild7 1)
                          } } in
                    case <# x3 wild8 of _ {
                      False ->
                        let { __DEFAULT ~ ww <- $w$j (+# (*# wild7 x3) wild8) } in
                        (I# ww) `cast` ...;
                      True ->
                        let { __DEFAULT ~ ww <- $w$j (*# (+# wild7 1) x3) } in
                        (I# ww) `cast` ...
                    })
                 `cast` ...))
        } in
        let {
          ipv30
          ipv30 =
            splitSegdOnElemsD
              wild (USegd dt17 dt18 dt19 dt21 dt22 dt23 dt25) } in
        let {
          a11
          a11 =
            let { Vector ipv31 ipv32 ipv33 ~ _ <- arr `cast` ... } in
            let { DVector ipv34 ipv35 ipv36 ipv37 ipv38 ipv39 ~ nt7
            <- (imapD'
                  foldSegsWithP1
                  $dDT1
                  lvl149
                  wild
                  (\ _ x ->
                     let { (x3, y) ~ _ <- x } in
                     let { (x4, y1) ~ _ <- x3 } in
                     let { USegd dt26 dt27 dt28 dt29 dt30 dt31 dt32 ~ _ <- x4 } in
                     let { I# ipv34 ~ _ <- y1 } in
                     let { I# ipv35 ~ _ <- y } in
                     runSTRep
                       (\ @ s s1 ->
                          let { (# ipv36, ipv37 #) ~ _
                          <- newByteArray# (*# dt32 8) (s1 `cast` ...)
                          } in
                          let {
                            a12
                            a12 = +# ipv31 ipv34 } in
                          letrec {
                            $s$wa
                            $s$wa =
                              \ sc sc1 sc2 sc3 sc4 sc5 ->
                                case sc1 of _ {
                                  __DEFAULT -> (# sc5, I# sc #);
                                  0 ->
                                    case >=# sc3 dt27 of _ {
                                      False ->
                                        let { I# ww1 ~ _ <- sc4 } in
                                        case ww1 of ds7 {
                                          __DEFAULT ->
                                            let { __DEFAULT ~ wild15
                                            <- indexIntArray# ipv33 (+# a12 sc3)
                                            } in
                                            $s$wa1
                                              (+# sc 1)
                                              (-# ds7 1)
                                              wild15
                                              sc2
                                              (+# sc3 1)
                                              ((writeIntArray# ipv37 sc wild15 (sc5 `cast` ...))
                                               `cast` ...);
                                          0 ->
                                            case >=# sc2 dt27 of _ {
                                              False ->
                                                $s$wa
                                                  sc
                                                  0
                                                  (+# sc2 1)
                                                  (+# sc3 1)
                                                  (let { __DEFAULT ~ wild16
                                                   <- indexIntArray# dt28 (+# dt26 sc2)
                                                   } in
                                                   I# wild16)
                                                  sc5;
                                              True -> (# sc5, I# sc #)
                                            }
                                        };
                                      True -> (# sc5, I# sc #)
                                    }
                                };
                            $s$wa1
                            $s$wa1 =
                              \ sc sc1 sc2 sc3 sc4 sc5 ->
                                case sc1 of ds6 {
                                  __DEFAULT ->
                                    $s$wa1
                                      (+# sc 1)
                                      (-# ds6 1)
                                      sc2
                                      sc3
                                      sc4
                                      ((writeIntArray# ipv37 sc sc2 (sc5 `cast` ...)) `cast` ...);
                                  0 ->
                                    case >=# sc3 dt27 of _ {
                                      False ->
                                        $s$wa
                                          sc
                                          0
                                          (+# sc3 1)
                                          sc4
                                          (let { __DEFAULT ~ wild15
                                           <- indexIntArray# dt28 (+# dt26 sc3)
                                           } in
                                           I# wild15)
                                          sc5;
                                      True -> (# sc5, I# sc #)
                                    }
                                }; } in
                          case >=# 0 dt27 of _ {
                            False ->
                              let { (# ipv38, ipv39 #) ~ _
                              <- $s$wa
                                   0
                                   0
                                   1
                                   0
                                   (let { __DEFAULT ~ wild15 <- indexIntArray# dt28 dt26 } in
                                    I# wild15)
                                   (ipv36 `cast` ...)
                              } in
                              let { I# dt34 ~ _ <- ipv39 } in
                              let { (# ipv40, ipv41 #) ~ _
                              <- unsafeFreezeByteArray# ipv37 (ipv38 `cast` ...)
                              } in
                              (# ipv40 `cast` ..., (Vector 0 dt34 ipv41) `cast` ... #);
                            True ->
                              let { (# ipv38, ipv39 #) ~ _
                              <- unsafeFreezeByteArray# ipv37 ipv36
                              } in
                              (# ipv38 `cast` ..., (Vector 0 0 ipv39) `cast` ... #)
                          }))
                  ipv30)
               `cast` ...
            } in
            runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl147
                      wild
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv34 ipv35 ipv36) `cast` ...)
                 } in
                 let { DInt ipv40 ipv41 ipv42 ~ nt8 <- di `cast` ... } in
                 let { I# ipv43 ~ n1 <- n } in
                 case >=# ipv43 0 of _ {
                   False -> case lvl145 ipv43 of wild13 { };
                   True ->
                     let { (# ipv44, ipv45 #) ~ _
                     <- newByteArray# (*# ipv43 8) (s1 `cast` ...)
                     } in
                     let {
                       nt9
                       nt9 = DProd (nt8 `cast` ...) (nt7 `cast` ...) } in
                     let { (# ipv46, ipv47 #) ~ _
                     <- ($wa1
                           dt6
                           ds1
                           ds2
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv46, ipv47 #) ~ _
                               <- ((((myD lvl146 (nt9 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv47 } in
                               let { I# ipv48 ~ _ <- x } in
                               let { Vector ipv49 ipv50 ipv51 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv51
                                    (*# ipv49 8)
                                    ipv45
                                    (*# ipv48 8)
                                    (*# ipv50 8)
                                    (ipv46 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv44 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv48, ipv49 #) ~ _
                     <- unsafeFreezeByteArray# ipv45 (ipv46 `cast` ...)
                     } in
                     (# ipv48 `cast` ..., (Vector 0 ipv43 ipv49) `cast` ... #)
                 }) } in
        let {
          ipv31
          ipv31 =
            let {
              vsegids4
              vsegids4 =
                runSTRep
                  (\ @ s s1 ->
                     let {
                       a12
                       a12 = -# dt18 1 } in
                     let {
                       $j
                       $j =
                         \ x ->
                           let { (# ipv32, ipv33 #) ~ _
                           <- newByteArray# (*# x 8) (s1 `cast` ...)
                           } in
                           letrec {
                             $s$wa
                             $s$wa =
                               \ sc sc1 sc2 ->
                                 case <=# sc1 a12 of _ {
                                   False -> (# sc, I# sc2 #);
                                   True ->
                                     $s$wa
                                       ((writeIntArray# ipv33 sc2 sc1 (sc `cast` ...)) `cast` ...)
                                       (+# sc1 1)
                                       (+# sc2 1)
                                 }; } in
                           let { (# ipv34, ipv35 #) ~ _ <- $s$wa (ipv32 `cast` ...) 0 0 } in
                           let { I# dt27 ~ _ <- ipv35 } in
                           let { (# ipv36, ipv37 #) ~ _
                           <- unsafeFreezeByteArray# ipv33 (ipv34 `cast` ...)
                           } in
                           (# ipv36 `cast` ..., (Vector 0 dt27 ipv37) `cast` ... #) } in
                     case ># 0 a12 of _ {
                       False ->
                         let {
                           a13
                           a13 = +# a12 1 } in
                         case ># a13 0 of _ {
                           False -> case lvl144 of wild13 { };
                           True -> $j a13
                         };
                       True -> $j 0
                     }) } in
            let {
              dt26
              dt26 =
                runSTRep
                  (\ @ s s1 ->
                     let {
                       $j
                       $j =
                         \ x ->
                           let { (# ipv32, ipv33 #) ~ _
                           <- newByteArray# (*# x 8) (s1 `cast` ...)
                           } in
                           letrec {
                             $s$wa
                             $s$wa =
                               \ sc sc1 sc2 ->
                                 case <=# sc1 0 of _ {
                                   False ->
                                     $s$wa
                                       ((writeIntArray# ipv33 sc2 0 (sc `cast` ...)) `cast` ...)
                                       (-# sc1 1)
                                       (+# sc2 1);
                                   True -> (# sc, I# sc2 #)
                                 }; } in
                           let { (# ipv34, ipv35 #) ~ _
                           <- $s$wa (ipv32 `cast` ...) dt18 0
                           } in
                           let { I# dt28 ~ _ <- ipv35 } in
                           let { (# ipv36, ipv37 #) ~ _
                           <- unsafeFreezeByteArray# ipv33 (ipv34 `cast` ...)
                           } in
                           (# ipv36 `cast` ..., (Vector 0 dt28 ipv37) `cast` ... #) } in
                     case <=# dt18 0 of _ {
                       False -> $j dt18;
                       True -> $j 0
                     }) } in
            let {
              a12
              a12 =
                splitSSegdOnElemsD
                  wild
                  (USSegd
                     True
                     (dt20 `cast` ...)
                     dt26
                     dt17
                     dt18
                     dt19
                     dt21
                     dt22
                     dt23
                     dt25) } in
            let {
              upssegd
              upssegd =
                UPSSegd
                  True
                  (dt20 `cast` ...)
                  dt26
                  dt17
                  dt18
                  dt19
                  dt21
                  dt22
                  dt23
                  dt25
                  a12 } in
            UPVSegd
              True
              vsegids4
              vsegids4
              upssegd
              upssegd
              ($wmkDist vsegids4 dt17 dt19 dt23) } in
        let {
          a12
          a12 =
            runSTRep
              (\ @ s s1 ->
                 let { Vector ipv32 ipv33 ipv34 ~ _ <- a11 `cast` ... } in
                 let { (# ipv35, ipv36 #) ~ _
                 <- newByteArray# (*# ipv33 8) (s1 `cast` ...)
                 } in
                 letrec {
                   $s$wa
                   $s$wa =
                     \ sc sc1 sc2 ->
                       case >=# sc1 ipv33 of _ {
                         False ->
                           let { __DEFAULT ~ wild12
                           <- indexIntArray# ipv34 (+# ipv32 sc1)
                           } in
                           $s$wa
                             ((writeIntArray# ipv36 sc2 wild12 (sc `cast` ...)) `cast` ...)
                             (+# sc1 1)
                             (+# sc2 1);
                         True -> (# sc, I# sc2 #)
                       }; } in
                 let { (# ipv37, ipv38 #) ~ _ <- $s$wa (ipv35 `cast` ...) 0 0 } in
                 let { I# dt27 ~ _ <- ipv38 } in
                 let { (# ipv39, ipv40 #) ~ _
                 <- unsafeFreezeByteArray# (ipv36 `cast` ...) ipv37
                 } in
                 let { (# ipv41, ipv42 #) ~ _ <- newByteArray# 8 ipv39 } in
                 let { (# ipv43, ipv44 #) ~ _
                 <- unsafeFreezeByteArray# ipv42 (writeIntArray# ipv42 0 0 ipv41)
                 } in
                 let { (# ipv45, ipv46 #) ~ _ <- newByteArray# 8 ipv43 } in
                 let { (# ipv47, ipv48 #) ~ _
                 <- unsafeFreezeByteArray# ipv46 (writeIntArray# ipv46 0 dt27 ipv45)
                 } in
                 let { (# ipv49, ipv50 #) ~ _
                 <- newArrayArray# 1 (ipv47 `cast` ...)
                 } in
                 let { __DEFAULT ~ s'#
                 <- writeByteArrayArray# ipv50 0 ipv40 ipv49
                 } in
                 let { (# ipv51, ipv52 #) ~ _
                 <- unsafeFreezeArrayArray# ipv50 s'#
                 } in
                 (# ipv51, Vectors 1 ipv44 ipv48 ipv52 #)) } in
        let {
          a13
          a13 = PInts a12 } in
        let {
          segd'
          segd' =
            let {
              $w$j
              $w$j =
                \ w3 ->
                  let { __DEFAULT ~ wild11 <- quotInt# w3 dt6 } in
                  let { __DEFAULT ~ wild12 <- remInt# w3 dt6 } in
                  let { DVector ipv32 ipv33 ipv34 ipv35 ipv36 ipv37 ~ nt6
                  <- (generateD
                        $dDT1
                        lvl15
                        wild
                        (\ i ->
                           let { I# x3 ~ _ <- i } in
                           let {
                             $j
                             $j =
                               \ dt26 ->
                                 let {
                                   $j1
                                   $j1 =
                                     \ y ->
                                       runSTRep
                                         (\ @ s s1 ->
                                            let { (# ipv32, ipv33 #) ~ _
                                            <- newByteArray# (*# dt26 8) (s1 `cast` ...)
                                            } in
                                            let {
                                              a14
                                              a14 = +# dt17 y } in
                                            let {
                                              a15
                                              a15 = +# dt3 y } in
                                            letrec {
                                              $s$wa
                                              $s$wa =
                                                \ sc sc1 sc2 ->
                                                  case >=# sc1 dt26 of _ {
                                                    False ->
                                                      let { __DEFAULT ~ wild15
                                                      <- indexIntArray# dt5 (+# a15 sc1)
                                                      } in
                                                      let { __DEFAULT ~ wild16
                                                      <- indexIntArray# dt19 (+# a14 sc1)
                                                      } in
                                                      $s$wa
                                                        ((writeIntArray#
                                                            ipv33
                                                            sc2
                                                            (+# wild15 wild16)
                                                            (sc `cast` ...))
                                                         `cast` ...)
                                                        (+# sc1 1)
                                                        (+# sc2 1);
                                                    True -> (# sc, I# sc2 #)
                                                  }; } in
                                            let { (# ipv34, ipv35 #) ~ _
                                            <- $s$wa (ipv32 `cast` ...) 0 0
                                            } in
                                            let { I# dt28 ~ _ <- ipv35 } in
                                            let { (# ipv36, ipv37 #) ~ _
                                            <- unsafeFreezeByteArray# ipv33 (ipv34 `cast` ...)
                                            } in
                                            (# ipv36 `cast` ...,
                                               (Vector 0 dt28 ipv37) `cast` ... #)) } in
                                 case <# x3 wild12 of _ {
                                   False -> $j1 (+# (*# wild11 x3) wild12);
                                   True -> $j1 (*# (+# wild11 1) x3)
                                 } } in
                           case <# x3 wild12 of _ {
                             False -> $j wild11;
                             True -> $j (+# wild11 1)
                           }))
                     `cast` ...
                  } in
                  let { Vector dt27 dt28 dt29 ~ _
                  <- (runSTRep
                        (\ @ s s1 ->
                           let { (di, n) ~ _
                           <- scanD
                                $fDTInt
                                lvl13
                                wild
                                $fNumInt_$c+
                                lvl7
                                ((DInt ipv32 ipv33 ipv34) `cast` ...)
                           } in
                           let { DInt ipv38 ipv39 ipv40 ~ nt7 <- di `cast` ... } in
                           let { I# ipv41 ~ n1 <- n } in
                           case >=# ipv41 0 of _ {
                             False -> case lvl11 ipv41 of wild15 { };
                             True ->
                               let { (# ipv42, ipv43 #) ~ _
                               <- newByteArray# (*# ipv41 8) (s1 `cast` ...)
                               } in
                               let {
                                 nt8
                                 nt8 = DProd (nt7 `cast` ...) (nt6 `cast` ...) } in
                               let { (# ipv44, ipv45 #) ~ _
                               <- ($wa1
                                     dt6
                                     ds1
                                     ds2
                                     (++
                                        $fShowComp2
                                        ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                     (WorkCopy n1)
                                     ((\ i s2 ->
                                         let { (# ipv44, ipv45 #) ~ _
                                         <- ((((myD lvl12 (nt8 `cast` ...)) `cast` ...) i)
                                             `cast` ...)
                                              s2
                                         } in
                                         let { (x, y) ~ _ <- ipv45 } in
                                         let { I# ipv46 ~ _ <- x } in
                                         let { Vector ipv47 ipv48 ipv49 ~ _ <- y `cast` ... } in
                                         (# copyByteArray#
                                              ipv49
                                              (*# ipv47 8)
                                              ipv43
                                              (*# ipv46 8)
                                              (*# ipv48 8)
                                              (ipv44 `cast` ...),
                                            () #)
                                         `cast` ...)
                                      `cast` ...)
                                     (ipv42 `cast` ...))
                                  `cast` ...
                               } in
                               let { (# ipv46, ipv47 #) ~ _
                               <- unsafeFreezeByteArray# ipv43 (ipv44 `cast` ...)
                               } in
                               (# ipv46 `cast` ..., (Vector 0 ipv41 ipv47) `cast` ... #)
                           }))
                     `cast` ...
                  } in
                  let {
                    $w$j1
                    $w$j1 =
                      \ w4 ->
                        let { __DEFAULT ~ wild13 <- quotInt# w4 dt6 } in
                        let { __DEFAULT ~ wild14 <- remInt# w4 dt6 } in
                        let { DVector ipv38 ipv39 ipv40 ipv41 ipv42 ipv43 ~ nt7
                        <- (generateD
                              $dDT1
                              lvl10
                              wild
                              (\ i ->
                                 let { I# x3 ~ _ <- i } in
                                 let {
                                   $j
                                   $j =
                                     \ dt30 ->
                                       let {
                                         $j1
                                         $j1 =
                                           \ y ->
                                             runSTRep
                                               (\ @ s s1 ->
                                                  let { (# ipv38, ipv39 #) ~ _
                                                  <- newByteArray# (*# dt30 8) (s1 `cast` ...)
                                                  } in
                                                  let {
                                                    a14
                                                    a14 = +# dt21 y } in
                                                  let {
                                                    a15
                                                    a15 = +# dt8 y } in
                                                  letrec {
                                                    $s$wa
                                                    $s$wa =
                                                      \ sc sc1 sc2 ->
                                                        case >=# sc1 dt30 of _ {
                                                          False ->
                                                            let { __DEFAULT ~ wild17
                                                            <- indexIntArray# dt10 (+# a15 sc1)
                                                            } in
                                                            let { __DEFAULT ~ wild18
                                                            <- indexIntArray# dt23 (+# a14 sc1)
                                                            } in
                                                            $s$wa
                                                              ((writeIntArray#
                                                                  ipv39
                                                                  sc2
                                                                  (+# wild17 wild18)
                                                                  (sc `cast` ...))
                                                               `cast` ...)
                                                              (+# sc1 1)
                                                              (+# sc2 1);
                                                          True -> (# sc, I# sc2 #)
                                                        }; } in
                                                  let { (# ipv40, ipv41 #) ~ _
                                                  <- $s$wa (ipv38 `cast` ...) 0 0
                                                  } in
                                                  let { I# dt32 ~ _ <- ipv41 } in
                                                  let { (# ipv42, ipv43 #) ~ _
                                                  <- unsafeFreezeByteArray# ipv39 (ipv40 `cast` ...)
                                                  } in
                                                  (# ipv42 `cast` ...,
                                                     (Vector 0 dt32 ipv43) `cast` ... #)) } in
                                       case <# x3 wild14 of _ {
                                         False -> $j1 (+# (*# wild13 x3) wild14);
                                         True -> $j1 (*# (+# wild13 1) x3)
                                       } } in
                                 case <# x3 wild14 of _ {
                                   False -> $j wild13;
                                   True -> $j (+# wild13 1)
                                 }))
                           `cast` ...
                        } in
                        let { Vector dt31 dt32 dt33 ~ _
                        <- (runSTRep
                              (\ @ s s1 ->
                                 let { (di, n) ~ _
                                 <- scanD
                                      $fDTInt
                                      lvl6
                                      wild
                                      $fNumInt_$c+
                                      lvl7
                                      ((DInt ipv38 ipv39 ipv40) `cast` ...)
                                 } in
                                 let { DInt ipv44 ipv45 ipv46 ~ nt8 <- di `cast` ... } in
                                 let { I# ipv47 ~ n1 <- n } in
                                 case >=# ipv47 0 of _ {
                                   False -> case lvl3 ipv47 of wild17 { };
                                   True ->
                                     let { (# ipv48, ipv49 #) ~ _
                                     <- newByteArray# (*# ipv47 8) (s1 `cast` ...)
                                     } in
                                     let {
                                       nt9
                                       nt9 = DProd (nt8 `cast` ...) (nt7 `cast` ...) } in
                                     let { (# ipv50, ipv51 #) ~ _
                                     <- ($wa1
                                           dt6
                                           ds1
                                           ds2
                                           (++
                                              $fShowComp2
                                              ($fShowComp_$cshowsPrec
                                                 $fShowComp7 (WJoinCopy n1) ([])))
                                           (WorkCopy n1)
                                           ((\ i s2 ->
                                               let { (# ipv50, ipv51 #) ~ _
                                               <- ((((myD lvl4 (nt9 `cast` ...)) `cast` ...) i)
                                                   `cast` ...)
                                                    s2
                                               } in
                                               let { (x, y) ~ _ <- ipv51 } in
                                               let { I# ipv52 ~ _ <- x } in
                                               let { Vector ipv53 ipv54 ipv55 ~ _
                                               <- y `cast` ...
                                               } in
                                               (# copyByteArray#
                                                    ipv55
                                                    (*# ipv53 8)
                                                    ipv49
                                                    (*# ipv52 8)
                                                    (*# ipv54 8)
                                                    (ipv50 `cast` ...),
                                                  () #)
                                               `cast` ...)
                                            `cast` ...)
                                           (ipv48 `cast` ...))
                                        `cast` ...
                                     } in
                                     let { (# ipv52, ipv53 #) ~ _
                                     <- unsafeFreezeByteArray# ipv49 (ipv50 `cast` ...)
                                     } in
                                     (# ipv52 `cast` ..., (Vector 0 ipv47 ipv53) `cast` ... #)
                                 }))
                           `cast` ...
                        } in
                        let {
                          dt34
                          dt34 = +# dt14 dt25 } in
                        (# dt27,
                           dt28,
                           dt29,
                           dt31,
                           dt32,
                           dt33,
                           dt34,
                           splitSegdOnElemsD
                             wild (USegd dt27 dt28 dt29 dt31 dt32 dt33 dt34) #) } in
                  case <=# dt9 dt22 of _ {
                    False -> $w$j1 dt22;
                    True -> $w$j1 dt9
                  } } in
            case <=# dt4 dt18 of _ {
              False ->
                let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                <- $w$j dt18
                } in
                UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8;
              True ->
                let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                <- $w$j dt4
                } in
                UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8
            } } in
        let {
          a14
          a14 =
            let { Vectors ipv32 ipv33 ipv34 ipv35 ~ _
            <- runSTRep
                 (\ @ s s1 ->
                    let { Vector ipv32 ipv33 ipv34 ~ _ <- arr `cast` ... } in
                    let { DVector ipv35 ipv36 ipv37 ipv38 ipv39 ipv40 ~ nt7
                    <- (imapD'
                          foldSegsWithP1
                          $dDT1
                          lvl171
                          wild
                          (\ _ x ->
                             let { (x3, y) ~ _ <- x } in
                             let { (x4, y1) ~ _ <- x3 } in
                             let { USegd dt26 dt27 dt28 dt29 dt30 dt31 dt32 ~ _ <- x4 } in
                             let { I# ipv35 ~ _ <- y1 } in
                             let { I# ipv36 ~ _ <- y } in
                             runSTRep
                               (\ @ s2 s3 ->
                                  let { (# ipv37, ipv38 #) ~ _
                                  <- newByteArray# (*# dt32 8) (s3 `cast` ...)
                                  } in
                                  let {
                                    a15
                                    a15 = +# ipv32 ipv35 } in
                                  letrec {
                                    $s$wa
                                    $s$wa =
                                      \ sc sc1 sc2 sc3 sc4 sc5 ->
                                        case sc1 of _ {
                                          __DEFAULT -> (# sc5, I# sc #);
                                          0 ->
                                            case >=# sc3 dt27 of _ {
                                              False ->
                                                let { I# ww1 ~ _ <- sc4 } in
                                                case ww1 of ds7 {
                                                  __DEFAULT ->
                                                    let { __DEFAULT ~ wild15
                                                    <- indexIntArray# ipv34 (+# a15 sc3)
                                                    } in
                                                    $s$wa1
                                                      (+# sc 1)
                                                      (-# ds7 1)
                                                      wild15
                                                      sc2
                                                      (+# sc3 1)
                                                      ((writeIntArray#
                                                          ipv38 sc wild15 (sc5 `cast` ...))
                                                       `cast` ...);
                                                  0 ->
                                                    case >=# sc2 dt27 of _ {
                                                      False ->
                                                        $s$wa
                                                          sc
                                                          0
                                                          (+# sc2 1)
                                                          (+# sc3 1)
                                                          (let { __DEFAULT ~ wild16
                                                           <- indexIntArray# dt28 (+# dt26 sc2)
                                                           } in
                                                           I# wild16)
                                                          sc5;
                                                      True -> (# sc5, I# sc #)
                                                    }
                                                };
                                              True -> (# sc5, I# sc #)
                                            }
                                        };
                                    $s$wa1
                                    $s$wa1 =
                                      \ sc sc1 sc2 sc3 sc4 sc5 ->
                                        case sc1 of ds6 {
                                          __DEFAULT ->
                                            $s$wa1
                                              (+# sc 1)
                                              (-# ds6 1)
                                              sc2
                                              sc3
                                              sc4
                                              ((writeIntArray# ipv38 sc sc2 (sc5 `cast` ...))
                                               `cast` ...);
                                          0 ->
                                            case >=# sc3 dt27 of _ {
                                              False ->
                                                $s$wa
                                                  sc
                                                  0
                                                  (+# sc3 1)
                                                  sc4
                                                  (let { __DEFAULT ~ wild15
                                                   <- indexIntArray# dt28 (+# dt26 sc3)
                                                   } in
                                                   I# wild15)
                                                  sc5;
                                              True -> (# sc5, I# sc #)
                                            }
                                        }; } in
                                  case >=# 0 dt27 of _ {
                                    False ->
                                      let { (# ipv39, ipv40 #) ~ _
                                      <- $s$wa
                                           0
                                           0
                                           1
                                           0
                                           (let { __DEFAULT ~ wild15
                                            <- indexIntArray# dt28 dt26
                                            } in
                                            I# wild15)
                                           (ipv37 `cast` ...)
                                      } in
                                      let { I# dt34 ~ _ <- ipv40 } in
                                      let { (# ipv41, ipv42 #) ~ _
                                      <- unsafeFreezeByteArray# ipv38 (ipv39 `cast` ...)
                                      } in
                                      (# ipv41 `cast` ..., (Vector 0 dt34 ipv42) `cast` ... #);
                                    True ->
                                      let { (# ipv39, ipv40 #) ~ _
                                      <- unsafeFreezeByteArray# ipv38 ipv37
                                      } in
                                      (# ipv39 `cast` ..., (Vector 0 0 ipv40) `cast` ... #)
                                  }))
                          (splitSegdOnElemsD wild (USegd dt3 dt4 dt5 dt8 dt9 dt10 dt14)))
                       `cast` ...
                    } in
                    let { Vector ipv41 ipv42 ipv43 ~ _
                    <- (runSTRep
                          (\ @ s2 s3 ->
                             let { (di, n) ~ _
                             <- scanD
                                  $fDTInt
                                  lvl170
                                  wild
                                  $fNumInt_$c+
                                  lvl7
                                  ((DInt ipv35 ipv36 ipv37) `cast` ...)
                             } in
                             let { DInt ipv41 ipv42 ipv43 ~ nt8 <- di `cast` ... } in
                             let { I# ipv44 ~ n1 <- n } in
                             case >=# ipv44 0 of _ {
                               False -> case lvl168 ipv44 of wild13 { };
                               True ->
                                 let { (# ipv45, ipv46 #) ~ _
                                 <- newByteArray# (*# ipv44 8) (s3 `cast` ...)
                                 } in
                                 let {
                                   nt9
                                   nt9 = DProd (nt8 `cast` ...) (nt7 `cast` ...) } in
                                 let { (# ipv47, ipv48 #) ~ _
                                 <- ($wa1
                                       dt6
                                       ds1
                                       ds2
                                       (++
                                          $fShowComp2
                                          ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                       (WorkCopy n1)
                                       ((\ i s4 ->
                                           let { (# ipv47, ipv48 #) ~ _
                                           <- ((((myD lvl169 (nt9 `cast` ...)) `cast` ...) i)
                                               `cast` ...)
                                                s4
                                           } in
                                           let { (x, y) ~ _ <- ipv48 } in
                                           let { I# ipv49 ~ _ <- x } in
                                           let { Vector ipv50 ipv51 ipv52 ~ _ <- y `cast` ... } in
                                           (# copyByteArray#
                                                ipv52
                                                (*# ipv50 8)
                                                ipv46
                                                (*# ipv49 8)
                                                (*# ipv51 8)
                                                (ipv47 `cast` ...),
                                              () #)
                                           `cast` ...)
                                        `cast` ...)
                                       (ipv45 `cast` ...))
                                    `cast` ...
                                 } in
                                 let { (# ipv49, ipv50 #) ~ _
                                 <- unsafeFreezeByteArray# ipv46 (ipv47 `cast` ...)
                                 } in
                                 (# ipv49 `cast` ..., (Vector 0 ipv44 ipv50) `cast` ... #)
                             }))
                       `cast` ...
                    } in
                    let { (# ipv44, ipv45 #) ~ _
                    <- newByteArray# (*# ipv42 8) (s1 `cast` ...)
                    } in
                    letrec {
                      $s$wa
                      $s$wa =
                        \ sc sc1 sc2 ->
                          case >=# sc1 ipv42 of _ {
                            False ->
                              let { __DEFAULT ~ wild12
                              <- indexIntArray# ipv43 (+# ipv41 sc1)
                              } in
                              $s$wa
                                ((writeIntArray# ipv45 sc2 wild12 (sc `cast` ...)) `cast` ...)
                                (+# sc1 1)
                                (+# sc2 1);
                            True -> (# sc, I# sc2 #)
                          }; } in
                    let { (# ipv46, ipv47 #) ~ _ <- $s$wa (ipv44 `cast` ...) 0 0 } in
                    let { I# dt27 ~ _ <- ipv47 } in
                    let { (# ipv48, ipv49 #) ~ _
                    <- unsafeFreezeByteArray# (ipv45 `cast` ...) ipv46
                    } in
                    let { (# ipv50, ipv51 #) ~ _ <- newByteArray# 8 ipv48 } in
                    let { (# ipv52, ipv53 #) ~ _
                    <- unsafeFreezeByteArray# ipv51 (writeIntArray# ipv51 0 0 ipv50)
                    } in
                    let { (# ipv54, ipv55 #) ~ _ <- newByteArray# 8 ipv52 } in
                    let { (# ipv56, ipv57 #) ~ _
                    <- unsafeFreezeByteArray# ipv55 (writeIntArray# ipv55 0 dt27 ipv54)
                    } in
                    let { (# ipv58, ipv59 #) ~ _
                    <- newArrayArray# 1 (ipv56 `cast` ...)
                    } in
                    let { __DEFAULT ~ s'#
                    <- writeByteArrayArray# ipv59 0 ipv49 ipv58
                    } in
                    let { (# ipv60, ipv61 #) ~ _
                    <- unsafeFreezeArrayArray# ipv59 s'#
                    } in
                    (# ipv60, Vectors 1 ipv53 ipv57 ipv61 #))
            } in
            let { UPVSegd ipv36 ipv37 ipv38 ipv39 ipv40 ipv41 ~ _ <- ipv31 } in
            let { Vectors ipv42 ipv43 ipv44 ipv45 ~ _ <- a12 } in
            let { UPSegd dt26 dt27 dt28 dt29 dt30 dt31 dt32 ds5 ~ _
            <- segd'
            } in
            let { DVector ipv46 ipv47 ipv48 ipv49 ipv50 ipv51 ~ nt6
            <- (imapD'
                  lvl20
                  $dDT1
                  lvl22
                  wild
                  (\ _ x ->
                     let { (x3, y) ~ _ <- x } in
                     let { (x4, y1) ~ _ <- x3 } in
                     let { USegd dt33 dt34 dt35 dt36 dt37 dt38 dt39 ~ _ <- x4 } in
                     let { I# ipv46 ~ _ <- y1 } in
                     let { I# ipv47 ~ _ <- y } in
                     let { UPSSegd dt40 dt41 dt42 dt43 dt44 dt45 dt46 dt47 dt48 dt49
                                   ds6 ~ _
                     <- ipv39
                     } in
                     let { Vector ipv48 ipv49 ipv50 ~ _ <- dt42 `cast` ... } in
                     let { Vector ipv51 ipv52 ipv53 ~ _ <- dt41 `cast` ... } in
                     let { Vector ipv54 ipv55 ipv56 ~ _ <- dt15 `cast` ... } in
                     let { Vector ipv57 ipv58 ipv59 ~ _ <- ipv37 `cast` ... } in
                     let { Vector ipv60 ipv61 ipv62 ~ _ <- vsegids3 `cast` ... } in
                     runSTRep
                       (\ @ s s1 ->
                          let { (# ipv63, ipv64 #) ~ _
                          <- newByteArray# (*# dt39 8) (s1 `cast` ...)
                          } in
                          letrec {
                            $s$wa
                            $s$wa =
                              \ sc sc1 sc2 sc3 sc4 sc5 sc6 sc7 sc8 ->
                                case sc3 of ds10 {
                                  __DEFAULT ->
                                    case sc7 of ds11 {
                                      __DEFAULT ->
                                        case sc4 of wild16 {
                                          __DEFAULT ->
                                            let { __DEFAULT ~ wild17
                                            <- indexIntArray# ipv43 sc1
                                            } in
                                            let { __DEFAULT ~ wild18
                                            <- indexByteArrayArray# ipv45 sc1
                                            } in
                                            let { __DEFAULT ~ wild19
                                            <- indexIntArray# wild18 (+# wild17 (+# sc2 sc5))
                                            } in
                                            $s$wa
                                              ((writeIntArray# ipv64 sc8 wild19 (sc `cast` ...))
                                               `cast` ...)
                                              sc1
                                              sc2
                                              (-# ds10 1)
                                              (-# wild16 1)
                                              (+# sc5 1)
                                              sc6
                                              ds11
                                              (+# sc8 1);
                                          0 ->
                                            let {
                                              i1
                                              i1 = +# sc6 1 } in
                                            let { __DEFAULT ~ wild17
                                            <- indexIntArray# ipv62 (+# ipv60 i1)
                                            } in
                                            let { __DEFAULT ~ wild18
                                            <- indexIntArray# ipv56 (+# ipv54 wild17)
                                            } in
                                            let { __DEFAULT ~ wild19
                                            <- indexIntArray# dt10 (+# dt8 wild17)
                                            } in
                                            let { __DEFAULT ~ wild20
                                            <- indexIntArray# dt5 (+# dt3 wild17)
                                            } in
                                            $s$wa sc wild18 wild19 ds10 wild20 0 i1 0 sc8
                                        };
                                      0 ->
                                        case sc4 of wild16 {
                                          __DEFAULT ->
                                            let { __DEFAULT ~ wild17
                                            <- indexIntArray# ipv33 sc1
                                            } in
                                            let { __DEFAULT ~ wild18
                                            <- indexByteArrayArray# ipv35 sc1
                                            } in
                                            let { __DEFAULT ~ wild19
                                            <- indexIntArray# wild18 (+# wild17 (+# sc2 sc5))
                                            } in
                                            $s$wa
                                              ((writeIntArray# ipv64 sc8 wild19 (sc `cast` ...))
                                               `cast` ...)
                                              sc1
                                              sc2
                                              (-# ds10 1)
                                              (-# wild16 1)
                                              (+# sc5 1)
                                              sc6
                                              0
                                              (+# sc8 1);
                                          0 ->
                                            let { __DEFAULT ~ wild17
                                            <- indexIntArray# ipv59 (+# ipv57 sc6)
                                            } in
                                            let { __DEFAULT ~ wild18
                                            <- indexIntArray# ipv50 (+# ipv48 wild17)
                                            } in
                                            let { __DEFAULT ~ wild19
                                            <- indexIntArray# ipv53 (+# ipv51 wild17)
                                            } in
                                            let { __DEFAULT ~ wild20
                                            <- indexIntArray# dt45 (+# dt43 wild17)
                                            } in
                                            $s$wa sc wild18 wild19 ds10 wild20 0 sc6 1 sc8
                                        }
                                    };
                                  0 -> (# sc, I# sc8 #)
                                }; } in
                          case dt39 of wild16 {
                            __DEFAULT ->
                              let { __DEFAULT ~ wild17
                              <- indexIntArray# ipv62 (+# ipv60 ipv46)
                              } in
                              let { __DEFAULT ~ wild18 <- indexIntArray# dt5 (+# dt3 wild17) } in
                              case <# ipv47 wild18 of _ {
                                False ->
                                  let { __DEFAULT ~ wild20
                                  <- indexIntArray# ipv59 (+# ipv57 ipv46)
                                  } in
                                  let { __DEFAULT ~ wild21
                                  <- indexIntArray# ipv50 (+# ipv48 wild20)
                                  } in
                                  let { __DEFAULT ~ wild22
                                  <- indexIntArray# ipv53 (+# ipv51 wild20)
                                  } in
                                  let {
                                    i1
                                    i1 = -# ipv47 wild18 } in
                                  let { __DEFAULT ~ wild23
                                  <- indexIntArray# dt45 (+# dt43 wild20)
                                  } in
                                  let { (# ipv65, ipv66 #) ~ _
                                  <- $s$wa
                                       (ipv63 `cast` ...)
                                       wild21
                                       wild22
                                       wild16
                                       (-# wild23 i1)
                                       i1
                                       ipv46
                                       1
                                       0
                                  } in
                                  let { I# dt51 ~ _ <- ipv66 } in
                                  let { (# ipv67, ipv68 #) ~ _
                                  <- unsafeFreezeByteArray# ipv64 (ipv65 `cast` ...)
                                  } in
                                  (# ipv67 `cast` ..., (Vector 0 dt51 ipv68) `cast` ... #);
                                True ->
                                  let { __DEFAULT ~ wild20
                                  <- indexIntArray# ipv56 (+# ipv54 wild17)
                                  } in
                                  let { __DEFAULT ~ wild21
                                  <- indexIntArray# dt10 (+# dt8 wild17)
                                  } in
                                  let { (# ipv65, ipv66 #) ~ _
                                  <- $s$wa
                                       (ipv63 `cast` ...)
                                       wild20
                                       wild21
                                       wild16
                                       (-# wild18 ipv47)
                                       ipv47
                                       ipv46
                                       0
                                       0
                                  } in
                                  let { I# dt51 ~ _ <- ipv66 } in
                                  let { (# ipv67, ipv68 #) ~ _
                                  <- unsafeFreezeByteArray# ipv64 (ipv65 `cast` ...)
                                  } in
                                  (# ipv67 `cast` ..., (Vector 0 dt51 ipv68) `cast` ... #)
                              };
                            0 ->
                              let { (# ipv65, ipv66 #) ~ _
                              <- $s$wa (ipv63 `cast` ...) 0 0 0 0 0 0 0 0
                              } in
                              let { I# dt51 ~ _ <- ipv66 } in
                              let { (# ipv67, ipv68 #) ~ _
                              <- unsafeFreezeByteArray# ipv64 (ipv65 `cast` ...)
                              } in
                              (# ipv67 `cast` ..., (Vector 0 dt51 ipv68) `cast` ... #)
                          }))
                  ds5)
               `cast` ...
            } in
            runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl18
                      wild
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv46 ipv47 ipv48) `cast` ...)
                 } in
                 let { DInt ipv52 ipv53 ipv54 ~ nt7 <- di `cast` ... } in
                 let { I# ipv55 ~ n1 <- n } in
                 case >=# ipv55 0 of _ {
                   False -> case lvl16 ipv55 of wild14 { };
                   True ->
                     let { (# ipv56, ipv57 #) ~ _
                     <- newByteArray# (*# ipv55 8) (s1 `cast` ...)
                     } in
                     let {
                       nt8
                       nt8 = DProd (nt7 `cast` ...) (nt6 `cast` ...) } in
                     let { (# ipv58, ipv59 #) ~ _
                     <- ($wa1
                           dt6
                           ds1
                           ds2
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv58, ipv59 #) ~ _
                               <- ((((myD lvl17 (nt8 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv59 } in
                               let { I# ipv60 ~ _ <- x } in
                               let { Vector ipv61 ipv62 ipv63 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv63
                                    (*# ipv61 8)
                                    ipv57
                                    (*# ipv60 8)
                                    (*# ipv62 8)
                                    (ipv58 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv56 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv60, ipv61 #) ~ _
                     <- unsafeFreezeByteArray# ipv57 (ipv58 `cast` ...)
                     } in
                     (# ipv60 `cast` ..., (Vector 0 ipv55 ipv61) `cast` ... #)
                 }) } in
        let {
          a15
          a15 = PInt a14 } in
        let {
          ipv32
          ipv32 =
            let {
              upssegd
              upssegd =
                let { UPSegd dt26 dt27 dt28 dt29 dt30 dt31 dt32 ds5 ~ _
                <- segd'
                } in
                let {
                  dt33
                  dt33 =
                    runSTRep
                      (\ @ s s1 ->
                         let {
                           $j
                           $j =
                             \ x ->
                               let { (# ipv33, ipv34 #) ~ _
                               <- newByteArray# (*# x 8) (s1 `cast` ...)
                               } in
                               letrec {
                                 $s$wa
                                 $s$wa =
                                   \ sc sc1 sc2 ->
                                     case <=# sc1 0 of _ {
                                       False ->
                                         $s$wa
                                           ((writeIntArray# ipv34 sc2 0 (sc `cast` ...)) `cast` ...)
                                           (-# sc1 1)
                                           (+# sc2 1);
                                       True -> (# sc, I# sc2 #)
                                     }; } in
                               let { (# ipv35, ipv36 #) ~ _
                               <- $s$wa (ipv33 `cast` ...) dt27 0
                               } in
                               let { I# dt35 ~ _ <- ipv36 } in
                               let { (# ipv37, ipv38 #) ~ _
                               <- unsafeFreezeByteArray# ipv34 (ipv35 `cast` ...)
                               } in
                               (# ipv37 `cast` ..., (Vector 0 dt35 ipv38) `cast` ... #) } in
                         case <=# dt27 0 of _ {
                           False -> $j dt27;
                           True -> $j 0
                         }) } in
                let {
                  a16
                  a16 = Vector dt29 dt30 dt31 } in
                UPSSegd
                  True
                  (a16 `cast` ...)
                  dt33
                  dt26
                  dt27
                  dt28
                  dt29
                  dt30
                  dt31
                  dt32
                  (splitSSegdOnElemsD
                     wild
                     (USSegd
                        True
                        (a16 `cast` ...)
                        dt33
                        dt26
                        dt27
                        dt28
                        dt29
                        dt30
                        dt31
                        dt32)) } in
            let {
              vsegids4
              vsegids4 =
                let { UPSSegd dt26 dt27 dt28 dt29 dt30 dt31 dt32 dt33 dt34 dt35
                              ds5 ~ _
                <- upssegd
                } in
                runSTRep
                  (\ @ s s1 ->
                     let {
                       a16
                       a16 = -# dt30 1 } in
                     let {
                       $j
                       $j =
                         \ x ->
                           let { (# ipv33, ipv34 #) ~ _
                           <- newByteArray# (*# x 8) (s1 `cast` ...)
                           } in
                           letrec {
                             $s$wa
                             $s$wa =
                               \ sc sc1 sc2 ->
                                 case <=# sc1 a16 of _ {
                                   False -> (# sc, I# sc2 #);
                                   True ->
                                     $s$wa
                                       ((writeIntArray# ipv34 sc2 sc1 (sc `cast` ...)) `cast` ...)
                                       (+# sc1 1)
                                       (+# sc2 1)
                                 }; } in
                           let { (# ipv35, ipv36 #) ~ _ <- $s$wa (ipv33 `cast` ...) 0 0 } in
                           let { I# dt37 ~ _ <- ipv36 } in
                           let { (# ipv37, ipv38 #) ~ _
                           <- unsafeFreezeByteArray# ipv34 (ipv35 `cast` ...)
                           } in
                           (# ipv37 `cast` ..., (Vector 0 dt37 ipv38) `cast` ... #) } in
                     case ># 0 a16 of _ {
                       False ->
                         let {
                           a17
                           a17 = +# a16 1 } in
                         case ># a17 0 of _ {
                           False -> case lvl27 of wild14 { };
                           True -> $j a17
                         };
                       True -> $j 0
                     }) } in
            UPVSegd
              True
              vsegids4
              vsegids4
              upssegd
              upssegd
              (mkDist vsegids4 upssegd) } in
        let {
          a16
          a16 =
            runSTRep
              (\ @ s s1 ->
                 let { Vector ipv33 ipv34 ipv35 ~ nt6 <- a14 `cast` ... } in
                 let {
                   n
                   n = I# ipv34 } in
                 let {
                   a28
                   a28 =
                     \ eta ->
                       let { I# x ~ wild11 <- eta } in
                       case >=# x ipv34 of _ {
                         False ->
                           Yield
                             (let { __DEFAULT ~ wild13 <- indexIntArray# ipv35 (+# ipv33 x) } in
                              I# wild13)
                             (I# (+# x 1));
                         True -> Done
                       } } in
                 let {
                   step
                   step = a28 `cast` ... } in
                 let {
                   ipv36
                   ipv36 = I# 0 } in
                 let {
                   p
                   p =
                     \ @ s2 ->
                       (\ eta ->
                          let {
                            $dPrimMonad
                            $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                          let {
                            a17
                            a17 =
                              \ n1 s3 ->
                                let {
                                  a18
                                  a18 = I# 0 } in
                                let { (# ipv37, ipv38 #) ~ _
                                <- ((\ s4 ->
                                       let { I# x ~ _ <- n1 } in
                                       let { (# ipv37, ipv38 #) ~ _
                                       <- ((\ s# ->
                                              let { (# ipv37, ipv38 #) ~ _
                                              <- newByteArray# (*# x 8) s#
                                              } in
                                              (# ipv37, MutableByteArray ipv38 #))
                                           `cast` ...)
                                            s4
                                       } in
                                       (# ipv37,
                                          let { MutableByteArray dt27 ~ _ <- ipv38 } in
                                          MVector 0 x dt27 #))
                                    `cast` ...)
                                     s3
                                } in
                                letrec {
                                  foldlM'_loop
                                  foldlM'_loop =
                                    \ sPEC z1 s4 ->
                                      (\ eta1 ->
                                         let { __DEFAULT ~ _ <- sPEC } in
                                         let { I# ipv39 ~ z2 <- z1 } in
                                         ((\ s5 ->
                                             let { I# x ~ _ <- s4 } in
                                             let {
                                               $j
                                               $j =
                                                 \ x3 s' ->
                                                   let { MVector dt26 dt27 dt28 ~ _
                                                   <- ipv38 `cast` ...
                                                   } in
                                                   ((foldlM'_loop SPEC (I# (+# ipv39 1)) s')
                                                    `cast` ...)
                                                     (let { I# x# ~ _ <- x3 } in
                                                      (writeIntArray#
                                                         dt28 (+# dt26 ipv39) x# (s5 `cast` ...))
                                                      `cast` ...) } in
                                             case >=# x ipv34 of _ {
                                               False ->
                                                 let {
                                                   x3
                                                   x3 =
                                                     let { __DEFAULT ~ wild13
                                                     <- indexIntArray# ipv35 (+# ipv33 x)
                                                     } in
                                                     I# wild13 } in
                                                 let {
                                                   a19
                                                   a19 = +# x 1 } in
                                                 let {
                                                   s'
                                                   s' = I# a19 } in
                                                 let { MVector dt26 dt27 dt28 ~ _
                                                 <- ipv38 `cast` ...
                                                 } in
                                                 ((foldlM'_loop SPEC (I# (+# ipv39 1)) s')
                                                  `cast` ...)
                                                   (let { I# x# ~ _ <- x3 } in
                                                    (writeIntArray#
                                                       dt28 (+# dt26 ipv39) x# (s5 `cast` ...))
                                                    `cast` ...);
                                               True -> (# s5, z2 #)
                                             })
                                          `cast` ...)
                                           eta1)
                                      `cast` ...; } in
                                let { (# ipv39, ipv40 #) ~ _
                                <- ((foldlM'_loop SPEC (I# 0) ipv36) `cast` ...) ipv37
                                } in
                                (# ipv39,
                                   let { MVector dt26 dt27 dt28 ~ _ <- ipv38 `cast` ... } in
                                   let { I# dt30 ~ _ <- ipv40 } in
                                   (MVector dt26 dt30 dt28) `cast` ... #) } in
                          ((a17 n) `cast` ...) eta)
                       `cast` ... } in
                 let { (# ipv37, ipv38 #) ~ _ <- ((p) `cast` ...) s1 } in
                 let { MVector dt26 dt27 dt28 ~ _ <- ipv38 } in
                 let { (# ipv39, ipv40 #) ~ _
                 <- unsafeFreezeByteArray# (dt28 `cast` ...) (ipv37 `cast` ...)
                 } in
                 let { (# ipv41, ipv42 #) ~ _ <- newByteArray# 8 ipv39 } in
                 let { (# ipv43, ipv44 #) ~ _
                 <- unsafeFreezeByteArray# ipv42 (writeIntArray# ipv42 0 dt26 ipv41)
                 } in
                 let { (# ipv45, ipv46 #) ~ _ <- newByteArray# 8 ipv43 } in
                 let { (# ipv47, ipv48 #) ~ _
                 <- unsafeFreezeByteArray# ipv46 (writeIntArray# ipv46 0 dt27 ipv45)
                 } in
                 let { (# ipv49, ipv50 #) ~ _
                 <- newArrayArray# 1 (ipv47 `cast` ...)
                 } in
                 let { __DEFAULT ~ s'#
                 <- writeByteArrayArray# ipv50 0 ipv40 ipv49
                 } in
                 let { (# ipv51, ipv52 #) ~ _
                 <- unsafeFreezeArrayArray# ipv50 s'#
                 } in
                 (# ipv51, Vectors 1 ipv44 ipv48 ipv52 #)) } in
        let {
          a17
          a17 = PInts a16 } in
        let {
          nt6
          nt6 = PNested ipv32 (a17 `cast` ...) segd' (a15 `cast` ...) } in
        let { DVector ipv33 ipv34 ipv35 ipv36 ipv37 ipv38 ~ nt7
        <- (imapD'
              $fDTInt $dDT1 lvl141 wild lvl142 (splitLenD wild (I# wild2)))
           `cast` ...
        } in
        let { Vector dt27 dt28 dt29 ~ _
        <- (runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl140
                      wild
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv33 ipv34 ipv35) `cast` ...)
                 } in
                 let { DInt ipv39 ipv40 ipv41 ~ nt8 <- di `cast` ... } in
                 let { I# ipv42 ~ n1 <- n } in
                 case >=# ipv42 0 of _ {
                   False -> case lvl138 ipv42 of wild13 { };
                   True ->
                     let { (# ipv43, ipv44 #) ~ _
                     <- newByteArray# (*# ipv42 8) (s1 `cast` ...)
                     } in
                     let {
                       nt9
                       nt9 = DProd (nt8 `cast` ...) (nt7 `cast` ...) } in
                     let { (# ipv45, ipv46 #) ~ _
                     <- ($wa1
                           dt6
                           ds1
                           ds2
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv45, ipv46 #) ~ _
                               <- ((((myD lvl139 (nt9 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv46 } in
                               let { I# ipv47 ~ _ <- x } in
                               let { Vector ipv48 ipv49 ipv50 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv50
                                    (*# ipv48 8)
                                    ipv44
                                    (*# ipv47 8)
                                    (*# ipv49 8)
                                    (ipv45 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv43 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv47, ipv48 #) ~ _
                     <- unsafeFreezeByteArray# ipv44 (ipv45 `cast` ...)
                     } in
                     (# ipv47 `cast` ..., (Vector 0 ipv42 ipv48) `cast` ... #)
                 }))
           `cast` ...
        } in
        let { __DEFAULT ~ wild11 <- quotInt# dt28 dt6 } in
        let { __DEFAULT ~ wild12 <- remInt# dt28 dt6 } in
        let { DProd dx2 dy2 ~ _
        <- (generateD
              lvl135
              lvl137
              wild
              (\ i ->
                 let {
                   ys
                   ys =
                     let { I# x3 ~ _ <- i } in
                     let {
                       $j
                       $j =
                         \ y ->
                           let {
                             $j1
                             $j1 =
                               \ dt30 ->
                                 runSTRep
                                   (\ @ s s1 ->
                                      let { (# ipv39, ipv40 #) ~ _
                                      <- newByteArray# (*# (+# 1 dt30) 8) (s1 `cast` ...)
                                      } in
                                      let {
                                        a18
                                        a18 = +# dt27 y } in
                                      letrec {
                                        $s$wa
                                        $s$wa =
                                          \ sc sc1 sc2 sc3 ->
                                            case >=# sc1 dt30 of _ {
                                              False ->
                                                let { __DEFAULT ~ wild15
                                                <- indexIntArray# dt29 (+# a18 sc1)
                                                } in
                                                let {
                                                  x#
                                                  x# = +# sc2 wild15 } in
                                                $s$wa
                                                  (+# sc 1)
                                                  (+# sc1 1)
                                                  x#
                                                  ((writeIntArray# ipv40 sc x# (sc3 `cast` ...))
                                                   `cast` ...);
                                              True -> (# sc3, I# sc #)
                                            }; } in
                                      let { (# ipv41, ipv42 #) ~ _
                                      <- $s$wa 1 0 0 ((writeIntArray# ipv40 0 0 ipv39) `cast` ...)
                                      } in
                                      let { I# dt32 ~ _ <- ipv42 } in
                                      let { (# ipv43, ipv44 #) ~ _
                                      <- unsafeFreezeByteArray# ipv40 (ipv41 `cast` ...)
                                      } in
                                      (# ipv43 `cast` ..., (Vector 0 dt32 ipv44) `cast` ... #)) } in
                           case <# x3 wild12 of _ {
                             False -> $j1 wild11;
                             True -> $j1 (+# wild11 1)
                           } } in
                     case <# x3 wild12 of _ {
                       False -> $j (+# (*# wild11 x3) wild12);
                       True -> $j (*# (+# wild11 1) x3)
                     } } in
                 (let { Vector dt30 dt31 dt32 ~ _ <- ys `cast` ... } in
                  (Vector dt30 (-# dt31 1) dt32) `cast` ...,
                  let { Vector dt30 dt31 dt32 ~ _ <- ys `cast` ... } in
                  let { __DEFAULT ~ wild14
                  <- indexIntArray# dt32 (+# dt30 (-# dt31 1))
                  } in
                  I# wild14)))
           `cast` ...
        } in
        let { (x3, ds5) ~ _
        <- scanD $fDTInt lvl134 wild $fNumInt_$c+ lvl7 dy2
        } in
        let { DInt ipv39 ipv40 ipv41 ~ nt8 <- x3 `cast` ... } in
        let { DVector ipv42 ipv43 ipv44 ipv45 ipv46 ipv47 ~ nt9
        <- (imapD'
              lvl132
              $dDT3
              lvl133
              wild
              lvl60
              ((DProd (nt8 `cast` ...) dx2) `cast` ...))
           `cast` ...
        } in
        let { Vector dt31 dt32 dt33 ~ dt30
        <- (runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl131
                      wild
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv42 ipv43 ipv44) `cast` ...)
                 } in
                 let { DInt ipv48 ipv49 ipv50 ~ nt10 <- di `cast` ... } in
                 let { I# ipv51 ~ n1 <- n } in
                 case >=# ipv51 0 of _ {
                   False -> case lvl129 ipv51 of wild17 { };
                   True ->
                     let { (# ipv52, ipv53 #) ~ _
                     <- newByteArray# (*# ipv51 8) (s1 `cast` ...)
                     } in
                     let {
                       nt11
                       nt11 = DProd (nt10 `cast` ...) (nt9 `cast` ...) } in
                     let { (# ipv54, ipv55 #) ~ _
                     <- ($wa1
                           dt6
                           ds1
                           ds2
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv54, ipv55 #) ~ _
                               <- ((((myD lvl130 (nt11 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv55 } in
                               let { I# ipv56 ~ _ <- x } in
                               let { Vector ipv57 ipv58 ipv59 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv59
                                    (*# ipv57 8)
                                    ipv53
                                    (*# ipv56 8)
                                    (*# ipv58 8)
                                    (ipv54 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv52 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv56, ipv57 #) ~ _
                     <- unsafeFreezeByteArray# ipv53 (ipv54 `cast` ...)
                     } in
                     (# ipv56 `cast` ..., (Vector 0 ipv51 ipv57) `cast` ... #)
                 }))
           `cast` ...
        } in
        let { I# dt35 ~ _
        <- foldD
             $fDTInt
             lvl126
             wild
             $fNumInt_$c+
             (generateD
                $fDTInt
                lvl128
                wild
                ((\ i ->
                    let { I# x4 ~ _ <- i } in
                    let {
                      $w$j
                      $w$j =
                        \ w3 ->
                          let {
                            $w$j1
                            $w$j1 =
                              \ w4 ->
                                let {
                                  a18
                                  a18 = +# dt27 w3 } in
                                letrec {
                                  $s$wfoldlM'_loop
                                  $s$wfoldlM'_loop =
                                    \ sc sc1 ->
                                      case >=# sc w4 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild17
                                          <- indexIntArray# dt29 (+# a18 sc)
                                          } in
                                          $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild17);
                                        True -> sc1
                                      }; } in
                                $s$wfoldlM'_loop 0 0 } in
                          case <# x4 wild12 of _ {
                            False -> $w$j1 wild11;
                            True -> $w$j1 (+# wild11 1)
                          } } in
                    case <# x4 wild12 of _ {
                      False ->
                        let { __DEFAULT ~ ww <- $w$j (+# (*# wild11 x4) wild12) } in
                        (I# ww) `cast` ...;
                      True ->
                        let { __DEFAULT ~ ww <- $w$j (*# (+# wild11 1) x4) } in
                        (I# ww) `cast` ...
                    })
                 `cast` ...))
        } in
        let { PNested vsegd xs segd flat ~ _ <- w2 `cast` ... } in
        let {
          ipv48
          ipv48 =
            splitSegdOnElemsD
              wild (USegd dt27 dt28 dt29 dt31 dt32 dt33 dt35) } in
        let {
          segd1
          segd1 = UPSegd dt27 dt28 dt29 dt31 dt32 dt33 dt35 ipv48 } in
        let {
          vsegids4
          vsegids4 =
            runSTRep
              (\ @ s s1 ->
                 let {
                   a18
                   a18 = -# dt28 1 } in
                 let {
                   $j
                   $j =
                     \ x ->
                       let { (# ipv49, ipv50 #) ~ _
                       <- newByteArray# (*# x 8) (s1 `cast` ...)
                       } in
                       letrec {
                         $s$wa
                         $s$wa =
                           \ sc sc1 sc2 ->
                             case <=# sc1 a18 of _ {
                               False -> (# sc, I# sc2 #);
                               True ->
                                 $s$wa
                                   ((writeIntArray# ipv50 sc2 sc1 (sc `cast` ...)) `cast` ...)
                                   (+# sc1 1)
                                   (+# sc2 1)
                             }; } in
                       let { (# ipv51, ipv52 #) ~ _ <- $s$wa (ipv49 `cast` ...) 0 0 } in
                       let { I# dt37 ~ _ <- ipv52 } in
                       let { (# ipv53, ipv54 #) ~ _
                       <- unsafeFreezeByteArray# ipv50 (ipv51 `cast` ...)
                       } in
                       (# ipv53 `cast` ..., (Vector 0 dt37 ipv54) `cast` ... #) } in
                 case ># 0 a18 of _ {
                   False ->
                     let {
                       a19
                       a19 = +# a18 1 } in
                     case ># a19 0 of _ {
                       False -> case lvl119 of wild18 { };
                       True -> $j a19
                     };
                   True -> $j 0
                 }) } in
        let {
          dt36
          dt36 =
            runSTRep
              (\ @ s s1 ->
                 let {
                   $j
                   $j =
                     \ x ->
                       let { (# ipv49, ipv50 #) ~ _
                       <- newByteArray# (*# x 8) (s1 `cast` ...)
                       } in
                       letrec {
                         $s$wa
                         $s$wa =
                           \ sc sc1 sc2 ->
                             case <=# sc1 0 of _ {
                               False ->
                                 $s$wa
                                   ((writeIntArray# ipv50 sc2 0 (sc `cast` ...)) `cast` ...)
                                   (-# sc1 1)
                                   (+# sc2 1);
                               True -> (# sc, I# sc2 #)
                             }; } in
                       let { (# ipv51, ipv52 #) ~ _
                       <- $s$wa (ipv49 `cast` ...) dt28 0
                       } in
                       let { I# dt38 ~ _ <- ipv52 } in
                       let { (# ipv53, ipv54 #) ~ _
                       <- unsafeFreezeByteArray# ipv50 (ipv51 `cast` ...)
                       } in
                       (# ipv53 `cast` ..., (Vector 0 dt38 ipv54) `cast` ... #) } in
                 case <=# dt28 0 of _ {
                   False -> $j dt28;
                   True -> $j 0
                 }) } in
        let {
          a18
          a18 =
            splitSSegdOnElemsD
              wild
              (USSegd
                 True
                 (dt30 `cast` ...)
                 dt36
                 dt27
                 dt28
                 dt29
                 dt31
                 dt32
                 dt33
                 dt35) } in
        let {
          upssegd
          upssegd =
            UPSSegd
              True
              (dt30 `cast` ...)
              dt36
              dt27
              dt28
              dt29
              dt31
              dt32
              dt33
              dt35
              a18 } in
        let {
          a19
          a19 = $wmkDist vsegids4 dt27 dt29 dt33 } in
        let {
          w3
          w3 = UPVSegd True vsegids4 vsegids4 upssegd upssegd a19 } in
        let { DVector ipv49 ipv50 ipv51 ipv52 ipv53 ipv54 ~ nt10
        <- (imapD'
              $fDTInt $dDT1 lvl115 wild lvl116 (splitLenD wild (I# wild2)))
           `cast` ...
        } in
        let { Vector dt38 dt39 dt40 ~ _
        <- (runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl113
                      wild
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv49 ipv50 ipv51) `cast` ...)
                 } in
                 let { DInt ipv55 ipv56 ipv57 ~ nt11 <- di `cast` ... } in
                 let { I# ipv58 ~ n1 <- n } in
                 case >=# ipv58 0 of _ {
                   False -> case lvl111 ipv58 of wild18 { };
                   True ->
                     let { (# ipv59, ipv60 #) ~ _
                     <- newByteArray# (*# ipv58 8) (s1 `cast` ...)
                     } in
                     let {
                       nt12
                       nt12 = DProd (nt11 `cast` ...) (nt10 `cast` ...) } in
                     let { (# ipv61, ipv62 #) ~ _
                     <- ($wa1
                           dt6
                           ds1
                           ds2
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv61, ipv62 #) ~ _
                               <- ((((myD lvl112 (nt12 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv62 } in
                               let { I# ipv63 ~ _ <- x } in
                               let { Vector ipv64 ipv65 ipv66 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv66
                                    (*# ipv64 8)
                                    ipv60
                                    (*# ipv63 8)
                                    (*# ipv65 8)
                                    (ipv61 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv59 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv63, ipv64 #) ~ _
                     <- unsafeFreezeByteArray# ipv60 (ipv61 `cast` ...)
                     } in
                     (# ipv63 `cast` ..., (Vector 0 ipv58 ipv64) `cast` ... #)
                 }))
           `cast` ...
        } in
        let { __DEFAULT ~ wild16 <- quotInt# dt39 dt6 } in
        let { __DEFAULT ~ wild17 <- remInt# dt39 dt6 } in
        let { DProd dx3 dy3 ~ _
        <- (generateD
              lvl108
              lvl110
              wild
              (\ i ->
                 let {
                   ys
                   ys =
                     let { I# x4 ~ _ <- i } in
                     let {
                       $j
                       $j =
                         \ y ->
                           let {
                             $j1
                             $j1 =
                               \ dt41 ->
                                 runSTRep
                                   (\ @ s s1 ->
                                      let { (# ipv55, ipv56 #) ~ _
                                      <- newByteArray# (*# (+# 1 dt41) 8) (s1 `cast` ...)
                                      } in
                                      let {
                                        a20
                                        a20 = +# dt38 y } in
                                      letrec {
                                        $s$wa
                                        $s$wa =
                                          \ sc sc1 sc2 sc3 ->
                                            case >=# sc1 dt41 of _ {
                                              False ->
                                                let { __DEFAULT ~ wild20
                                                <- indexIntArray# dt40 (+# a20 sc1)
                                                } in
                                                let {
                                                  x#
                                                  x# = +# sc2 wild20 } in
                                                $s$wa
                                                  (+# sc 1)
                                                  (+# sc1 1)
                                                  x#
                                                  ((writeIntArray# ipv56 sc x# (sc3 `cast` ...))
                                                   `cast` ...);
                                              True -> (# sc3, I# sc #)
                                            }; } in
                                      let { (# ipv57, ipv58 #) ~ _
                                      <- $s$wa 1 0 0 ((writeIntArray# ipv56 0 0 ipv55) `cast` ...)
                                      } in
                                      let { I# dt43 ~ _ <- ipv58 } in
                                      let { (# ipv59, ipv60 #) ~ _
                                      <- unsafeFreezeByteArray# ipv56 (ipv57 `cast` ...)
                                      } in
                                      (# ipv59 `cast` ..., (Vector 0 dt43 ipv60) `cast` ... #)) } in
                           case <# x4 wild17 of _ {
                             False -> $j1 wild16;
                             True -> $j1 (+# wild16 1)
                           } } in
                     case <# x4 wild17 of _ {
                       False -> $j (+# (*# wild16 x4) wild17);
                       True -> $j (*# (+# wild16 1) x4)
                     } } in
                 (let { Vector dt41 dt42 dt43 ~ _ <- ys `cast` ... } in
                  (Vector dt41 (-# dt42 1) dt43) `cast` ...,
                  let { Vector dt41 dt42 dt43 ~ _ <- ys `cast` ... } in
                  let { __DEFAULT ~ wild19
                  <- indexIntArray# dt43 (+# dt41 (-# dt42 1))
                  } in
                  I# wild19)))
           `cast` ...
        } in
        let { (x4, ds6) ~ _
        <- scanD $fDTInt lvl107 wild $fNumInt_$c+ lvl7 dy3
        } in
        let { DInt ipv55 ipv56 ipv57 ~ nt11 <- x4 `cast` ... } in
        let { DVector ipv58 ipv59 ipv60 ipv61 ipv62 ipv63 ~ nt12
        <- (imapD'
              lvl105
              $dDT2
              lvl106
              wild
              lvl60
              ((DProd (nt11 `cast` ...) dx3) `cast` ...))
           `cast` ...
        } in
        let { Vector dt42 dt43 dt44 ~ dt41
        <- (runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl104
                      wild
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv58 ipv59 ipv60) `cast` ...)
                 } in
                 let { DInt ipv64 ipv65 ipv66 ~ nt13 <- di `cast` ... } in
                 let { I# ipv67 ~ n1 <- n } in
                 case >=# ipv67 0 of _ {
                   False -> case lvl102 ipv67 of wild22 { };
                   True ->
                     let { (# ipv68, ipv69 #) ~ _
                     <- newByteArray# (*# ipv67 8) (s1 `cast` ...)
                     } in
                     let {
                       nt14
                       nt14 = DProd (nt13 `cast` ...) (nt12 `cast` ...) } in
                     let { (# ipv70, ipv71 #) ~ _
                     <- ($wa1
                           dt6
                           ds1
                           ds2
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv70, ipv71 #) ~ _
                               <- ((((myD lvl103 (nt14 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv71 } in
                               let { I# ipv72 ~ _ <- x } in
                               let { Vector ipv73 ipv74 ipv75 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv75
                                    (*# ipv73 8)
                                    ipv69
                                    (*# ipv72 8)
                                    (*# ipv74 8)
                                    (ipv70 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv68 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv72, ipv73 #) ~ _
                     <- unsafeFreezeByteArray# ipv69 (ipv70 `cast` ...)
                     } in
                     (# ipv72 `cast` ..., (Vector 0 ipv67 ipv73) `cast` ... #)
                 }))
           `cast` ...
        } in
        let { I# dt46 ~ _
        <- foldD
             $fDTInt
             lvl99
             wild
             $fNumInt_$c+
             (generateD
                $fDTInt
                lvl101
                wild
                ((\ i ->
                    let { I# x5 ~ _ <- i } in
                    let {
                      $w$j
                      $w$j =
                        \ w4 ->
                          let {
                            $w$j1
                            $w$j1 =
                              \ w5 ->
                                let {
                                  a20
                                  a20 = +# dt38 w4 } in
                                letrec {
                                  $s$wfoldlM'_loop
                                  $s$wfoldlM'_loop =
                                    \ sc sc1 ->
                                      case >=# sc w5 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild22
                                          <- indexIntArray# dt40 (+# a20 sc)
                                          } in
                                          $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild22);
                                        True -> sc1
                                      }; } in
                                $s$wfoldlM'_loop 0 0 } in
                          case <# x5 wild17 of _ {
                            False -> $w$j1 wild16;
                            True -> $w$j1 (+# wild16 1)
                          } } in
                    case <# x5 wild17 of _ {
                      False ->
                        let { __DEFAULT ~ ww <- $w$j (+# (*# wild16 x5) wild17) } in
                        (I# ww) `cast` ...;
                      True ->
                        let { __DEFAULT ~ ww <- $w$j (*# (+# wild16 1) x5) } in
                        (I# ww) `cast` ...
                    })
                 `cast` ...))
        } in
        let {
          ipv64
          ipv64 =
            splitSegdOnElemsD
              wild (USegd dt38 dt39 dt40 dt42 dt43 dt44 dt46) } in
        let {
          segd2
          segd2 = UPSegd dt38 dt39 dt40 dt42 dt43 dt44 dt46 ipv64 } in
        let {
          vsegd'
          vsegd' = updateVSegs (replicate_s $fEltInt segd2) vsegd } in
        let {
          a20
          a20 = unsafeDemoteToUPSegd vsegd' } in
        let {
          flat1
          flat1 =
            let { PInts arrs ~ _ <- xs `cast` ... } in
            (PInt
               (let { UPVSegd ipv65 ipv66 ipv67 ipv68 ipv69 ipv70 ~ _
                <- vsegd'
                } in
                let { Vectors ipv71 ipv72 ipv73 ipv74 ~ _ <- arrs } in
                let { UPSSegd dt47 dt48 dt49 dt50 dt51 dt52 dt53 dt54 dt55 dt56
                              ds7 ~ _
                <- ipv68
                } in
                let { Vector ipv75 ipv76 ipv77 ~ _ <- ipv66 `cast` ... } in
                let { DProd ipv78 ipv79 ~ nt14 <- ipv70 `cast` ... } in
                let { DVector ipv80 ipv81 ipv82 ipv83 ipv84 ipv85 ~ nt15
                <- (imapD'
                      lvl96
                      $dDT1
                      lvl97
                      wild
                      (\ _ x ->
                         let { (x5, y) ~ _ <- x } in
                         let { (x6, y1) ~ _ <- x5 } in
                         let { USegd dt57 dt58 dt59 dt60 dt61 dt62 dt63 ~ _ <- x6 } in
                         let { I# ipv80 ~ _ <- y1 } in
                         let { I# ipv81 ~ _ <- y } in
                         let { ByteArray ipv82 ~ _ <- lvl98 } in
                         let { Vector ipv83 ipv84 ipv85 ~ _ <- dt49 `cast` ... } in
                         let { Vector ipv86 ipv87 ipv88 ~ _ <- dt48 `cast` ... } in
                         letrec {
                           $s$wfoldlM'_loop
                           $s$wfoldlM'_loop =
                             \ sc sc1 ->
                               case >=# sc dt58 of _ {
                                 False ->
                                   let { __DEFAULT ~ wild26 <- indexIntArray# dt59 (+# dt57 sc) } in
                                   $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild26);
                                 True -> sc1
                               }; } in
                         let { __DEFAULT ~ ww <- $s$wfoldlM'_loop 0 0 } in
                         runSTRep
                           (\ @ s s1 ->
                              let { (# ipv89, ipv90 #) ~ _
                              <- newByteArray# (*# ww 8) (s1 `cast` ...)
                              } in
                              letrec {
                                $s$wa
                                $s$wa =
                                  \ sc sc1 sc2 sc3 sc4 sc5 ->
                                    case >=# sc1 sc2 of _ {
                                      False ->
                                        let { __DEFAULT ~ wild26 <- indexIntArray# sc3 sc1 } in
                                        $s$wa
                                          ((writeIntArray# ipv90 sc5 wild26 (sc `cast` ...))
                                           `cast` ...)
                                          (+# sc1 1)
                                          sc2
                                          sc3
                                          sc4
                                          (+# sc5 1);
                                      True ->
                                        case >=# (+# sc4 1) dt58 of _ {
                                          False ->
                                            let {
                                              a21
                                              a21 = +# sc4 1 } in
                                            let { __DEFAULT ~ wild27
                                            <- indexIntArray# ipv77 (+# ipv75 (+# a21 ipv80))
                                            } in
                                            let { __DEFAULT ~ wild28
                                            <- indexIntArray# ipv85 (+# ipv83 wild27)
                                            } in
                                            let {
                                              $j
                                              $j =
                                                \ ww1 ->
                                                  let { __DEFAULT ~ wild29
                                                  <- indexIntArray# ipv72 wild28
                                                  } in
                                                  let { __DEFAULT ~ wild30
                                                  <- indexIntArray# ipv88 (+# ipv86 wild27)
                                                  } in
                                                  let { __DEFAULT ~ wild31
                                                  <- indexIntArray# dt59 (+# dt57 a21)
                                                  } in
                                                  let { __DEFAULT ~ wild32
                                                  <- indexByteArrayArray# ipv74 wild28
                                                  } in
                                                  $s$wa
                                                    sc
                                                    (+# (+# wild29 wild30) ww1)
                                                    (+# (+# (+# wild29 wild30) ww1) wild31)
                                                    wild32
                                                    a21
                                                    sc5 } in
                                            case a21 of _ {
                                              __DEFAULT -> $j 0;
                                              0 -> $j ipv81
                                            };
                                          True -> (# sc, I# sc5 #)
                                        }
                                    }; } in
                              let { (# ipv91, ipv92 #) ~ _
                              <- $s$wa (ipv89 `cast` ...) 0 0 ipv82 (-1) 0
                              } in
                              let { I# dt65 ~ _ <- ipv92 } in
                              let { (# ipv93, ipv94 #) ~ _
                              <- unsafeFreezeByteArray# ipv90 (ipv91 `cast` ...)
                              } in
                              (# ipv93 `cast` ..., (Vector 0 dt65 ipv94) `cast` ... #)))
                      (nt14 `cast` ...))
                   `cast` ...
                } in
                runSTRep
                  (\ @ s s1 ->
                     let { (di, n) ~ _
                     <- scanD
                          $fDTInt
                          lvl95
                          wild
                          $fNumInt_$c+
                          lvl7
                          ((DInt ipv80 ipv81 ipv82) `cast` ...)
                     } in
                     let { DInt ipv86 ipv87 ipv88 ~ nt16 <- di `cast` ... } in
                     let { I# ipv89 ~ n1 <- n } in
                     case >=# ipv89 0 of _ {
                       False -> case lvl93 ipv89 of wild24 { };
                       True ->
                         let { (# ipv90, ipv91 #) ~ _
                         <- newByteArray# (*# ipv89 8) (s1 `cast` ...)
                         } in
                         let {
                           nt17
                           nt17 = DProd (nt16 `cast` ...) (nt15 `cast` ...) } in
                         let { (# ipv92, ipv93 #) ~ _
                         <- ($wa1
                               dt6
                               ds1
                               ds2
                               (++
                                  $fShowComp2
                                  ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                               (WorkCopy n1)
                               ((\ i s2 ->
                                   let { (# ipv92, ipv93 #) ~ _
                                   <- ((((myD lvl94 (nt17 `cast` ...)) `cast` ...) i) `cast` ...) s2
                                   } in
                                   let { (x, y) ~ _ <- ipv93 } in
                                   let { I# ipv94 ~ _ <- x } in
                                   let { Vector ipv95 ipv96 ipv97 ~ _ <- y `cast` ... } in
                                   (# copyByteArray#
                                        ipv97
                                        (*# ipv95 8)
                                        ipv91
                                        (*# ipv94 8)
                                        (*# ipv96 8)
                                        (ipv92 `cast` ...),
                                      () #)
                                   `cast` ...)
                                `cast` ...)
                               (ipv90 `cast` ...))
                            `cast` ...
                         } in
                         let { (# ipv94, ipv95 #) ~ _
                         <- unsafeFreezeByteArray# ipv91 (ipv92 `cast` ...)
                         } in
                         (# ipv94 `cast` ..., (Vector 0 ipv89 ipv95) `cast` ... #)
                     })))
            `cast` ... } in
        let {
          ipv65
          ipv65 =
            let {
              vsegids5
              vsegids5 =
                runSTRep
                  (\ @ s s1 ->
                     let {
                       a21
                       a21 = -# dt39 1 } in
                     let {
                       $j
                       $j =
                         \ x ->
                           let { (# ipv66, ipv67 #) ~ _
                           <- newByteArray# (*# x 8) (s1 `cast` ...)
                           } in
                           letrec {
                             $s$wa
                             $s$wa =
                               \ sc sc1 sc2 ->
                                 case <=# sc1 a21 of _ {
                                   False -> (# sc, I# sc2 #);
                                   True ->
                                     $s$wa
                                       ((writeIntArray# ipv67 sc2 sc1 (sc `cast` ...)) `cast` ...)
                                       (+# sc1 1)
                                       (+# sc2 1)
                                 }; } in
                           let { (# ipv68, ipv69 #) ~ _ <- $s$wa (ipv66 `cast` ...) 0 0 } in
                           let { I# dt48 ~ _ <- ipv69 } in
                           let { (# ipv70, ipv71 #) ~ _
                           <- unsafeFreezeByteArray# ipv67 (ipv68 `cast` ...)
                           } in
                           (# ipv70 `cast` ..., (Vector 0 dt48 ipv71) `cast` ... #) } in
                     case ># 0 a21 of _ {
                       False ->
                         let {
                           a22
                           a22 = +# a21 1 } in
                         case ># a22 0 of _ {
                           False -> case lvl92 of wild22 { };
                           True -> $j a22
                         };
                       True -> $j 0
                     }) } in
            let {
              dt47
              dt47 =
                runSTRep
                  (\ @ s s1 ->
                     let {
                       $j
                       $j =
                         \ x ->
                           let { (# ipv66, ipv67 #) ~ _
                           <- newByteArray# (*# x 8) (s1 `cast` ...)
                           } in
                           letrec {
                             $s$wa
                             $s$wa =
                               \ sc sc1 sc2 ->
                                 case <=# sc1 0 of _ {
                                   False ->
                                     $s$wa
                                       ((writeIntArray# ipv67 sc2 0 (sc `cast` ...)) `cast` ...)
                                       (-# sc1 1)
                                       (+# sc2 1);
                                   True -> (# sc, I# sc2 #)
                                 }; } in
                           let { (# ipv68, ipv69 #) ~ _
                           <- $s$wa (ipv66 `cast` ...) dt39 0
                           } in
                           let { I# dt49 ~ _ <- ipv69 } in
                           let { (# ipv70, ipv71 #) ~ _
                           <- unsafeFreezeByteArray# ipv67 (ipv68 `cast` ...)
                           } in
                           (# ipv70 `cast` ..., (Vector 0 dt49 ipv71) `cast` ... #) } in
                     case <=# dt39 0 of _ {
                       False -> $j dt39;
                       True -> $j 0
                     }) } in
            let {
              a21
              a21 =
                splitSSegdOnElemsD
                  wild
                  (USSegd
                     True
                     (dt41 `cast` ...)
                     dt47
                     dt38
                     dt39
                     dt40
                     dt42
                     dt43
                     dt44
                     dt46) } in
            let {
              upssegd1
              upssegd1 =
                UPSSegd
                  True
                  (dt41 `cast` ...)
                  dt47
                  dt38
                  dt39
                  dt40
                  dt42
                  dt43
                  dt44
                  dt46
                  a21 } in
            UPVSegd
              True
              vsegids5
              vsegids5
              upssegd1
              upssegd1
              ($wmkDist vsegids5 dt38 dt40 dt44) } in
        let {
          a21
          a21 =
            runSTRep
              (\ @ s s1 ->
                 let { (# ipv66, ipv67 #) ~ _
                 <- newArray# 1 (uninitialised) (s1 `cast` ...)
                 } in
                 let { (# ipv68, ipv69 #) ~ _
                 <- unsafeFreezeArray#
                      ipv67
                      (writeArray#
                         ipv67
                         0
                         ((PNested vsegd' xs a20 (flat1 `cast` ...)) `cast` ...)
                         ipv66)
                 } in
                 (# ipv68 `cast` ..., Vector 0 1 ipv69 #)) } in
        let {
          a22
          a22 = PNesteds a21 } in
        (PTuple2
           (nt6 `cast` ...)
           (let {
              segd'1
              segd'1 =
                let {
                  $w$j
                  $w$j =
                    \ w4 ->
                      let { __DEFAULT ~ wild20 <- quotInt# w4 dt6 } in
                      let { __DEFAULT ~ wild21 <- remInt# w4 dt6 } in
                      let { DVector ipv66 ipv67 ipv68 ipv69 ipv70 ipv71 ~ nt13
                      <- (generateD
                            $dDT1
                            lvl37
                            wild
                            (\ i ->
                               let { I# x5 ~ _ <- i } in
                               let {
                                 $j
                                 $j =
                                   \ dt47 ->
                                     let {
                                       $j1
                                       $j1 =
                                         \ y ->
                                           runSTRep
                                             (\ @ s s1 ->
                                                let { (# ipv66, ipv67 #) ~ _
                                                <- newByteArray# (*# dt47 8) (s1 `cast` ...)
                                                } in
                                                let {
                                                  a23
                                                  a23 = +# dt38 y } in
                                                let {
                                                  a24
                                                  a24 = +# dt27 y } in
                                                letrec {
                                                  $s$wa
                                                  $s$wa =
                                                    \ sc sc1 sc2 ->
                                                      case >=# sc1 dt47 of _ {
                                                        False ->
                                                          let { __DEFAULT ~ wild24
                                                          <- indexIntArray# dt29 (+# a24 sc1)
                                                          } in
                                                          let { __DEFAULT ~ wild25
                                                          <- indexIntArray# dt40 (+# a23 sc1)
                                                          } in
                                                          $s$wa
                                                            ((writeIntArray#
                                                                ipv67
                                                                sc2
                                                                (+# wild24 wild25)
                                                                (sc `cast` ...))
                                                             `cast` ...)
                                                            (+# sc1 1)
                                                            (+# sc2 1);
                                                        True -> (# sc, I# sc2 #)
                                                      }; } in
                                                let { (# ipv68, ipv69 #) ~ _
                                                <- $s$wa (ipv66 `cast` ...) 0 0
                                                } in
                                                let { I# dt49 ~ _ <- ipv69 } in
                                                let { (# ipv70, ipv71 #) ~ _
                                                <- unsafeFreezeByteArray# ipv67 (ipv68 `cast` ...)
                                                } in
                                                (# ipv70 `cast` ...,
                                                   (Vector 0 dt49 ipv71) `cast` ... #)) } in
                                     case <# x5 wild21 of _ {
                                       False -> $j1 (+# (*# wild20 x5) wild21);
                                       True -> $j1 (*# (+# wild20 1) x5)
                                     } } in
                               case <# x5 wild21 of _ {
                                 False -> $j wild20;
                                 True -> $j (+# wild20 1)
                               }))
                         `cast` ...
                      } in
                      let { Vector dt48 dt49 dt50 ~ _
                      <- (runSTRep
                            (\ @ s s1 ->
                               let { (di, n) ~ _
                               <- scanD
                                    $fDTInt
                                    lvl35
                                    wild
                                    $fNumInt_$c+
                                    lvl7
                                    ((DInt ipv66 ipv67 ipv68) `cast` ...)
                               } in
                               let { DInt ipv72 ipv73 ipv74 ~ nt14 <- di `cast` ... } in
                               let { I# ipv75 ~ n1 <- n } in
                               case >=# ipv75 0 of _ {
                                 False -> case lvl33 ipv75 of wild24 { };
                                 True ->
                                   let { (# ipv76, ipv77 #) ~ _
                                   <- newByteArray# (*# ipv75 8) (s1 `cast` ...)
                                   } in
                                   let {
                                     nt15
                                     nt15 = DProd (nt14 `cast` ...) (nt13 `cast` ...) } in
                                   let { (# ipv78, ipv79 #) ~ _
                                   <- ($wa1
                                         dt6
                                         ds1
                                         ds2
                                         (++
                                            $fShowComp2
                                            ($fShowComp_$cshowsPrec
                                               $fShowComp7 (WJoinCopy n1) ([])))
                                         (WorkCopy n1)
                                         ((\ i s2 ->
                                             let { (# ipv78, ipv79 #) ~ _
                                             <- ((((myD lvl34 (nt15 `cast` ...)) `cast` ...) i)
                                                 `cast` ...)
                                                  s2
                                             } in
                                             let { (x, y) ~ _ <- ipv79 } in
                                             let { I# ipv80 ~ _ <- x } in
                                             let { Vector ipv81 ipv82 ipv83 ~ _ <- y `cast` ... } in
                                             (# copyByteArray#
                                                  ipv83
                                                  (*# ipv81 8)
                                                  ipv77
                                                  (*# ipv80 8)
                                                  (*# ipv82 8)
                                                  (ipv78 `cast` ...),
                                                () #)
                                             `cast` ...)
                                          `cast` ...)
                                         (ipv76 `cast` ...))
                                      `cast` ...
                                   } in
                                   let { (# ipv80, ipv81 #) ~ _
                                   <- unsafeFreezeByteArray# ipv77 (ipv78 `cast` ...)
                                   } in
                                   (# ipv80 `cast` ..., (Vector 0 ipv75 ipv81) `cast` ... #)
                               }))
                         `cast` ...
                      } in
                      let {
                        $w$j1
                        $w$j1 =
                          \ w5 ->
                            let { __DEFAULT ~ wild22 <- quotInt# w5 dt6 } in
                            let { __DEFAULT ~ wild23 <- remInt# w5 dt6 } in
                            let { DVector ipv72 ipv73 ipv74 ipv75 ipv76 ipv77 ~ nt14
                            <- (generateD
                                  $dDT1
                                  lvl32
                                  wild
                                  (\ i ->
                                     let { I# x5 ~ _ <- i } in
                                     let {
                                       $j
                                       $j =
                                         \ dt51 ->
                                           let {
                                             $j1
                                             $j1 =
                                               \ y ->
                                                 runSTRep
                                                   (\ @ s s1 ->
                                                      let { (# ipv72, ipv73 #) ~ _
                                                      <- newByteArray# (*# dt51 8) (s1 `cast` ...)
                                                      } in
                                                      let {
                                                        a23
                                                        a23 = +# dt42 y } in
                                                      let {
                                                        a24
                                                        a24 = +# dt31 y } in
                                                      letrec {
                                                        $s$wa
                                                        $s$wa =
                                                          \ sc sc1 sc2 ->
                                                            case >=# sc1 dt51 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild26
                                                                <- indexIntArray# dt33 (+# a24 sc1)
                                                                } in
                                                                let { __DEFAULT ~ wild27
                                                                <- indexIntArray# dt44 (+# a23 sc1)
                                                                } in
                                                                $s$wa
                                                                  ((writeIntArray#
                                                                      ipv73
                                                                      sc2
                                                                      (+# wild26 wild27)
                                                                      (sc `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc1 1)
                                                                  (+# sc2 1);
                                                              True -> (# sc, I# sc2 #)
                                                            }; } in
                                                      let { (# ipv74, ipv75 #) ~ _
                                                      <- $s$wa (ipv72 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt53 ~ _ <- ipv75 } in
                                                      let { (# ipv76, ipv77 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           ipv73 (ipv74 `cast` ...)
                                                      } in
                                                      (# ipv76 `cast` ...,
                                                         (Vector 0 dt53 ipv77) `cast` ... #)) } in
                                           case <# x5 wild23 of _ {
                                             False -> $j1 (+# (*# wild22 x5) wild23);
                                             True -> $j1 (*# (+# wild22 1) x5)
                                           } } in
                                     case <# x5 wild23 of _ {
                                       False -> $j wild22;
                                       True -> $j (+# wild22 1)
                                     }))
                               `cast` ...
                            } in
                            let { Vector dt52 dt53 dt54 ~ _
                            <- (runSTRep
                                  (\ @ s s1 ->
                                     let { (di, n) ~ _
                                     <- scanD
                                          $fDTInt
                                          lvl30
                                          wild
                                          $fNumInt_$c+
                                          lvl7
                                          ((DInt ipv72 ipv73 ipv74) `cast` ...)
                                     } in
                                     let { DInt ipv78 ipv79 ipv80 ~ nt15 <- di `cast` ... } in
                                     let { I# ipv81 ~ n1 <- n } in
                                     case >=# ipv81 0 of _ {
                                       False -> case lvl28 ipv81 of wild26 { };
                                       True ->
                                         let { (# ipv82, ipv83 #) ~ _
                                         <- newByteArray# (*# ipv81 8) (s1 `cast` ...)
                                         } in
                                         let {
                                           nt16
                                           nt16 = DProd (nt15 `cast` ...) (nt14 `cast` ...) } in
                                         let { (# ipv84, ipv85 #) ~ _
                                         <- ($wa1
                                               dt6
                                               ds1
                                               ds2
                                               (++
                                                  $fShowComp2
                                                  ($fShowComp_$cshowsPrec
                                                     $fShowComp7 (WJoinCopy n1) ([])))
                                               (WorkCopy n1)
                                               ((\ i s2 ->
                                                   let { (# ipv84, ipv85 #) ~ _
                                                   <- ((((myD lvl29 (nt16 `cast` ...)) `cast` ...)
                                                          i)
                                                       `cast` ...)
                                                        s2
                                                   } in
                                                   let { (x, y) ~ _ <- ipv85 } in
                                                   let { I# ipv86 ~ _ <- x } in
                                                   let { Vector ipv87 ipv88 ipv89 ~ _
                                                   <- y `cast` ...
                                                   } in
                                                   (# copyByteArray#
                                                        ipv89
                                                        (*# ipv87 8)
                                                        ipv83
                                                        (*# ipv86 8)
                                                        (*# ipv88 8)
                                                        (ipv84 `cast` ...),
                                                      () #)
                                                   `cast` ...)
                                                `cast` ...)
                                               (ipv82 `cast` ...))
                                            `cast` ...
                                         } in
                                         let { (# ipv86, ipv87 #) ~ _
                                         <- unsafeFreezeByteArray# ipv83 (ipv84 `cast` ...)
                                         } in
                                         (# ipv86 `cast` ..., (Vector 0 ipv81 ipv87) `cast` ... #)
                                     }))
                               `cast` ...
                            } in
                            let {
                              dt55
                              dt55 = +# dt35 dt46 } in
                            (# dt48,
                               dt49,
                               dt50,
                               dt52,
                               dt53,
                               dt54,
                               dt55,
                               splitSegdOnElemsD
                                 wild (USegd dt48 dt49 dt50 dt52 dt53 dt54 dt55) #) } in
                      case <=# dt32 dt43 of _ {
                        False -> $w$j1 dt43;
                        True -> $w$j1 dt32
                      } } in
                case <=# dt28 dt39 of _ {
                  False ->
                    let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                    <- $w$j dt39
                    } in
                    UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8;
                  True ->
                    let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                    <- $w$j dt28
                    } in
                    UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8
                } } in
            let {
              vec
              vec =
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv66, ipv67 #) ~ _
                     <- newArray# 1 (uninitialised) (s1 `cast` ...)
                     } in
                     let {
                       vsegd'1
                       vsegd'1 = updateVSegs (replicate_s $fEltInt segd1) vsegd } in
                     let { (# ipv68, ipv69 #) ~ _
                     <- unsafeFreezeArray#
                          ipv67
                          (writeArray#
                             ipv67
                             0
                             ((PNested
                                 vsegd'1
                                 xs
                                 (unsafeDemoteToUPSegd vsegd'1)
                                 (let { PInts arrs ~ _ <- xs `cast` ... } in
                                  (PInt
                                     (let { UPVSegd ipv68 ipv69 ipv70 ipv71 ipv72 ipv73 ~ _
                                      <- vsegd'1
                                      } in
                                      let { Vectors ipv74 ipv75 ipv76 ipv77 ~ _ <- arrs } in
                                      let { UPSSegd dt47 dt48 dt49 dt50 dt51 dt52 dt53 dt54 dt55
                                                    dt56 ds8 ~ _
                                      <- ipv71
                                      } in
                                      let { Vector ipv78 ipv79 ipv80 ~ _ <- ipv69 `cast` ... } in
                                      let { DProd ipv81 ipv82 ~ nt14 <- ipv73 `cast` ... } in
                                      let { DVector ipv83 ipv84 ipv85 ipv86 ipv87 ipv88 ~ nt15
                                      <- (imapD'
                                            lvl123
                                            $dDT1
                                            lvl124
                                            wild
                                            (\ _ x ->
                                               let { (x5, y) ~ _ <- x } in
                                               let { (x6, y1) ~ _ <- x5 } in
                                               let { USegd dt57 dt58 dt59 dt60 dt61 dt62 dt63 ~ _
                                               <- x6
                                               } in
                                               let { I# ipv83 ~ _ <- y1 } in
                                               let { I# ipv84 ~ _ <- y } in
                                               let { ByteArray ipv85 ~ _ <- lvl125 } in
                                               let { Vector ipv86 ipv87 ipv88 ~ _
                                               <- dt49 `cast` ...
                                               } in
                                               let { Vector ipv89 ipv90 ipv91 ~ _
                                               <- dt48 `cast` ...
                                               } in
                                               letrec {
                                                 $s$wfoldlM'_loop
                                                 $s$wfoldlM'_loop =
                                                   \ sc sc1 ->
                                                     case >=# sc dt58 of _ {
                                                       False ->
                                                         let { __DEFAULT ~ wild26
                                                         <- indexIntArray# dt59 (+# dt57 sc)
                                                         } in
                                                         $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild26);
                                                       True -> sc1
                                                     }; } in
                                               let { __DEFAULT ~ ww <- $s$wfoldlM'_loop 0 0 } in
                                               runSTRep
                                                 (\ @ s2 s3 ->
                                                    let { (# ipv92, ipv93 #) ~ _
                                                    <- newByteArray# (*# ww 8) (s3 `cast` ...)
                                                    } in
                                                    letrec {
                                                      $s$wa
                                                      $s$wa =
                                                        \ sc sc1 sc2 sc3 sc4 sc5 ->
                                                          case >=# sc1 sc2 of _ {
                                                            False ->
                                                              let { __DEFAULT ~ wild26
                                                              <- indexIntArray# sc3 sc1
                                                              } in
                                                              $s$wa
                                                                ((writeIntArray#
                                                                    ipv93
                                                                    sc5
                                                                    wild26
                                                                    (sc `cast` ...))
                                                                 `cast` ...)
                                                                (+# sc1 1)
                                                                sc2
                                                                sc3
                                                                sc4
                                                                (+# sc5 1);
                                                            True ->
                                                              case >=# (+# sc4 1) dt58 of _ {
                                                                False ->
                                                                  let {
                                                                    a23
                                                                    a23 = +# sc4 1 } in
                                                                  let { __DEFAULT ~ wild27
                                                                  <- indexIntArray#
                                                                       ipv80
                                                                       (+# ipv78 (+# a23 ipv83))
                                                                  } in
                                                                  let { __DEFAULT ~ wild28
                                                                  <- indexIntArray#
                                                                       ipv88 (+# ipv86 wild27)
                                                                  } in
                                                                  let {
                                                                    $j
                                                                    $j =
                                                                      \ ww1 ->
                                                                        let { __DEFAULT ~ wild29
                                                                        <- indexIntArray#
                                                                             ipv75 wild28
                                                                        } in
                                                                        let { __DEFAULT ~ wild30
                                                                        <- indexIntArray#
                                                                             ipv91 (+# ipv89 wild27)
                                                                        } in
                                                                        let { __DEFAULT ~ wild31
                                                                        <- indexIntArray#
                                                                             dt59 (+# dt57 a23)
                                                                        } in
                                                                        let { __DEFAULT ~ wild32
                                                                        <- indexByteArrayArray#
                                                                             ipv77 wild28
                                                                        } in
                                                                        $s$wa
                                                                          sc
                                                                          (+#
                                                                             (+# wild29 wild30) ww1)
                                                                          (+#
                                                                             (+#
                                                                                (+# wild29 wild30)
                                                                                ww1)
                                                                             wild31)
                                                                          wild32
                                                                          a23
                                                                          sc5 } in
                                                                  case a23 of _ {
                                                                    __DEFAULT -> $j 0;
                                                                    0 -> $j ipv84
                                                                  };
                                                                True -> (# sc, I# sc5 #)
                                                              }
                                                          }; } in
                                                    let { (# ipv94, ipv95 #) ~ _
                                                    <- $s$wa (ipv92 `cast` ...) 0 0 ipv85 (-1) 0
                                                    } in
                                                    let { I# dt65 ~ _ <- ipv95 } in
                                                    let { (# ipv96, ipv97 #) ~ _
                                                    <- unsafeFreezeByteArray#
                                                         ipv93 (ipv94 `cast` ...)
                                                    } in
                                                    (# ipv96 `cast` ...,
                                                       (Vector 0 dt65 ipv97) `cast` ... #)))
                                            (nt14 `cast` ...))
                                         `cast` ...
                                      } in
                                      runSTRep
                                        (\ @ s2 s3 ->
                                           let { (di, n) ~ _
                                           <- scanD
                                                $fDTInt
                                                lvl122
                                                wild
                                                $fNumInt_$c+
                                                lvl7
                                                ((DInt ipv83 ipv84 ipv85) `cast` ...)
                                           } in
                                           let { DInt ipv89 ipv90 ipv91 ~ nt16 <- di `cast` ... } in
                                           let { I# ipv92 ~ n1 <- n } in
                                           case >=# ipv92 0 of _ {
                                             False -> case lvl120 ipv92 of wild24 { };
                                             True ->
                                               let { (# ipv93, ipv94 #) ~ _
                                               <- newByteArray# (*# ipv92 8) (s3 `cast` ...)
                                               } in
                                               let {
                                                 nt17
                                                 nt17 =
                                                   DProd (nt16 `cast` ...) (nt15 `cast` ...) } in
                                               let { (# ipv95, ipv96 #) ~ _
                                               <- ($wa1
                                                     dt6
                                                     ds1
                                                     ds2
                                                     (++
                                                        $fShowComp2
                                                        ($fShowComp_$cshowsPrec
                                                           $fShowComp7 (WJoinCopy n1) ([])))
                                                     (WorkCopy n1)
                                                     ((\ i s4 ->
                                                         let { (# ipv95, ipv96 #) ~ _
                                                         <- ((((myD lvl121 (nt17 `cast` ...))
                                                               `cast` ...)
                                                                i)
                                                             `cast` ...)
                                                              s4
                                                         } in
                                                         let { (x, y) ~ _ <- ipv96 } in
                                                         let { I# ipv97 ~ _ <- x } in
                                                         let { Vector ipv98 ipv99 ipv100 ~ _
                                                         <- y `cast` ...
                                                         } in
                                                         (# copyByteArray#
                                                              ipv100
                                                              (*# ipv98 8)
                                                              ipv94
                                                              (*# ipv97 8)
                                                              (*# ipv99 8)
                                                              (ipv95 `cast` ...),
                                                            () #)
                                                         `cast` ...)
                                                      `cast` ...)
                                                     (ipv93 `cast` ...))
                                                  `cast` ...
                                               } in
                                               let { (# ipv97, ipv98 #) ~ _
                                               <- unsafeFreezeByteArray# ipv94 (ipv95 `cast` ...)
                                               } in
                                               (# ipv97 `cast` ...,
                                                  (Vector 0 ipv92 ipv98) `cast` ... #)
                                           })))
                                  `cast` ...))
                              `cast` ...)
                             ipv66)
                     } in
                     (# ipv68 `cast` ..., Vector 0 1 ipv69 #)) } in
            let {
              yarr
              yarr =
                let { Vector ipv66 ipv67 ipv68 ~ _ <- a21 } in
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv69, ipv70 #) ~ _
                     <- newArray# ipv67 (uninitialised) (s1 `cast` ...)
                     } in
                     letrec {
                       $s$wa
                       $s$wa =
                         \ sc sc1 sc2 ->
                           case >=# sc1 ipv67 of _ {
                             False ->
                               let { (# ipv71 #) ~ _ <- indexArray# ipv68 (+# ipv66 sc1) } in
                               $s$wa
                                 ((writeArray#
                                     ipv70
                                     sc2
                                     (let { PNested vsegd1 xs1 segd3 flat2 ~ _
                                      <- ipv71 `cast` ...
                                      } in
                                      (PNested vsegd1 (xs1 `cast` ...) segd3 (flat2 `cast` ...))
                                      `cast` ...)
                                     (sc `cast` ...))
                                  `cast` ...)
                                 (+# sc1 1)
                                 (+# sc2 1);
                             True -> (# sc, I# sc2 #)
                           }; } in
                     let { (# ipv71, ipv72 #) ~ _ <- $s$wa (ipv69 `cast` ...) 0 0 } in
                     let { I# dt48 ~ _ <- ipv72 } in
                     let { (# ipv73, ipv74 #) ~ _
                     <- unsafeFreezeArray# ipv70 (ipv71 `cast` ...)
                     } in
                     (# ipv73 `cast` ..., Vector 0 dt48 ipv74 #)) } in
            let {
              xarr
              xarr =
                let { Vector ipv66 ipv67 ipv68 ~ _ <- vec } in
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv69, ipv70 #) ~ _
                     <- newArray# ipv67 (uninitialised) (s1 `cast` ...)
                     } in
                     letrec {
                       $s$wa
                       $s$wa =
                         \ sc sc1 sc2 ->
                           case >=# sc1 ipv67 of _ {
                             False ->
                               let { (# ipv71 #) ~ _ <- indexArray# ipv68 (+# ipv66 sc1) } in
                               $s$wa
                                 ((writeArray#
                                     ipv70
                                     sc2
                                     (let { PNested vsegd1 xs1 segd3 flat2 ~ _
                                      <- ipv71 `cast` ...
                                      } in
                                      (PNested vsegd1 (xs1 `cast` ...) segd3 (flat2 `cast` ...))
                                      `cast` ...)
                                     (sc `cast` ...))
                                  `cast` ...)
                                 (+# sc1 1)
                                 (+# sc2 1);
                             True -> (# sc, I# sc2 #)
                           }; } in
                     let { (# ipv71, ipv72 #) ~ _ <- $s$wa (ipv69 `cast` ...) 0 0 } in
                     let { I# dt48 ~ _ <- ipv72 } in
                     let { (# ipv73, ipv74 #) ~ _
                     <- unsafeFreezeArray# ipv70 (ipv71 `cast` ...)
                     } in
                     (# ipv73 `cast` ..., Vector 0 dt48 ipv74 #)) } in
            let {
              ydata
              ydata =
                let { Vector ipv66 ipv67 ipv68 ~ _ <- yarr } in
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv69, ipv70 #) ~ _
                     <- newArray# ipv67 (uninitialised) (s1 `cast` ...)
                     } in
                     letrec {
                       $s$wa
                       $s$wa =
                         \ sc sc1 sc2 ->
                           case >=# sc1 ipv67 of _ {
                             False ->
                               $s$wa
                                 ((writeArray#
                                     ipv70
                                     sc2
                                     (let { (# ipv71 #) ~ _ <- indexArray# ipv68 (+# ipv66 sc1) } in
                                      let { PNested ds9 ds10 ds11 ds12 ~ _ <- ipv71 `cast` ... } in
                                      ($fPRInt_$ctoVectordPR (ds10 `cast` ...)) `cast` ...)
                                     (sc `cast` ...))
                                  `cast` ...)
                                 (+# sc1 1)
                                 (+# sc2 1);
                             True -> (# sc, I# sc2 #)
                           }; } in
                     let { (# ipv71, ipv72 #) ~ _ <- $s$wa (ipv69 `cast` ...) 0 0 } in
                     let { I# dt48 ~ _ <- ipv72 } in
                     let { (# ipv73, ipv74 #) ~ _
                     <- unsafeFreezeArray# ipv70 (ipv71 `cast` ...)
                     } in
                     (# ipv73 `cast` ..., Vector 0 dt48 ipv74 #)) } in
            let {
              xdata
              xdata =
                let { Vector ipv66 ipv67 ipv68 ~ _ <- xarr } in
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv69, ipv70 #) ~ _
                     <- newArray# ipv67 (uninitialised) (s1 `cast` ...)
                     } in
                     letrec {
                       $s$wa
                       $s$wa =
                         \ sc sc1 sc2 ->
                           case >=# sc1 ipv67 of _ {
                             False ->
                               $s$wa
                                 ((writeArray#
                                     ipv70
                                     sc2
                                     (let { (# ipv71 #) ~ _ <- indexArray# ipv68 (+# ipv66 sc1) } in
                                      let { PNested ds9 ds10 ds11 ds12 ~ _ <- ipv71 `cast` ... } in
                                      ($fPRInt_$ctoVectordPR (ds10 `cast` ...)) `cast` ...)
                                     (sc `cast` ...))
                                  `cast` ...)
                                 (+# sc1 1)
                                 (+# sc2 1);
                             True -> (# sc, I# sc2 #)
                           }; } in
                     let { (# ipv71, ipv72 #) ~ _ <- $s$wa (ipv69 `cast` ...) 0 0 } in
                     let { I# dt48 ~ _ <- ipv72 } in
                     let { (# ipv73, ipv74 #) ~ _
                     <- unsafeFreezeArray# ipv70 (ipv71 `cast` ...)
                     } in
                     (# ipv73 `cast` ..., Vector 0 dt48 ipv74 #)) } in
            let {
              segd'2
              segd'2 =
                let { Vector ipv66 ipv67 ipv68 ~ _ <- xarr } in
                let { Vector ww1 ww2 ww3 ~ _
                <- runSTRep
                     (\ @ s s1 ->
                        let { (# ipv69, ipv70 #) ~ _
                        <- newArray# ipv67 (uninitialised) (s1 `cast` ...)
                        } in
                        letrec {
                          $s$wa
                          $s$wa =
                            \ sc sc1 sc2 ->
                              case >=# sc1 ipv67 of _ {
                                False ->
                                  let { (# ipv71 #) ~ _ <- indexArray# ipv68 (+# ipv66 sc1) } in
                                  $s$wa
                                    ((writeArray#
                                        ipv70
                                        sc2
                                        (let { PNested ds9 ds10 segd3 ds11 ~ _
                                         <- ipv71 `cast` ...
                                         } in
                                         let { UPSegd dt47 dt48 dt49 dt50 dt51 dt52 dt53 ds12 ~ _
                                         <- segd3
                                         } in
                                         (Vector dt47 dt48 dt49) `cast` ...)
                                        (sc `cast` ...))
                                     `cast` ...)
                                    (+# sc1 1)
                                    (+# sc2 1);
                                True -> (# sc, I# sc2 #)
                              }; } in
                        let { (# ipv71, ipv72 #) ~ _ <- $s$wa (ipv69 `cast` ...) 0 0 } in
                        let { I# dt48 ~ _ <- ipv72 } in
                        let { (# ipv73, ipv74 #) ~ _
                        <- unsafeFreezeArray# ipv70 (ipv71 `cast` ...)
                        } in
                        (# ipv73 `cast` ..., Vector 0 dt48 ipv74 #))
                } in
                let { Vectors ipv69 ipv70 ipv71 ipv72 ~ _
                <- runSTRep
                     ((\ @ s ->
                         let { Vector ww5 ww6 ww7 ~ _
                         <- runSTRep
                              (\ @ s1 s2 ->
                                 let { (# ipv69, ipv70 #) ~ _
                                 <- newArray# ww2 (uninitialised) (s2 `cast` ...)
                                 } in
                                 letrec {
                                   $s$wa
                                   $s$wa =
                                     \ sc sc1 sc2 ->
                                       case >=# sc1 ww2 of _ {
                                         False ->
                                           $s$wa
                                             ((writeArray#
                                                 ipv70
                                                 sc2
                                                 (runSTRep
                                                    (\ @ s3 s4 ->
                                                       let { (# ipv71 #) ~ _
                                                       <- indexArray# ww3 (+# ww1 sc1)
                                                       } in
                                                       let { Vector ipv72 ipv73 ipv74 ~ _
                                                       <- ipv71 `cast` ...
                                                       } in
                                                       let { (# ipv75, ipv76 #) ~ _
                                                       <- newByteArray# (*# ipv73 8) (s4 `cast` ...)
                                                       } in
                                                       letrec {
                                                         $s$wa1
                                                         $s$wa1 =
                                                           \ sc3 sc4 sc5 ->
                                                             case >=# sc4 ipv73 of _ {
                                                               False ->
                                                                 let { __DEFAULT ~ wild22
                                                                 <- indexIntArray#
                                                                      ipv74 (+# ipv72 sc4)
                                                                 } in
                                                                 $s$wa1
                                                                   ((writeIntArray#
                                                                       ipv76
                                                                       sc5
                                                                       wild22
                                                                       (sc3 `cast` ...))
                                                                    `cast` ...)
                                                                   (+# sc4 1)
                                                                   (+# sc5 1);
                                                               True -> (# sc3, I# sc5 #)
                                                             }; } in
                                                       let { (# ipv77, ipv78 #) ~ _
                                                       <- $s$wa1 (ipv75 `cast` ...) 0 0
                                                       } in
                                                       let { I# dt48 ~ dt47 <- ipv78 } in
                                                       let { (# ipv79, ipv80 #) ~ _
                                                       <- unsafeFreezeByteArray#
                                                            (ipv76 `cast` ...) ipv77
                                                       } in
                                                       (# ipv79 `cast` ...,
                                                          (ByteArray ipv80, lvl7, dt47) #)))
                                                 (sc `cast` ...))
                                              `cast` ...)
                                             (+# sc1 1)
                                             (+# sc2 1);
                                         True -> (# sc, I# sc2 #)
                                       }; } in
                                 let { (# ipv71, ipv72 #) ~ _ <- $s$wa (ipv69 `cast` ...) 0 0 } in
                                 let { I# dt48 ~ _ <- ipv72 } in
                                 let { (# ipv73, ipv74 #) ~ _
                                 <- unsafeFreezeArray# ipv70 (ipv71 `cast` ...)
                                 } in
                                 (# ipv73 `cast` ..., Vector 0 dt48 ipv74 #))
                         } in
                         (\ s1 ->
                            let { (# ipv69, ipv70 #) ~ _ <- newArrayArray# ww2 s1 } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 sc3 ->
                                  case ># sc2 0 of _ {
                                    False -> (# sc, () #);
                                    True ->
                                      case >=# sc3 ww2 of _ {
                                        False ->
                                          let { (ba, ds, ds8) ~ _
                                          <- runSTRep
                                               (\ @ s2 s3 ->
                                                  let { (# ipv71 #) ~ _
                                                  <- indexArray# ww3 (+# ww1 sc3)
                                                  } in
                                                  let { Vector ipv72 ipv73 ipv74 ~ _
                                                  <- ipv71 `cast` ...
                                                  } in
                                                  let { (# ipv75, ipv76 #) ~ _
                                                  <- newByteArray# (*# ipv73 8) (s3 `cast` ...)
                                                  } in
                                                  letrec {
                                                    $s$wa1
                                                    $s$wa1 =
                                                      \ sc4 sc5 sc6 ->
                                                        case >=# sc5 ipv73 of _ {
                                                          False ->
                                                            let { __DEFAULT ~ wild23
                                                            <- indexIntArray# ipv74 (+# ipv72 sc5)
                                                            } in
                                                            $s$wa1
                                                              ((writeIntArray#
                                                                  ipv76 sc6 wild23 (sc4 `cast` ...))
                                                               `cast` ...)
                                                              (+# sc5 1)
                                                              (+# sc6 1);
                                                          True -> (# sc4, I# sc6 #)
                                                        }; } in
                                                  let { (# ipv77, ipv78 #) ~ _
                                                  <- $s$wa1 (ipv75 `cast` ...) 0 0
                                                  } in
                                                  let { I# dt48 ~ dt47 <- ipv78 } in
                                                  let { (# ipv79, ipv80 #) ~ _
                                                  <- unsafeFreezeByteArray# (ipv76 `cast` ...) ipv77
                                                  } in
                                                  (# ipv79 `cast` ...,
                                                     (ByteArray ipv80, lvl7, dt47) #))
                                          } in
                                          let { ByteArray ba# ~ _ <- ba } in
                                          let { __DEFAULT ~ s'#
                                          <- writeByteArrayArray# ipv70 sc1 ba# sc
                                          } in
                                          $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                        True -> (# sc, () #)
                                      }
                                  }; } in
                            let { (# ipv71, ipv72 #) ~ _ <- $s$wa ipv69 0 ww2 0 } in
                            let { (# ipv73, ipv74 #) ~ _
                            <- unsafeFreezeArrayArray# ipv70 ipv71
                            } in
                            (# ipv73,
                               let { (baStarts, ds9, ds10) ~ _
                               <- runSTRep
                                    (\ @ s2 s3 ->
                                       let { (# ipv75, ipv76 #) ~ _
                                       <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                       } in
                                       letrec {
                                         $s$wa1
                                         $s$wa1 =
                                           \ sc sc1 sc2 ->
                                             case >=# sc1 ww6 of _ {
                                               False ->
                                                 let { (# ipv77 #) ~ _
                                                 <- indexArray# ww7 (+# ww5 sc1)
                                                 } in
                                                 let { (a28, b1, c1) ~ _ <- ipv77 } in
                                                 let { I# x# ~ _ <- b1 } in
                                                 $s$wa1
                                                   ((writeIntArray# ipv76 sc2 x# (sc `cast` ...))
                                                    `cast` ...)
                                                   (+# sc1 1)
                                                   (+# sc2 1);
                                               True -> (# sc, I# sc2 #)
                                             }; } in
                                       let { (# ipv77, ipv78 #) ~ _
                                       <- $s$wa1 (ipv75 `cast` ...) 0 0
                                       } in
                                       let { I# dt48 ~ dt47 <- ipv78 } in
                                       let { (# ipv79, ipv80 #) ~ _
                                       <- unsafeFreezeByteArray# (ipv76 `cast` ...) ipv77
                                       } in
                                       (# ipv79 `cast` ..., (ByteArray ipv80, lvl7, dt47) #))
                               } in
                               let { ByteArray dt48 ~ _ <- baStarts } in
                               let { (baLens, ds11, ds12) ~ _
                               <- runSTRep
                                    (\ @ s2 s3 ->
                                       let { (# ipv75, ipv76 #) ~ _
                                       <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                       } in
                                       letrec {
                                         $s$wa1
                                         $s$wa1 =
                                           \ sc sc1 sc2 ->
                                             case >=# sc1 ww6 of _ {
                                               False ->
                                                 let { (# ipv77 #) ~ _
                                                 <- indexArray# ww7 (+# ww5 sc1)
                                                 } in
                                                 let { (a28, b1, c1) ~ _ <- ipv77 } in
                                                 let { I# x# ~ _ <- c1 } in
                                                 $s$wa1
                                                   ((writeIntArray# ipv76 sc2 x# (sc `cast` ...))
                                                    `cast` ...)
                                                   (+# sc1 1)
                                                   (+# sc2 1);
                                               True -> (# sc, I# sc2 #)
                                             }; } in
                                       let { (# ipv77, ipv78 #) ~ _
                                       <- $s$wa1 (ipv75 `cast` ...) 0 0
                                       } in
                                       let { I# dt50 ~ dt49 <- ipv78 } in
                                       let { (# ipv79, ipv80 #) ~ _
                                       <- unsafeFreezeByteArray# (ipv76 `cast` ...) ipv77
                                       } in
                                       (# ipv79 `cast` ..., (ByteArray ipv80, lvl7, dt49) #))
                               } in
                               let { ByteArray dt50 ~ _ <- baLens } in
                               Vectors ww2 dt48 dt50 ipv74 #))
                         `cast` ...)
                      `cast` ...)
                } in
                let { UPVSegd ipv73 ipv74 ipv75 ipv76 ipv77 ipv78 ~ _ <- ipv65 } in
                let { Vector ipv79 ipv80 ipv81 ~ _ <- yarr } in
                let { Vector ww5 ww6 ww7 ~ _
                <- runSTRep
                     (\ @ s s1 ->
                        let { (# ipv82, ipv83 #) ~ _
                        <- newArray# ipv80 (uninitialised) (s1 `cast` ...)
                        } in
                        letrec {
                          $s$wa
                          $s$wa =
                            \ sc sc1 sc2 ->
                              case >=# sc1 ipv80 of _ {
                                False ->
                                  let { (# ipv84 #) ~ _ <- indexArray# ipv81 (+# ipv79 sc1) } in
                                  $s$wa
                                    ((writeArray#
                                        ipv83
                                        sc2
                                        (let { PNested ds9 ds10 segd3 ds11 ~ _
                                         <- ipv84 `cast` ...
                                         } in
                                         let { UPSegd dt47 dt48 dt49 dt50 dt51 dt52 dt53 ds12 ~ _
                                         <- segd3
                                         } in
                                         (Vector dt47 dt48 dt49) `cast` ...)
                                        (sc `cast` ...))
                                     `cast` ...)
                                    (+# sc1 1)
                                    (+# sc2 1);
                                True -> (# sc, I# sc2 #)
                              }; } in
                        let { (# ipv84, ipv85 #) ~ _ <- $s$wa (ipv82 `cast` ...) 0 0 } in
                        let { I# dt48 ~ _ <- ipv85 } in
                        let { (# ipv86, ipv87 #) ~ _
                        <- unsafeFreezeArray# ipv83 (ipv84 `cast` ...)
                        } in
                        (# ipv86 `cast` ..., Vector 0 dt48 ipv87 #))
                } in
                let { Vectors ipv82 ipv83 ipv84 ipv85 ~ _
                <- runSTRep
                     ((\ @ s ->
                         let { Vector ww9 ww10 ww11 ~ _
                         <- runSTRep
                              (\ @ s1 s2 ->
                                 let { (# ipv82, ipv83 #) ~ _
                                 <- newArray# ww6 (uninitialised) (s2 `cast` ...)
                                 } in
                                 letrec {
                                   $s$wa
                                   $s$wa =
                                     \ sc sc1 sc2 ->
                                       case >=# sc1 ww6 of _ {
                                         False ->
                                           $s$wa
                                             ((writeArray#
                                                 ipv83
                                                 sc2
                                                 (runSTRep
                                                    (\ @ s3 s4 ->
                                                       let { (# ipv84 #) ~ _
                                                       <- indexArray# ww7 (+# ww5 sc1)
                                                       } in
                                                       let { Vector ipv85 ipv86 ipv87 ~ _
                                                       <- ipv84 `cast` ...
                                                       } in
                                                       let { (# ipv88, ipv89 #) ~ _
                                                       <- newByteArray# (*# ipv86 8) (s4 `cast` ...)
                                                       } in
                                                       letrec {
                                                         $s$wa1
                                                         $s$wa1 =
                                                           \ sc3 sc4 sc5 ->
                                                             case >=# sc4 ipv86 of _ {
                                                               False ->
                                                                 let { __DEFAULT ~ wild22
                                                                 <- indexIntArray#
                                                                      ipv87 (+# ipv85 sc4)
                                                                 } in
                                                                 $s$wa1
                                                                   ((writeIntArray#
                                                                       ipv89
                                                                       sc5
                                                                       wild22
                                                                       (sc3 `cast` ...))
                                                                    `cast` ...)
                                                                   (+# sc4 1)
                                                                   (+# sc5 1);
                                                               True -> (# sc3, I# sc5 #)
                                                             }; } in
                                                       let { (# ipv90, ipv91 #) ~ _
                                                       <- $s$wa1 (ipv88 `cast` ...) 0 0
                                                       } in
                                                       let { I# dt48 ~ dt47 <- ipv91 } in
                                                       let { (# ipv92, ipv93 #) ~ _
                                                       <- unsafeFreezeByteArray#
                                                            (ipv89 `cast` ...) ipv90
                                                       } in
                                                       (# ipv92 `cast` ...,
                                                          (ByteArray ipv93, lvl7, dt47) #)))
                                                 (sc `cast` ...))
                                              `cast` ...)
                                             (+# sc1 1)
                                             (+# sc2 1);
                                         True -> (# sc, I# sc2 #)
                                       }; } in
                                 let { (# ipv84, ipv85 #) ~ _ <- $s$wa (ipv82 `cast` ...) 0 0 } in
                                 let { I# dt48 ~ _ <- ipv85 } in
                                 let { (# ipv86, ipv87 #) ~ _
                                 <- unsafeFreezeArray# ipv83 (ipv84 `cast` ...)
                                 } in
                                 (# ipv86 `cast` ..., Vector 0 dt48 ipv87 #))
                         } in
                         (\ s1 ->
                            let { (# ipv82, ipv83 #) ~ _ <- newArrayArray# ww6 s1 } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 sc3 ->
                                  case ># sc2 0 of _ {
                                    False -> (# sc, () #);
                                    True ->
                                      case >=# sc3 ww6 of _ {
                                        False ->
                                          let { (ba, ds, ds8) ~ _
                                          <- runSTRep
                                               (\ @ s2 s3 ->
                                                  let { (# ipv84 #) ~ _
                                                  <- indexArray# ww7 (+# ww5 sc3)
                                                  } in
                                                  let { Vector ipv85 ipv86 ipv87 ~ _
                                                  <- ipv84 `cast` ...
                                                  } in
                                                  let { (# ipv88, ipv89 #) ~ _
                                                  <- newByteArray# (*# ipv86 8) (s3 `cast` ...)
                                                  } in
                                                  letrec {
                                                    $s$wa1
                                                    $s$wa1 =
                                                      \ sc4 sc5 sc6 ->
                                                        case >=# sc5 ipv86 of _ {
                                                          False ->
                                                            let { __DEFAULT ~ wild23
                                                            <- indexIntArray# ipv87 (+# ipv85 sc5)
                                                            } in
                                                            $s$wa1
                                                              ((writeIntArray#
                                                                  ipv89 sc6 wild23 (sc4 `cast` ...))
                                                               `cast` ...)
                                                              (+# sc5 1)
                                                              (+# sc6 1);
                                                          True -> (# sc4, I# sc6 #)
                                                        }; } in
                                                  let { (# ipv90, ipv91 #) ~ _
                                                  <- $s$wa1 (ipv88 `cast` ...) 0 0
                                                  } in
                                                  let { I# dt48 ~ dt47 <- ipv91 } in
                                                  let { (# ipv92, ipv93 #) ~ _
                                                  <- unsafeFreezeByteArray# (ipv89 `cast` ...) ipv90
                                                  } in
                                                  (# ipv92 `cast` ...,
                                                     (ByteArray ipv93, lvl7, dt47) #))
                                          } in
                                          let { ByteArray ba# ~ _ <- ba } in
                                          let { __DEFAULT ~ s'#
                                          <- writeByteArrayArray# ipv83 sc1 ba# sc
                                          } in
                                          $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                        True -> (# sc, () #)
                                      }
                                  }; } in
                            let { (# ipv84, ipv85 #) ~ _ <- $s$wa ipv82 0 ww6 0 } in
                            let { (# ipv86, ipv87 #) ~ _
                            <- unsafeFreezeArrayArray# ipv83 ipv84
                            } in
                            (# ipv86,
                               let { (baStarts, ds9, ds10) ~ _
                               <- runSTRep
                                    (\ @ s2 s3 ->
                                       let { (# ipv88, ipv89 #) ~ _
                                       <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                       } in
                                       letrec {
                                         $s$wa1
                                         $s$wa1 =
                                           \ sc sc1 sc2 ->
                                             case >=# sc1 ww10 of _ {
                                               False ->
                                                 let { (# ipv90 #) ~ _
                                                 <- indexArray# ww11 (+# ww9 sc1)
                                                 } in
                                                 let { (a28, b1, c1) ~ _ <- ipv90 } in
                                                 let { I# x# ~ _ <- b1 } in
                                                 $s$wa1
                                                   ((writeIntArray# ipv89 sc2 x# (sc `cast` ...))
                                                    `cast` ...)
                                                   (+# sc1 1)
                                                   (+# sc2 1);
                                               True -> (# sc, I# sc2 #)
                                             }; } in
                                       let { (# ipv90, ipv91 #) ~ _
                                       <- $s$wa1 (ipv88 `cast` ...) 0 0
                                       } in
                                       let { I# dt48 ~ dt47 <- ipv91 } in
                                       let { (# ipv92, ipv93 #) ~ _
                                       <- unsafeFreezeByteArray# (ipv89 `cast` ...) ipv90
                                       } in
                                       (# ipv92 `cast` ..., (ByteArray ipv93, lvl7, dt47) #))
                               } in
                               let { ByteArray dt48 ~ _ <- baStarts } in
                               let { (baLens, ds11, ds12) ~ _
                               <- runSTRep
                                    (\ @ s2 s3 ->
                                       let { (# ipv88, ipv89 #) ~ _
                                       <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                       } in
                                       letrec {
                                         $s$wa1
                                         $s$wa1 =
                                           \ sc sc1 sc2 ->
                                             case >=# sc1 ww10 of _ {
                                               False ->
                                                 let { (# ipv90 #) ~ _
                                                 <- indexArray# ww11 (+# ww9 sc1)
                                                 } in
                                                 let { (a28, b1, c1) ~ _ <- ipv90 } in
                                                 let { I# x# ~ _ <- c1 } in
                                                 $s$wa1
                                                   ((writeIntArray# ipv89 sc2 x# (sc `cast` ...))
                                                    `cast` ...)
                                                   (+# sc1 1)
                                                   (+# sc2 1);
                                               True -> (# sc, I# sc2 #)
                                             }; } in
                                       let { (# ipv90, ipv91 #) ~ _
                                       <- $s$wa1 (ipv88 `cast` ...) 0 0
                                       } in
                                       let { I# dt50 ~ dt49 <- ipv91 } in
                                       let { (# ipv92, ipv93 #) ~ _
                                       <- unsafeFreezeByteArray# (ipv89 `cast` ...) ipv90
                                       } in
                                       (# ipv92 `cast` ..., (ByteArray ipv93, lvl7, dt49) #))
                               } in
                               let { ByteArray dt50 ~ _ <- baLens } in
                               Vectors ww6 dt48 dt50 ipv87 #))
                         `cast` ...)
                      `cast` ...)
                } in
                let { UPSegd dt47 dt48 dt49 dt50 dt51 dt52 dt53 ds7 ~ _
                <- segd'1
                } in
                let { DVector ipv86 ipv87 ipv88 ipv89 ipv90 ipv91 ~ nt13
                <- (imapD'
                      lvl70
                      $dDT1
                      lvl71
                      wild
                      (\ _ x ->
                         let { (x5, y) ~ _ <- x } in
                         let { (x6, y1) ~ _ <- x5 } in
                         let { USegd dt54 dt55 dt56 dt57 dt58 dt59 dt60 ~ _ <- x6 } in
                         let { I# ipv86 ~ _ <- y1 } in
                         let { I# ipv87 ~ _ <- y } in
                         let { UPSSegd dt61 dt62 dt63 dt64 dt65 dt66 dt67 dt68 dt69 dt70
                                       ds8 ~ _
                         <- ipv76
                         } in
                         let { Vector ipv88 ipv89 ipv90 ~ _ <- dt63 `cast` ... } in
                         let { Vector ipv91 ipv92 ipv93 ~ _ <- dt62 `cast` ... } in
                         let { Vector ipv94 ipv95 ipv96 ~ _ <- dt36 `cast` ... } in
                         let { Vector ipv97 ipv98 ipv99 ~ _ <- ipv74 `cast` ... } in
                         let { Vector ipv100 ipv101 ipv102 ~ _ <- vsegids4 `cast` ... } in
                         runSTRep
                           (\ @ s s1 ->
                              let { (# ipv103, ipv104 #) ~ _
                              <- newByteArray# (*# dt60 8) (s1 `cast` ...)
                              } in
                              letrec {
                                $s$wa
                                $s$wa =
                                  \ sc sc1 sc2 sc3 sc4 sc5 sc6 sc7 sc8 ->
                                    case sc3 of ds10 {
                                      __DEFAULT ->
                                        case sc7 of ds11 {
                                          __DEFAULT ->
                                            case sc4 of wild25 {
                                              __DEFAULT ->
                                                let { __DEFAULT ~ wild26
                                                <- indexIntArray# ipv83 sc1
                                                } in
                                                let { __DEFAULT ~ wild27
                                                <- indexByteArrayArray# ipv85 sc1
                                                } in
                                                let { __DEFAULT ~ wild28
                                                <- indexIntArray# wild27 (+# wild26 (+# sc2 sc5))
                                                } in
                                                $s$wa
                                                  ((writeIntArray#
                                                      ipv104 sc8 wild28 (sc `cast` ...))
                                                   `cast` ...)
                                                  sc1
                                                  sc2
                                                  (-# ds10 1)
                                                  (-# wild25 1)
                                                  (+# sc5 1)
                                                  sc6
                                                  ds11
                                                  (+# sc8 1);
                                              0 ->
                                                let {
                                                  i1
                                                  i1 = +# sc6 1 } in
                                                let { __DEFAULT ~ wild26
                                                <- indexIntArray# ipv102 (+# ipv100 i1)
                                                } in
                                                let { __DEFAULT ~ wild27
                                                <- indexIntArray# ipv96 (+# ipv94 wild26)
                                                } in
                                                let { __DEFAULT ~ wild28
                                                <- indexIntArray# dt33 (+# dt31 wild26)
                                                } in
                                                let { __DEFAULT ~ wild29
                                                <- indexIntArray# dt29 (+# dt27 wild26)
                                                } in
                                                $s$wa sc wild27 wild28 ds10 wild29 0 i1 0 sc8
                                            };
                                          0 ->
                                            case sc4 of wild25 {
                                              __DEFAULT ->
                                                let { __DEFAULT ~ wild26
                                                <- indexIntArray# ipv70 sc1
                                                } in
                                                let { __DEFAULT ~ wild27
                                                <- indexByteArrayArray# ipv72 sc1
                                                } in
                                                let { __DEFAULT ~ wild28
                                                <- indexIntArray# wild27 (+# wild26 (+# sc2 sc5))
                                                } in
                                                $s$wa
                                                  ((writeIntArray#
                                                      ipv104 sc8 wild28 (sc `cast` ...))
                                                   `cast` ...)
                                                  sc1
                                                  sc2
                                                  (-# ds10 1)
                                                  (-# wild25 1)
                                                  (+# sc5 1)
                                                  sc6
                                                  0
                                                  (+# sc8 1);
                                              0 ->
                                                let { __DEFAULT ~ wild26
                                                <- indexIntArray# ipv99 (+# ipv97 sc6)
                                                } in
                                                let { __DEFAULT ~ wild27
                                                <- indexIntArray# ipv90 (+# ipv88 wild26)
                                                } in
                                                let { __DEFAULT ~ wild28
                                                <- indexIntArray# ipv93 (+# ipv91 wild26)
                                                } in
                                                let { __DEFAULT ~ wild29
                                                <- indexIntArray# dt66 (+# dt64 wild26)
                                                } in
                                                $s$wa sc wild27 wild28 ds10 wild29 0 sc6 1 sc8
                                            }
                                        };
                                      0 -> (# sc, I# sc8 #)
                                    }; } in
                              case dt60 of wild25 {
                                __DEFAULT ->
                                  let { __DEFAULT ~ wild26
                                  <- indexIntArray# ipv102 (+# ipv100 ipv86)
                                  } in
                                  let { __DEFAULT ~ wild27
                                  <- indexIntArray# dt29 (+# dt27 wild26)
                                  } in
                                  case <# ipv87 wild27 of _ {
                                    False ->
                                      let { __DEFAULT ~ wild29
                                      <- indexIntArray# ipv99 (+# ipv97 ipv86)
                                      } in
                                      let { __DEFAULT ~ wild30
                                      <- indexIntArray# ipv90 (+# ipv88 wild29)
                                      } in
                                      let { __DEFAULT ~ wild31
                                      <- indexIntArray# ipv93 (+# ipv91 wild29)
                                      } in
                                      let {
                                        i1
                                        i1 = -# ipv87 wild27 } in
                                      let { __DEFAULT ~ wild32
                                      <- indexIntArray# dt66 (+# dt64 wild29)
                                      } in
                                      let { (# ipv105, ipv106 #) ~ _
                                      <- $s$wa
                                           (ipv103 `cast` ...)
                                           wild30
                                           wild31
                                           wild25
                                           (-# wild32 i1)
                                           i1
                                           ipv86
                                           1
                                           0
                                      } in
                                      let { I# dt72 ~ _ <- ipv106 } in
                                      let { (# ipv107, ipv108 #) ~ _
                                      <- unsafeFreezeByteArray# ipv104 (ipv105 `cast` ...)
                                      } in
                                      (# ipv107 `cast` ..., (Vector 0 dt72 ipv108) `cast` ... #);
                                    True ->
                                      let { __DEFAULT ~ wild29
                                      <- indexIntArray# ipv96 (+# ipv94 wild26)
                                      } in
                                      let { __DEFAULT ~ wild30
                                      <- indexIntArray# dt33 (+# dt31 wild26)
                                      } in
                                      let { (# ipv105, ipv106 #) ~ _
                                      <- $s$wa
                                           (ipv103 `cast` ...)
                                           wild29
                                           wild30
                                           wild25
                                           (-# wild27 ipv87)
                                           ipv87
                                           ipv86
                                           0
                                           0
                                      } in
                                      let { I# dt72 ~ _ <- ipv106 } in
                                      let { (# ipv107, ipv108 #) ~ _
                                      <- unsafeFreezeByteArray# ipv104 (ipv105 `cast` ...)
                                      } in
                                      (# ipv107 `cast` ..., (Vector 0 dt72 ipv108) `cast` ... #)
                                  };
                                0 ->
                                  let { (# ipv105, ipv106 #) ~ _
                                  <- $s$wa (ipv103 `cast` ...) 0 0 0 0 0 0 0 0
                                  } in
                                  let { I# dt72 ~ _ <- ipv106 } in
                                  let { (# ipv107, ipv108 #) ~ _
                                  <- unsafeFreezeByteArray# ipv104 (ipv105 `cast` ...)
                                  } in
                                  (# ipv107 `cast` ..., (Vector 0 dt72 ipv108) `cast` ... #)
                              }))
                      ds7)
                   `cast` ...
                } in
                let { Vector dt55 dt56 dt57 ~ _
                <- (runSTRep
                      (\ @ s s1 ->
                         let { (di, n) ~ _
                         <- scanD
                              $fDTInt
                              lvl69
                              wild
                              $fNumInt_$c+
                              lvl7
                              ((DInt ipv86 ipv87 ipv88) `cast` ...)
                         } in
                         let { DInt ipv92 ipv93 ipv94 ~ nt14 <- di `cast` ... } in
                         let { I# ipv95 ~ n1 <- n } in
                         case >=# ipv95 0 of _ {
                           False -> case lvl67 ipv95 of wild23 { };
                           True ->
                             let { (# ipv96, ipv97 #) ~ _
                             <- newByteArray# (*# ipv95 8) (s1 `cast` ...)
                             } in
                             let {
                               nt15
                               nt15 = DProd (nt14 `cast` ...) (nt13 `cast` ...) } in
                             let { (# ipv98, ipv99 #) ~ _
                             <- ($wa1
                                   dt6
                                   ds1
                                   ds2
                                   (++
                                      $fShowComp2
                                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                   (WorkCopy n1)
                                   ((\ i s2 ->
                                       let { (# ipv98, ipv99 #) ~ _
                                       <- ((((myD lvl68 (nt15 `cast` ...)) `cast` ...) i)
                                           `cast` ...)
                                            s2
                                       } in
                                       let { (x, y) ~ _ <- ipv99 } in
                                       let { I# ipv100 ~ _ <- x } in
                                       let { Vector ipv101 ipv102 ipv103 ~ _ <- y `cast` ... } in
                                       (# copyByteArray#
                                            ipv103
                                            (*# ipv101 8)
                                            ipv97
                                            (*# ipv100 8)
                                            (*# ipv102 8)
                                            (ipv98 `cast` ...),
                                          () #)
                                       `cast` ...)
                                    `cast` ...)
                                   (ipv96 `cast` ...))
                                `cast` ...
                             } in
                             let { (# ipv100, ipv101 #) ~ _
                             <- unsafeFreezeByteArray# ipv97 (ipv98 `cast` ...)
                             } in
                             (# ipv100 `cast` ..., (Vector 0 ipv95 ipv101) `cast` ... #)
                         }))
                   `cast` ...
                } in
                let { __DEFAULT ~ wild21 <- quotInt# dt56 dt6 } in
                let { __DEFAULT ~ wild22 <- remInt# dt56 dt6 } in
                let { DProd dx4 dy4 ~ _
                <- (generateD
                      lvl63
                      lvl66
                      wild
                      (\ i ->
                         let {
                           ys
                           ys =
                             let { I# x5 ~ _ <- i } in
                             let {
                               $j
                               $j =
                                 \ y ->
                                   let {
                                     $j1
                                     $j1 =
                                       \ dt58 ->
                                         runSTRep
                                           (\ @ s s1 ->
                                              let { (# ipv92, ipv93 #) ~ _
                                              <- newByteArray# (*# (+# 1 dt58) 8) (s1 `cast` ...)
                                              } in
                                              let {
                                                a23
                                                a23 = +# dt55 y } in
                                              letrec {
                                                $s$wa
                                                $s$wa =
                                                  \ sc sc1 sc2 sc3 ->
                                                    case >=# sc1 dt58 of _ {
                                                      False ->
                                                        let { __DEFAULT ~ wild25
                                                        <- indexIntArray# dt57 (+# a23 sc1)
                                                        } in
                                                        let {
                                                          x#
                                                          x# = +# sc2 wild25 } in
                                                        $s$wa
                                                          (+# sc 1)
                                                          (+# sc1 1)
                                                          x#
                                                          ((writeIntArray#
                                                              ipv93 sc x# (sc3 `cast` ...))
                                                           `cast` ...);
                                                      True -> (# sc3, I# sc #)
                                                    }; } in
                                              let { (# ipv94, ipv95 #) ~ _
                                              <- $s$wa
                                                   1
                                                   0
                                                   0
                                                   ((writeIntArray# ipv93 0 0 ipv92) `cast` ...)
                                              } in
                                              let { I# dt60 ~ _ <- ipv95 } in
                                              let { (# ipv96, ipv97 #) ~ _
                                              <- unsafeFreezeByteArray# ipv93 (ipv94 `cast` ...)
                                              } in
                                              (# ipv96 `cast` ...,
                                                 (Vector 0 dt60 ipv97) `cast` ... #)) } in
                                   case <# x5 wild22 of _ {
                                     False -> $j1 wild21;
                                     True -> $j1 (+# wild21 1)
                                   } } in
                             case <# x5 wild22 of _ {
                               False -> $j (+# (*# wild21 x5) wild22);
                               True -> $j (*# (+# wild21 1) x5)
                             } } in
                         (let { Vector dt58 dt59 dt60 ~ _ <- ys `cast` ... } in
                          (Vector dt58 (-# dt59 1) dt60) `cast` ...,
                          let { Vector dt58 dt59 dt60 ~ _ <- ys `cast` ... } in
                          let { __DEFAULT ~ wild24
                          <- indexIntArray# dt60 (+# dt58 (-# dt59 1))
                          } in
                          I# wild24)))
                   `cast` ...
                } in
                let { (x5, ds8) ~ _
                <- scanD $fDTInt lvl62 wild $fNumInt_$c+ lvl7 dy4
                } in
                let { DInt ipv92 ipv93 ipv94 ~ nt14 <- x5 `cast` ... } in
                let { DVector ipv95 ipv96 ipv97 ipv98 ipv99 ipv100 ~ nt15
                <- (imapD'
                      lvl57
                      $dDT5
                      lvl59
                      wild
                      lvl60
                      ((DProd (nt14 `cast` ...) dx4) `cast` ...))
                   `cast` ...
                } in
                let { Vector dt59 dt60 dt61 ~ _
                <- (runSTRep
                      (\ @ s s1 ->
                         let { (di, n) ~ _
                         <- scanD
                              $fDTInt
                              lvl56
                              wild
                              $fNumInt_$c+
                              lvl7
                              ((DInt ipv95 ipv96 ipv97) `cast` ...)
                         } in
                         let { DInt ipv101 ipv102 ipv103 ~ nt16 <- di `cast` ... } in
                         let { I# ipv104 ~ n1 <- n } in
                         case >=# ipv104 0 of _ {
                           False -> case lvl54 ipv104 of wild27 { };
                           True ->
                             let { (# ipv105, ipv106 #) ~ _
                             <- newByteArray# (*# ipv104 8) (s1 `cast` ...)
                             } in
                             let {
                               nt17
                               nt17 = DProd (nt16 `cast` ...) (nt15 `cast` ...) } in
                             let { (# ipv107, ipv108 #) ~ _
                             <- ($wa1
                                   dt6
                                   ds1
                                   ds2
                                   (++
                                      $fShowComp2
                                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                   (WorkCopy n1)
                                   ((\ i s2 ->
                                       let { (# ipv107, ipv108 #) ~ _
                                       <- ((((myD lvl55 (nt17 `cast` ...)) `cast` ...) i)
                                           `cast` ...)
                                            s2
                                       } in
                                       let { (x, y) ~ _ <- ipv108 } in
                                       let { I# ipv109 ~ _ <- x } in
                                       let { Vector ipv110 ipv111 ipv112 ~ _ <- y `cast` ... } in
                                       (# copyByteArray#
                                            ipv112
                                            (*# ipv110 8)
                                            ipv106
                                            (*# ipv109 8)
                                            (*# ipv111 8)
                                            (ipv107 `cast` ...),
                                          () #)
                                       `cast` ...)
                                    `cast` ...)
                                   (ipv105 `cast` ...))
                                `cast` ...
                             } in
                             let { (# ipv109, ipv110 #) ~ _
                             <- unsafeFreezeByteArray# ipv106 (ipv107 `cast` ...)
                             } in
                             (# ipv109 `cast` ..., (Vector 0 ipv104 ipv110) `cast` ... #)
                         }))
                   `cast` ...
                } in
                let { I# dt63 ~ _
                <- foldD
                     $fDTInt
                     lvl50
                     wild
                     $fNumInt_$c+
                     (generateD
                        $fDTInt
                        lvl53
                        wild
                        ((\ i ->
                            let { I# x6 ~ _ <- i } in
                            let {
                              $w$j
                              $w$j =
                                \ w4 ->
                                  let {
                                    $w$j1
                                    $w$j1 =
                                      \ w5 ->
                                        let {
                                          a23
                                          a23 = +# dt55 w4 } in
                                        letrec {
                                          $s$wfoldlM'_loop
                                          $s$wfoldlM'_loop =
                                            \ sc sc1 ->
                                              case >=# sc w5 of _ {
                                                False ->
                                                  let { __DEFAULT ~ wild27
                                                  <- indexIntArray# dt57 (+# a23 sc)
                                                  } in
                                                  $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild27);
                                                True -> sc1
                                              }; } in
                                        $s$wfoldlM'_loop 0 0 } in
                                  case <# x6 wild22 of _ {
                                    False -> $w$j1 wild21;
                                    True -> $w$j1 (+# wild21 1)
                                  } } in
                            case <# x6 wild22 of _ {
                              False ->
                                let { __DEFAULT ~ ww8 <- $w$j (+# (*# wild21 x6) wild22) } in
                                (I# ww8) `cast` ...;
                              True ->
                                let { __DEFAULT ~ ww8 <- $w$j (*# (+# wild21 1) x6) } in
                                (I# ww8) `cast` ...
                            })
                         `cast` ...))
                } in
                UPSegd
                  dt55
                  dt56
                  dt57
                  dt59
                  dt60
                  dt61
                  dt63
                  (splitSegdOnElemsD
                     wild (USegd dt55 dt56 dt57 dt59 dt60 dt61 dt63)) } in
            let {
              a23
              a23 =
                let { UPSegd dt47 dt48 dt49 dt50 dt51 dt52 dt53 ds7 ~ _
                <- segd'2
                } in
                let {
                  a24
                  a24 =
                    let { Vector ipv66 ipv67 ipv68 ~ _ <- xarr } in
                    let { Vector ww1 ww2 ww3 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let { (# ipv69, ipv70 #) ~ _
                            <- newArray# ipv67 (uninitialised) (s1 `cast` ...)
                            } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 ->
                                  case >=# sc1 ipv67 of _ {
                                    False ->
                                      let { (# ipv71 #) ~ _ <- indexArray# ipv68 (+# ipv66 sc1) } in
                                      $s$wa
                                        ((writeArray#
                                            ipv70
                                            sc2
                                            (let { PNested ds10 ds11 ds12 ds13 ~ _
                                             <- ipv71 `cast` ...
                                             } in
                                             let { UPVSegd ds14 ds15 ds16 ds17 ds18 ds19 ~ _
                                             <- ds10
                                             } in
                                             let { UPSSegd dt54 dt55 dt56 dt57 dt58 dt59 dt60 dt61
                                                           dt62 dt63 ds20 ~ _
                                             <- ds18
                                             } in
                                             dt56)
                                            (sc `cast` ...))
                                         `cast` ...)
                                        (+# sc1 1)
                                        (+# sc2 1);
                                    True -> (# sc, I# sc2 #)
                                  }; } in
                            let { (# ipv71, ipv72 #) ~ _ <- $s$wa (ipv69 `cast` ...) 0 0 } in
                            let { I# dt55 ~ _ <- ipv72 } in
                            let { (# ipv73, ipv74 #) ~ _
                            <- unsafeFreezeArray# ipv70 (ipv71 `cast` ...)
                            } in
                            (# ipv73 `cast` ..., Vector 0 dt55 ipv74 #))
                    } in
                    let { Vectors dt54 dt55 dt56 dt57 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww5 ww6 ww7 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv69, ipv70 #) ~ _
                                     <- newArray# ww2 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww2 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv70
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv71 #) ~ _
                                                           <- indexArray# ww3 (+# ww1 sc1)
                                                           } in
                                                           let { Vector ipv72 ipv73 ipv74 ~ _
                                                           <- ipv71 `cast` ...
                                                           } in
                                                           let { (# ipv75, ipv76 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv73 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv73 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild23
                                                                     <- indexIntArray#
                                                                          ipv74 (+# ipv72 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv76
                                                                           sc5
                                                                           wild23
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv77, ipv78 #) ~ _
                                                           <- $s$wa1 (ipv75 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt55 ~ dt54 <- ipv78 } in
                                                           let { (# ipv79, ipv80 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv76 `cast` ...) ipv77
                                                           } in
                                                           (# ipv79 `cast` ...,
                                                              (ByteArray ipv80, lvl7, dt54) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv71, ipv72 #) ~ _
                                     <- $s$wa (ipv69 `cast` ...) 0 0
                                     } in
                                     let { I# dt55 ~ _ <- ipv72 } in
                                     let { (# ipv73, ipv74 #) ~ _
                                     <- unsafeFreezeArray# ipv70 (ipv71 `cast` ...)
                                     } in
                                     (# ipv73 `cast` ..., Vector 0 dt55 ipv74 #))
                             } in
                             (\ s1 ->
                                let { (# ipv69, ipv70 #) ~ _ <- newArrayArray# ww2 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww2 of _ {
                                            False ->
                                              let { (ba, ds, ds9) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv71 #) ~ _
                                                      <- indexArray# ww3 (+# ww1 sc3)
                                                      } in
                                                      let { Vector ipv72 ipv73 ipv74 ~ _
                                                      <- ipv71 `cast` ...
                                                      } in
                                                      let { (# ipv75, ipv76 #) ~ _
                                                      <- newByteArray# (*# ipv73 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv73 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild24
                                                                <- indexIntArray#
                                                                     ipv74 (+# ipv72 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv76
                                                                      sc6
                                                                      wild24
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv77, ipv78 #) ~ _
                                                      <- $s$wa1 (ipv75 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt55 ~ dt54 <- ipv78 } in
                                                      let { (# ipv79, ipv80 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv76 `cast` ...) ipv77
                                                      } in
                                                      (# ipv79 `cast` ...,
                                                         (ByteArray ipv80, lvl7, dt54) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv70 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv71, ipv72 #) ~ _ <- $s$wa ipv69 0 ww2 0 } in
                                let { (# ipv73, ipv74 #) ~ _
                                <- unsafeFreezeArrayArray# ipv70 ipv71
                                } in
                                (# ipv73,
                                   let { (baStarts, ds10, ds11) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv75, ipv76 #) ~ _
                                           <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww6 of _ {
                                                   False ->
                                                     let { (# ipv77 #) ~ _
                                                     <- indexArray# ww7 (+# ww5 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv77 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv76 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv77, ipv78 #) ~ _
                                           <- $s$wa1 (ipv75 `cast` ...) 0 0
                                           } in
                                           let { I# dt55 ~ dt54 <- ipv78 } in
                                           let { (# ipv79, ipv80 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv76 `cast` ...) ipv77
                                           } in
                                           (# ipv79 `cast` ..., (ByteArray ipv80, lvl7, dt54) #))
                                   } in
                                   let { ByteArray dt55 ~ _ <- baStarts } in
                                   let { (baLens, ds12, ds13) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv75, ipv76 #) ~ _
                                           <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww6 of _ {
                                                   False ->
                                                     let { (# ipv77 #) ~ _
                                                     <- indexArray# ww7 (+# ww5 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv77 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv76 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv77, ipv78 #) ~ _
                                           <- $s$wa1 (ipv75 `cast` ...) 0 0
                                           } in
                                           let { I# dt57 ~ dt56 <- ipv78 } in
                                           let { (# ipv79, ipv80 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv76 `cast` ...) ipv77
                                           } in
                                           (# ipv79 `cast` ..., (ByteArray ipv80, lvl7, dt56) #))
                                   } in
                                   let { ByteArray dt57 ~ _ <- baLens } in
                                   Vectors ww2 dt55 dt57 ipv74 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let { Vector ipv69 ipv70 ipv71 ~ _ <- xdata } in
                    let { Vector ipv72 ipv73 ipv74 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let { (# ipv72, ipv73 #) ~ _
                            <- newArray# ipv70 (uninitialised) (s1 `cast` ...)
                            } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 ->
                                  case >=# sc1 ipv70 of _ {
                                    False ->
                                      let { (# ipv74 #) ~ _ <- indexArray# ipv71 (+# ipv69 sc1) } in
                                      $s$wa
                                        ((writeArray#
                                            ipv73
                                            sc2
                                            (let { Vector dt58 dt59 dt60 ~ _ <- ipv74 } in I# dt59)
                                            (sc `cast` ...))
                                         `cast` ...)
                                        (+# sc1 1)
                                        (+# sc2 1);
                                    True -> (# sc, I# sc2 #)
                                  }; } in
                            let { (# ipv74, ipv75 #) ~ _ <- $s$wa (ipv72 `cast` ...) 0 0 } in
                            let { I# dt59 ~ _ <- ipv75 } in
                            let { (# ipv76, ipv77 #) ~ _
                            <- unsafeFreezeArray# ipv73 (ipv74 `cast` ...)
                            } in
                            (# ipv76 `cast` ..., Vector 0 dt59 ipv77 #))
                    } in
                    let { Vector ww5 ww6 ww7 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let {
                              $w$j
                              $w$j =
                                \ w4 ->
                                  let {
                                    $j
                                    $j =
                                      \ n# ->
                                        let { (# ipv75, ipv76 #) ~ _
                                        <- newArray# n# (uninitialised) (s1 `cast` ...)
                                        } in
                                        letrec {
                                          $s$wa
                                          $s$wa =
                                            \ sc sc1 sc2 sc3 sc4 sc5 ->
                                              case ># sc2 0 of _ {
                                                False -> (# sc5, I# sc #);
                                                True ->
                                                  case >=# sc3 ipv73 of _ {
                                                    False ->
                                                      let { (# ipv77 #) ~ _
                                                      <- indexArray# ipv74 (+# ipv72 sc3)
                                                      } in
                                                      $s$wa
                                                        (+# sc 1)
                                                        (+# sc1 1)
                                                        (-# sc2 1)
                                                        (+# sc3 1)
                                                        (let { I# x ~ _ <- sc4 } in
                                                         let { I# y ~ _ <- ipv77 } in I# (+# x y))
                                                        ((writeArray#
                                                            ipv76
                                                            sc
                                                            (let { Vector ipv78 ipv79 ipv80 ~ _
                                                             <- runSTRep
                                                                  (\ @ s2 s3 ->
                                                                     let { __DEFAULT ~ wild24
                                                                     <- indexByteArrayArray#
                                                                          dt57 sc1
                                                                     } in
                                                                     let { (# ipv78, ipv79 #) ~ _
                                                                     <- unsafeFreezeByteArray#
                                                                          (wild24 `cast` ...)
                                                                          (s3 `cast` ...)
                                                                     } in
                                                                     let { __DEFAULT ~ wild25
                                                                     <- indexIntArray# dt55 sc1
                                                                     } in
                                                                     let { __DEFAULT ~ wild26
                                                                     <- indexIntArray# dt56 sc1
                                                                     } in
                                                                     (# ipv78 `cast` ...,
                                                                        Vector
                                                                          wild25 wild26 ipv79 #))
                                                             } in
                                                             $wgetsrc
                                                               $fNumInt
                                                               $fUnboxInt
                                                               (runSTRep
                                                                  (\ @ s2 s3 ->
                                                                     let { (# ipv81, ipv82 #) ~ _
                                                                     <- newByteArray#
                                                                          (*# ipv79 8)
                                                                          (s3 `cast` ...)
                                                                     } in
                                                                     letrec {
                                                                       $s$wa1
                                                                       $s$wa1 =
                                                                         \ sc6 sc7 sc8 ->
                                                                           case >=# sc7 ipv79 of _ {
                                                                             False ->
                                                                               let { __DEFAULT ~ wild25
                                                                               <- indexIntArray#
                                                                                    ipv80
                                                                                    (+# ipv78 sc7)
                                                                               } in
                                                                               $s$wa1
                                                                                 ((writeIntArray#
                                                                                     ipv82
                                                                                     sc8
                                                                                     wild25
                                                                                     (sc6
                                                                                      `cast` ...))
                                                                                  `cast` ...)
                                                                                 (+# sc7 1)
                                                                                 (+# sc8 1);
                                                                             True ->
                                                                               (# sc6, I# sc8 #)
                                                                           }; } in
                                                                     let { (# ipv83, ipv84 #) ~ _
                                                                     <- $s$wa1
                                                                          (ipv81 `cast` ...) 0 0
                                                                     } in
                                                                     let { I# dt59 ~ _ <- ipv84 } in
                                                                     let { (# ipv85, ipv86 #) ~ _
                                                                     <- unsafeFreezeByteArray#
                                                                          ipv82 (ipv83 `cast` ...)
                                                                     } in
                                                                     (# ipv85 `cast` ...,
                                                                        (Vector 0 dt59 ipv86)
                                                                        `cast` ... #)))
                                                               sc4)
                                                            (sc5 `cast` ...))
                                                         `cast` ...);
                                                    True -> (# sc5, I# sc #)
                                                  }
                                              }; } in
                                        case ># dt54 0 of _ {
                                          False ->
                                            let { (# ipv77, ipv78 #) ~ _
                                            <- unsafeFreezeArray# ipv76 ipv75
                                            } in
                                            (# ipv77 `cast` ..., Vector 0 0 ipv78 #);
                                          True ->
                                            case >=# 0 ipv73 of _ {
                                              False ->
                                                let { (# ipv77 #) ~ _
                                                <- indexArray# ipv74 ipv72
                                                } in
                                                let { (# ipv78, ipv79 #) ~ _
                                                <- $s$wa
                                                     1
                                                     1
                                                     (-# dt54 1)
                                                     1
                                                     ipv77
                                                     ((writeArray#
                                                         ipv76
                                                         0
                                                         (let { Vector ipv78 ipv79 ipv80 ~ _
                                                          <- runSTRep
                                                               (\ @ s2 s3 ->
                                                                  let { __DEFAULT ~ wild24
                                                                  <- indexByteArrayArray# dt57 0
                                                                  } in
                                                                  let { (# ipv78, ipv79 #) ~ _
                                                                  <- unsafeFreezeByteArray#
                                                                       (wild24 `cast` ...)
                                                                       (s3 `cast` ...)
                                                                  } in
                                                                  let { __DEFAULT ~ wild25
                                                                  <- indexIntArray# dt55 0
                                                                  } in
                                                                  let { __DEFAULT ~ wild26
                                                                  <- indexIntArray# dt56 0
                                                                  } in
                                                                  (# ipv78 `cast` ...,
                                                                     Vector wild25 wild26 ipv79 #))
                                                          } in
                                                          $wgetsrc
                                                            $fNumInt
                                                            $fUnboxInt
                                                            (runSTRep
                                                               (\ @ s2 s3 ->
                                                                  let { (# ipv81, ipv82 #) ~ _
                                                                  <- newByteArray#
                                                                       (*# ipv79 8) (s3 `cast` ...)
                                                                  } in
                                                                  letrec {
                                                                    $s$wa1
                                                                    $s$wa1 =
                                                                      \ sc sc1 sc2 ->
                                                                        case >=# sc1 ipv79 of _ {
                                                                          False ->
                                                                            let { __DEFAULT ~ wild25
                                                                            <- indexIntArray#
                                                                                 ipv80
                                                                                 (+# ipv78 sc1)
                                                                            } in
                                                                            $s$wa1
                                                                              ((writeIntArray#
                                                                                  ipv82
                                                                                  sc2
                                                                                  wild25
                                                                                  (sc `cast` ...))
                                                                               `cast` ...)
                                                                              (+# sc1 1)
                                                                              (+# sc2 1);
                                                                          True -> (# sc, I# sc2 #)
                                                                        }; } in
                                                                  let { (# ipv83, ipv84 #) ~ _
                                                                  <- $s$wa1 (ipv81 `cast` ...) 0 0
                                                                  } in
                                                                  let { I# dt59 ~ _ <- ipv84 } in
                                                                  let { (# ipv85, ipv86 #) ~ _
                                                                  <- unsafeFreezeByteArray#
                                                                       ipv82 (ipv83 `cast` ...)
                                                                  } in
                                                                  (# ipv85 `cast` ...,
                                                                     (Vector 0 dt59 ipv86)
                                                                     `cast` ... #)))
                                                            (I# 0))
                                                         ipv75)
                                                      `cast` ...)
                                                } in
                                                let { I# dt59 ~ _ <- ipv79 } in
                                                let { (# ipv80, ipv81 #) ~ _
                                                <- unsafeFreezeArray# ipv76 (ipv78 `cast` ...)
                                                } in
                                                (# ipv80 `cast` ..., Vector 0 dt59 ipv81 #);
                                              True ->
                                                let { (# ipv77, ipv78 #) ~ _
                                                <- unsafeFreezeArray# ipv76 ipv75
                                                } in
                                                (# ipv77 `cast` ..., Vector 0 0 ipv78 #)
                                            }
                                        } } in
                                  case <=# w4 ipv73 of _ {
                                    False -> $j ipv73;
                                    True -> $j w4
                                  } } in
                            case <=# dt54 0 of _ {
                              False -> $w$j dt54;
                              True -> $w$j 0
                            })
                    } in
                    let { Vectors ipv75 ipv76 ipv77 ipv78 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww9 ww10 ww11 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv75, ipv76 #) ~ _
                                     <- newArray# ww6 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww6 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv76
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv77 #) ~ _
                                                           <- indexArray# ww7 (+# ww5 sc1)
                                                           } in
                                                           let { Vector ipv78 ipv79 ipv80 ~ _
                                                           <- ipv77 `cast` ...
                                                           } in
                                                           let { (# ipv81, ipv82 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv79 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv79 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild24
                                                                     <- indexIntArray#
                                                                          ipv80 (+# ipv78 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv82
                                                                           sc5
                                                                           wild24
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv83, ipv84 #) ~ _
                                                           <- $s$wa1 (ipv81 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt59 ~ dt58 <- ipv84 } in
                                                           let { (# ipv85, ipv86 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv82 `cast` ...) ipv83
                                                           } in
                                                           (# ipv85 `cast` ...,
                                                              (ByteArray ipv86, lvl7, dt58) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv77, ipv78 #) ~ _
                                     <- $s$wa (ipv75 `cast` ...) 0 0
                                     } in
                                     let { I# dt59 ~ _ <- ipv78 } in
                                     let { (# ipv79, ipv80 #) ~ _
                                     <- unsafeFreezeArray# ipv76 (ipv77 `cast` ...)
                                     } in
                                     (# ipv79 `cast` ..., Vector 0 dt59 ipv80 #))
                             } in
                             (\ s1 ->
                                let { (# ipv75, ipv76 #) ~ _ <- newArrayArray# ww6 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww6 of _ {
                                            False ->
                                              let { (ba, ds, ds9) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv77 #) ~ _
                                                      <- indexArray# ww7 (+# ww5 sc3)
                                                      } in
                                                      let { Vector ipv78 ipv79 ipv80 ~ _
                                                      <- ipv77 `cast` ...
                                                      } in
                                                      let { (# ipv81, ipv82 #) ~ _
                                                      <- newByteArray# (*# ipv79 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv79 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild25
                                                                <- indexIntArray#
                                                                     ipv80 (+# ipv78 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv82
                                                                      sc6
                                                                      wild25
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv83, ipv84 #) ~ _
                                                      <- $s$wa1 (ipv81 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt59 ~ dt58 <- ipv84 } in
                                                      let { (# ipv85, ipv86 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv82 `cast` ...) ipv83
                                                      } in
                                                      (# ipv85 `cast` ...,
                                                         (ByteArray ipv86, lvl7, dt58) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv76 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv77, ipv78 #) ~ _ <- $s$wa ipv75 0 ww6 0 } in
                                let { (# ipv79, ipv80 #) ~ _
                                <- unsafeFreezeArrayArray# ipv76 ipv77
                                } in
                                (# ipv79,
                                   let { (baStarts, ds10, ds11) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv81, ipv82 #) ~ _
                                           <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww10 of _ {
                                                   False ->
                                                     let { (# ipv83 #) ~ _
                                                     <- indexArray# ww11 (+# ww9 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv83 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv82 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv83, ipv84 #) ~ _
                                           <- $s$wa1 (ipv81 `cast` ...) 0 0
                                           } in
                                           let { I# dt59 ~ dt58 <- ipv84 } in
                                           let { (# ipv85, ipv86 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv82 `cast` ...) ipv83
                                           } in
                                           (# ipv85 `cast` ..., (ByteArray ipv86, lvl7, dt58) #))
                                   } in
                                   let { ByteArray dt59 ~ _ <- baStarts } in
                                   let { (baLens, ds12, ds13) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv81, ipv82 #) ~ _
                                           <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww10 of _ {
                                                   False ->
                                                     let { (# ipv83 #) ~ _
                                                     <- indexArray# ww11 (+# ww9 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv83 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv82 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv83, ipv84 #) ~ _
                                           <- $s$wa1 (ipv81 `cast` ...) 0 0
                                           } in
                                           let { I# dt61 ~ dt60 <- ipv84 } in
                                           let { (# ipv85, ipv86 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv82 `cast` ...) ipv83
                                           } in
                                           (# ipv85 `cast` ..., (ByteArray ipv86, lvl7, dt60) #))
                                   } in
                                   let { ByteArray dt61 ~ _ <- baLens } in
                                   Vectors ww6 dt59 dt61 ipv80 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let { UPVSegd ipv79 ipv80 ipv81 ipv82 ipv83 ipv84 ~ _ <- ipv65 } in
                    let { Vector ipv85 ipv86 ipv87 ~ _ <- yarr } in
                    let { Vector ww9 ww10 ww11 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let { (# ipv88, ipv89 #) ~ _
                            <- newArray# ipv86 (uninitialised) (s1 `cast` ...)
                            } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 ->
                                  case >=# sc1 ipv86 of _ {
                                    False ->
                                      let { (# ipv90 #) ~ _ <- indexArray# ipv87 (+# ipv85 sc1) } in
                                      $s$wa
                                        ((writeArray#
                                            ipv89
                                            sc2
                                            (let { PNested ds10 ds11 ds12 ds13 ~ _
                                             <- ipv90 `cast` ...
                                             } in
                                             let { UPVSegd ds14 ds15 ds16 ds17 ds18 ds19 ~ _
                                             <- ds10
                                             } in
                                             let { UPSSegd dt58 dt59 dt60 dt61 dt62 dt63 dt64 dt65
                                                           dt66 dt67 ds20 ~ _
                                             <- ds18
                                             } in
                                             dt60)
                                            (sc `cast` ...))
                                         `cast` ...)
                                        (+# sc1 1)
                                        (+# sc2 1);
                                    True -> (# sc, I# sc2 #)
                                  }; } in
                            let { (# ipv90, ipv91 #) ~ _ <- $s$wa (ipv88 `cast` ...) 0 0 } in
                            let { I# dt59 ~ _ <- ipv91 } in
                            let { (# ipv92, ipv93 #) ~ _
                            <- unsafeFreezeArray# ipv89 (ipv90 `cast` ...)
                            } in
                            (# ipv92 `cast` ..., Vector 0 dt59 ipv93 #))
                    } in
                    let { Vectors dt58 dt59 dt60 dt61 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww13 ww14 ww15 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv88, ipv89 #) ~ _
                                     <- newArray# ww10 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww10 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv89
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv90 #) ~ _
                                                           <- indexArray# ww11 (+# ww9 sc1)
                                                           } in
                                                           let { Vector ipv91 ipv92 ipv93 ~ _
                                                           <- ipv90 `cast` ...
                                                           } in
                                                           let { (# ipv94, ipv95 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv92 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv92 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild24
                                                                     <- indexIntArray#
                                                                          ipv93 (+# ipv91 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv95
                                                                           sc5
                                                                           wild24
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv96, ipv97 #) ~ _
                                                           <- $s$wa1 (ipv94 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt59 ~ dt58 <- ipv97 } in
                                                           let { (# ipv98, ipv99 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv95 `cast` ...) ipv96
                                                           } in
                                                           (# ipv98 `cast` ...,
                                                              (ByteArray ipv99, lvl7, dt58) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv90, ipv91 #) ~ _
                                     <- $s$wa (ipv88 `cast` ...) 0 0
                                     } in
                                     let { I# dt59 ~ _ <- ipv91 } in
                                     let { (# ipv92, ipv93 #) ~ _
                                     <- unsafeFreezeArray# ipv89 (ipv90 `cast` ...)
                                     } in
                                     (# ipv92 `cast` ..., Vector 0 dt59 ipv93 #))
                             } in
                             (\ s1 ->
                                let { (# ipv88, ipv89 #) ~ _ <- newArrayArray# ww10 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww10 of _ {
                                            False ->
                                              let { (ba, ds, ds9) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv90 #) ~ _
                                                      <- indexArray# ww11 (+# ww9 sc3)
                                                      } in
                                                      let { Vector ipv91 ipv92 ipv93 ~ _
                                                      <- ipv90 `cast` ...
                                                      } in
                                                      let { (# ipv94, ipv95 #) ~ _
                                                      <- newByteArray# (*# ipv92 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv92 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild25
                                                                <- indexIntArray#
                                                                     ipv93 (+# ipv91 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv95
                                                                      sc6
                                                                      wild25
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv96, ipv97 #) ~ _
                                                      <- $s$wa1 (ipv94 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt59 ~ dt58 <- ipv97 } in
                                                      let { (# ipv98, ipv99 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv95 `cast` ...) ipv96
                                                      } in
                                                      (# ipv98 `cast` ...,
                                                         (ByteArray ipv99, lvl7, dt58) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv89 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv90, ipv91 #) ~ _ <- $s$wa ipv88 0 ww10 0 } in
                                let { (# ipv92, ipv93 #) ~ _
                                <- unsafeFreezeArrayArray# ipv89 ipv90
                                } in
                                (# ipv92,
                                   let { (baStarts, ds10, ds11) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv94, ipv95 #) ~ _
                                           <- newByteArray# (*# ww14 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww14 of _ {
                                                   False ->
                                                     let { (# ipv96 #) ~ _
                                                     <- indexArray# ww15 (+# ww13 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv96 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv95 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv96, ipv97 #) ~ _
                                           <- $s$wa1 (ipv94 `cast` ...) 0 0
                                           } in
                                           let { I# dt59 ~ dt58 <- ipv97 } in
                                           let { (# ipv98, ipv99 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv95 `cast` ...) ipv96
                                           } in
                                           (# ipv98 `cast` ..., (ByteArray ipv99, lvl7, dt58) #))
                                   } in
                                   let { ByteArray dt59 ~ _ <- baStarts } in
                                   let { (baLens, ds12, ds13) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv94, ipv95 #) ~ _
                                           <- newByteArray# (*# ww14 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww14 of _ {
                                                   False ->
                                                     let { (# ipv96 #) ~ _
                                                     <- indexArray# ww15 (+# ww13 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv96 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv95 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv96, ipv97 #) ~ _
                                           <- $s$wa1 (ipv94 `cast` ...) 0 0
                                           } in
                                           let { I# dt61 ~ dt60 <- ipv97 } in
                                           let { (# ipv98, ipv99 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv95 `cast` ...) ipv96
                                           } in
                                           (# ipv98 `cast` ..., (ByteArray ipv99, lvl7, dt60) #))
                                   } in
                                   let { ByteArray dt61 ~ _ <- baLens } in
                                   Vectors ww10 dt59 dt61 ipv93 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let { Vector ipv88 ipv89 ipv90 ~ _ <- ydata } in
                    let { Vector ww13 ww14 ww15 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let {
                              $w$j
                              $w$j =
                                \ w4 ->
                                  let {
                                    $j
                                    $j =
                                      \ n# ->
                                        let { (# ipv91, ipv92 #) ~ _
                                        <- newArray# n# (uninitialised) (s1 `cast` ...)
                                        } in
                                        letrec {
                                          $s$wa
                                          $s$wa =
                                            \ sc sc1 sc2 sc3 sc4 sc5 ->
                                              case ># sc3 0 of _ {
                                                False -> (# sc, I# sc1 #);
                                                True ->
                                                  case >=# sc4 ipv89 of _ {
                                                    False ->
                                                      let { (# ipv93 #) ~ _
                                                      <- indexArray# ipv90 (+# ipv88 sc4)
                                                      } in
                                                      $s$wa
                                                        ((writeArray#
                                                            ipv92
                                                            sc1
                                                            (let { Vector ipv94 ipv95 ipv96 ~ _
                                                             <- runSTRep
                                                                  (\ @ s2 s3 ->
                                                                     let { __DEFAULT ~ wild25
                                                                     <- indexByteArrayArray#
                                                                          dt61 sc2
                                                                     } in
                                                                     let { (# ipv94, ipv95 #) ~ _
                                                                     <- unsafeFreezeByteArray#
                                                                          (wild25 `cast` ...)
                                                                          (s3 `cast` ...)
                                                                     } in
                                                                     let { __DEFAULT ~ wild26
                                                                     <- indexIntArray# dt59 sc2
                                                                     } in
                                                                     let { __DEFAULT ~ wild27
                                                                     <- indexIntArray# dt60 sc2
                                                                     } in
                                                                     (# ipv94 `cast` ...,
                                                                        Vector
                                                                          wild26 wild27 ipv95 #))
                                                             } in
                                                             $wgetsrc
                                                               $fNumInt
                                                               $fUnboxInt
                                                               (runSTRep
                                                                  (\ @ s2 s3 ->
                                                                     let { (# ipv97, ipv98 #) ~ _
                                                                     <- newByteArray#
                                                                          (*# ipv95 8)
                                                                          (s3 `cast` ...)
                                                                     } in
                                                                     letrec {
                                                                       $s$wa1
                                                                       $s$wa1 =
                                                                         \ sc6 sc7 sc8 ->
                                                                           case >=# sc7 ipv95 of _ {
                                                                             False ->
                                                                               let { __DEFAULT ~ wild26
                                                                               <- indexIntArray#
                                                                                    ipv96
                                                                                    (+# ipv94 sc7)
                                                                               } in
                                                                               $s$wa1
                                                                                 ((writeIntArray#
                                                                                     ipv98
                                                                                     sc8
                                                                                     wild26
                                                                                     (sc6
                                                                                      `cast` ...))
                                                                                  `cast` ...)
                                                                                 (+# sc7 1)
                                                                                 (+# sc8 1);
                                                                             True ->
                                                                               (# sc6, I# sc8 #)
                                                                           }; } in
                                                                     let { (# ipv99, ipv100 #) ~ _
                                                                     <- $s$wa1
                                                                          (ipv97 `cast` ...) 0 0
                                                                     } in
                                                                     let { I# dt63 ~ _
                                                                     <- ipv100
                                                                     } in
                                                                     let { (# ipv101, ipv102 #) ~ _
                                                                     <- unsafeFreezeByteArray#
                                                                          ipv98 (ipv99 `cast` ...)
                                                                     } in
                                                                     (# ipv101 `cast` ...,
                                                                        (Vector 0 dt63 ipv102)
                                                                        `cast` ... #)))
                                                               sc5)
                                                            (sc `cast` ...))
                                                         `cast` ...)
                                                        (+# sc1 1)
                                                        (+# sc2 1)
                                                        (-# sc3 1)
                                                        (+# sc4 1)
                                                        (let { I# x ~ _ <- sc5 } in
                                                         let { Vector dt62 dt63 dt64 ~ _
                                                         <- ipv93
                                                         } in
                                                         I# (+# x dt63));
                                                    True -> (# sc, I# sc1 #)
                                                  }
                                              }; } in
                                        let { (# ipv93, ipv94 #) ~ _
                                        <- $s$wa
                                             (ipv91 `cast` ...)
                                             0
                                             0
                                             dt58
                                             0
                                             (letrec {
                                                $s$wfoldlM'_loop
                                                $s$wfoldlM'_loop =
                                                  \ sc sc1 ->
                                                    case >=# sc ipv73 of _ {
                                                      False ->
                                                        let { (# ipv93 #) ~ _
                                                        <- indexArray# ipv74 (+# ipv72 sc)
                                                        } in
                                                        let { I# y ~ _ <- ipv93 } in
                                                        $s$wfoldlM'_loop (+# sc 1) (+# sc1 y);
                                                      True -> sc1
                                                    }; } in
                                              let { __DEFAULT ~ ww12 <- $s$wfoldlM'_loop 0 0 } in
                                              I# ww12)
                                        } in
                                        let { I# dt63 ~ _ <- ipv94 } in
                                        let { (# ipv95, ipv96 #) ~ _
                                        <- unsafeFreezeArray# ipv92 (ipv93 `cast` ...)
                                        } in
                                        (# ipv95 `cast` ..., Vector 0 dt63 ipv96 #) } in
                                  case <=# w4 ipv89 of _ {
                                    False -> $j ipv89;
                                    True -> $j w4
                                  } } in
                            case <=# dt58 0 of _ {
                              False -> $w$j dt58;
                              True -> $w$j 0
                            })
                    } in
                    let { Vectors ipv91 ipv92 ipv93 ipv94 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww17 ww18 ww19 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv91, ipv92 #) ~ _
                                     <- newArray# ww14 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww14 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv92
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv93 #) ~ _
                                                           <- indexArray# ww15 (+# ww13 sc1)
                                                           } in
                                                           let { Vector ipv94 ipv95 ipv96 ~ _
                                                           <- ipv93 `cast` ...
                                                           } in
                                                           let { (# ipv97, ipv98 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv95 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv95 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild25
                                                                     <- indexIntArray#
                                                                          ipv96 (+# ipv94 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv98
                                                                           sc5
                                                                           wild25
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv99, ipv100 #) ~ _
                                                           <- $s$wa1 (ipv97 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt63 ~ dt62 <- ipv100 } in
                                                           let { (# ipv101, ipv102 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv98 `cast` ...) ipv99
                                                           } in
                                                           (# ipv101 `cast` ...,
                                                              (ByteArray ipv102, lvl7, dt62) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv93, ipv94 #) ~ _
                                     <- $s$wa (ipv91 `cast` ...) 0 0
                                     } in
                                     let { I# dt63 ~ _ <- ipv94 } in
                                     let { (# ipv95, ipv96 #) ~ _
                                     <- unsafeFreezeArray# ipv92 (ipv93 `cast` ...)
                                     } in
                                     (# ipv95 `cast` ..., Vector 0 dt63 ipv96 #))
                             } in
                             (\ s1 ->
                                let { (# ipv91, ipv92 #) ~ _ <- newArrayArray# ww14 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww14 of _ {
                                            False ->
                                              let { (ba, ds, ds9) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv93 #) ~ _
                                                      <- indexArray# ww15 (+# ww13 sc3)
                                                      } in
                                                      let { Vector ipv94 ipv95 ipv96 ~ _
                                                      <- ipv93 `cast` ...
                                                      } in
                                                      let { (# ipv97, ipv98 #) ~ _
                                                      <- newByteArray# (*# ipv95 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv95 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild26
                                                                <- indexIntArray#
                                                                     ipv96 (+# ipv94 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv98
                                                                      sc6
                                                                      wild26
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv99, ipv100 #) ~ _
                                                      <- $s$wa1 (ipv97 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt63 ~ dt62 <- ipv100 } in
                                                      let { (# ipv101, ipv102 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv98 `cast` ...) ipv99
                                                      } in
                                                      (# ipv101 `cast` ...,
                                                         (ByteArray ipv102, lvl7, dt62) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv92 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv93, ipv94 #) ~ _ <- $s$wa ipv91 0 ww14 0 } in
                                let { (# ipv95, ipv96 #) ~ _
                                <- unsafeFreezeArrayArray# ipv92 ipv93
                                } in
                                (# ipv95,
                                   let { (baStarts, ds10, ds11) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv97, ipv98 #) ~ _
                                           <- newByteArray# (*# ww18 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww18 of _ {
                                                   False ->
                                                     let { (# ipv99 #) ~ _
                                                     <- indexArray# ww19 (+# ww17 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv99 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv98 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv99, ipv100 #) ~ _
                                           <- $s$wa1 (ipv97 `cast` ...) 0 0
                                           } in
                                           let { I# dt63 ~ dt62 <- ipv100 } in
                                           let { (# ipv101, ipv102 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv98 `cast` ...) ipv99
                                           } in
                                           (# ipv101 `cast` ..., (ByteArray ipv102, lvl7, dt62) #))
                                   } in
                                   let { ByteArray dt63 ~ _ <- baStarts } in
                                   let { (baLens, ds12, ds13) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv97, ipv98 #) ~ _
                                           <- newByteArray# (*# ww18 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww18 of _ {
                                                   False ->
                                                     let { (# ipv99 #) ~ _
                                                     <- indexArray# ww19 (+# ww17 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv99 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv98 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv99, ipv100 #) ~ _
                                           <- $s$wa1 (ipv97 `cast` ...) 0 0
                                           } in
                                           let { I# dt65 ~ dt64 <- ipv100 } in
                                           let { (# ipv101, ipv102 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv98 `cast` ...) ipv99
                                           } in
                                           (# ipv101 `cast` ..., (ByteArray ipv102, lvl7, dt64) #))
                                   } in
                                   let { ByteArray dt65 ~ _ <- baLens } in
                                   Vectors ww14 dt63 dt65 ipv96 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let { UPSegd dt62 dt63 dt64 dt65 dt66 dt67 dt68 ds8 ~ _
                    <- segd'1
                    } in
                    let { DVector ipv95 ipv96 ipv97 ipv98 ipv99 ipv100 ~ nt13
                    <- (imapD'
                          lvl80
                          $dDT1
                          lvl81
                          wild
                          (\ _ x ->
                             let { (x5, y) ~ _ <- x } in
                             let { (x6, y1) ~ _ <- x5 } in
                             let { USegd dt69 dt70 dt71 dt72 dt73 dt74 dt75 ~ _ <- x6 } in
                             let { I# ipv95 ~ _ <- y1 } in
                             let { I# ipv96 ~ _ <- y } in
                             let { UPSSegd dt76 dt77 dt78 dt79 dt80 dt81 dt82 dt83 dt84 dt85
                                           ds9 ~ _
                             <- ipv82
                             } in
                             let { Vector ipv97 ipv98 ipv99 ~ _ <- dt78 `cast` ... } in
                             let { Vector ipv100 ipv101 ipv102 ~ _ <- dt77 `cast` ... } in
                             let { Vector ipv103 ipv104 ipv105 ~ _ <- dt36 `cast` ... } in
                             let { Vector ipv106 ipv107 ipv108 ~ _ <- ipv80 `cast` ... } in
                             let { Vector ipv109 ipv110 ipv111 ~ _ <- vsegids4 `cast` ... } in
                             runSTRep
                               (\ @ s s1 ->
                                  let { (# ipv112, ipv113 #) ~ _
                                  <- newByteArray# (*# dt75 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $s$wa
                                    $s$wa =
                                      \ sc sc1 sc2 sc3 sc4 sc5 sc6 sc7 sc8 ->
                                        case sc3 of ds11 {
                                          __DEFAULT ->
                                            case sc7 of ds12 {
                                              __DEFAULT ->
                                                case sc4 of wild28 {
                                                  __DEFAULT ->
                                                    let { __DEFAULT ~ wild29
                                                    <- indexIntArray# ipv92 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild30
                                                    <- indexByteArrayArray# ipv94 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild31
                                                    <- indexIntArray#
                                                         wild30 (+# wild29 (+# sc2 sc5))
                                                    } in
                                                    $s$wa
                                                      ((writeIntArray#
                                                          ipv113 sc8 wild31 (sc `cast` ...))
                                                       `cast` ...)
                                                      sc1
                                                      sc2
                                                      (-# ds11 1)
                                                      (-# wild28 1)
                                                      (+# sc5 1)
                                                      sc6
                                                      ds12
                                                      (+# sc8 1);
                                                  0 ->
                                                    let {
                                                      i1
                                                      i1 = +# sc6 1 } in
                                                    let { __DEFAULT ~ wild29
                                                    <- indexIntArray# ipv111 (+# ipv109 i1)
                                                    } in
                                                    let { __DEFAULT ~ wild30
                                                    <- indexIntArray# ipv105 (+# ipv103 wild29)
                                                    } in
                                                    let { __DEFAULT ~ wild31
                                                    <- indexIntArray# dt33 (+# dt31 wild29)
                                                    } in
                                                    let { __DEFAULT ~ wild32
                                                    <- indexIntArray# dt29 (+# dt27 wild29)
                                                    } in
                                                    $s$wa sc wild30 wild31 ds11 wild32 0 i1 0 sc8
                                                };
                                              0 ->
                                                case sc4 of wild28 {
                                                  __DEFAULT ->
                                                    let { __DEFAULT ~ wild29
                                                    <- indexIntArray# ipv76 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild30
                                                    <- indexByteArrayArray# ipv78 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild31
                                                    <- indexIntArray#
                                                         wild30 (+# wild29 (+# sc2 sc5))
                                                    } in
                                                    $s$wa
                                                      ((writeIntArray#
                                                          ipv113 sc8 wild31 (sc `cast` ...))
                                                       `cast` ...)
                                                      sc1
                                                      sc2
                                                      (-# ds11 1)
                                                      (-# wild28 1)
                                                      (+# sc5 1)
                                                      sc6
                                                      0
                                                      (+# sc8 1);
                                                  0 ->
                                                    let { __DEFAULT ~ wild29
                                                    <- indexIntArray# ipv108 (+# ipv106 sc6)
                                                    } in
                                                    let { __DEFAULT ~ wild30
                                                    <- indexIntArray# ipv99 (+# ipv97 wild29)
                                                    } in
                                                    let { __DEFAULT ~ wild31
                                                    <- indexIntArray# ipv102 (+# ipv100 wild29)
                                                    } in
                                                    let { __DEFAULT ~ wild32
                                                    <- indexIntArray# dt81 (+# dt79 wild29)
                                                    } in
                                                    $s$wa sc wild30 wild31 ds11 wild32 0 sc6 1 sc8
                                                }
                                            };
                                          0 -> (# sc, I# sc8 #)
                                        }; } in
                                  case dt75 of wild28 {
                                    __DEFAULT ->
                                      let { __DEFAULT ~ wild29
                                      <- indexIntArray# ipv111 (+# ipv109 ipv95)
                                      } in
                                      let { __DEFAULT ~ wild30
                                      <- indexIntArray# dt29 (+# dt27 wild29)
                                      } in
                                      case <# ipv96 wild30 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild32
                                          <- indexIntArray# ipv108 (+# ipv106 ipv95)
                                          } in
                                          let { __DEFAULT ~ wild33
                                          <- indexIntArray# ipv99 (+# ipv97 wild32)
                                          } in
                                          let { __DEFAULT ~ wild34
                                          <- indexIntArray# ipv102 (+# ipv100 wild32)
                                          } in
                                          let {
                                            i1
                                            i1 = -# ipv96 wild30 } in
                                          let { __DEFAULT ~ wild35
                                          <- indexIntArray# dt81 (+# dt79 wild32)
                                          } in
                                          let { (# ipv114, ipv115 #) ~ _
                                          <- $s$wa
                                               (ipv112 `cast` ...)
                                               wild33
                                               wild34
                                               wild28
                                               (-# wild35 i1)
                                               i1
                                               ipv95
                                               1
                                               0
                                          } in
                                          let { I# dt87 ~ _ <- ipv115 } in
                                          let { (# ipv116, ipv117 #) ~ _
                                          <- unsafeFreezeByteArray# ipv113 (ipv114 `cast` ...)
                                          } in
                                          (# ipv116 `cast` ...,
                                             (Vector 0 dt87 ipv117) `cast` ... #);
                                        True ->
                                          let { __DEFAULT ~ wild32
                                          <- indexIntArray# ipv105 (+# ipv103 wild29)
                                          } in
                                          let { __DEFAULT ~ wild33
                                          <- indexIntArray# dt33 (+# dt31 wild29)
                                          } in
                                          let { (# ipv114, ipv115 #) ~ _
                                          <- $s$wa
                                               (ipv112 `cast` ...)
                                               wild32
                                               wild33
                                               wild28
                                               (-# wild30 ipv96)
                                               ipv96
                                               ipv95
                                               0
                                               0
                                          } in
                                          let { I# dt87 ~ _ <- ipv115 } in
                                          let { (# ipv116, ipv117 #) ~ _
                                          <- unsafeFreezeByteArray# ipv113 (ipv114 `cast` ...)
                                          } in
                                          (# ipv116 `cast` ..., (Vector 0 dt87 ipv117) `cast` ... #)
                                      };
                                    0 ->
                                      let { (# ipv114, ipv115 #) ~ _
                                      <- $s$wa (ipv112 `cast` ...) 0 0 0 0 0 0 0 0
                                      } in
                                      let { I# dt87 ~ _ <- ipv115 } in
                                      let { (# ipv116, ipv117 #) ~ _
                                      <- unsafeFreezeByteArray# ipv113 (ipv114 `cast` ...)
                                      } in
                                      (# ipv116 `cast` ..., (Vector 0 dt87 ipv117) `cast` ... #)
                                  }))
                          ds8)
                       `cast` ...
                    } in
                    runSTRep
                      (\ @ s s1 ->
                         let { (di, n) ~ _
                         <- scanD
                              $fDTInt
                              lvl79
                              wild
                              $fNumInt_$c+
                              lvl7
                              ((DInt ipv95 ipv96 ipv97) `cast` ...)
                         } in
                         let { DInt ipv101 ipv102 ipv103 ~ nt14 <- di `cast` ... } in
                         let { I# ipv104 ~ n1 <- n } in
                         case >=# ipv104 0 of _ {
                           False -> case lvl77 ipv104 of wild26 { };
                           True ->
                             let { (# ipv105, ipv106 #) ~ _
                             <- newByteArray# (*# ipv104 8) (s1 `cast` ...)
                             } in
                             let {
                               nt15
                               nt15 = DProd (nt14 `cast` ...) (nt13 `cast` ...) } in
                             let { (# ipv107, ipv108 #) ~ _
                             <- ($wa1
                                   dt6
                                   ds1
                                   ds2
                                   (++
                                      $fShowComp2
                                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                   (WorkCopy n1)
                                   ((\ i s2 ->
                                       let { (# ipv107, ipv108 #) ~ _
                                       <- ((((myD lvl78 (nt15 `cast` ...)) `cast` ...) i)
                                           `cast` ...)
                                            s2
                                       } in
                                       let { (x, y) ~ _ <- ipv108 } in
                                       let { I# ipv109 ~ _ <- x } in
                                       let { Vector ipv110 ipv111 ipv112 ~ _ <- y `cast` ... } in
                                       (# copyByteArray#
                                            ipv112
                                            (*# ipv110 8)
                                            ipv106
                                            (*# ipv109 8)
                                            (*# ipv111 8)
                                            (ipv107 `cast` ...),
                                          () #)
                                       `cast` ...)
                                    `cast` ...)
                                   (ipv105 `cast` ...))
                                `cast` ...
                             } in
                             let { (# ipv109, ipv110 #) ~ _
                             <- unsafeFreezeByteArray# ipv106 (ipv107 `cast` ...)
                             } in
                             (# ipv109 `cast` ..., (Vector 0 ipv104 ipv110) `cast` ... #)
                         }) } in
                let {
                  a25
                  a25 =
                    let { Vector ipv66 ipv67 ipv68 ~ _ <- xarr } in
                    let { Vector ww1 ww2 ww3 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let { (# ipv69, ipv70 #) ~ _
                            <- newArray# ipv67 (uninitialised) (s1 `cast` ...)
                            } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 ->
                                  case >=# sc1 ipv67 of _ {
                                    False ->
                                      let { (# ipv71 #) ~ _ <- indexArray# ipv68 (+# ipv66 sc1) } in
                                      $s$wa
                                        ((writeArray#
                                            ipv70
                                            sc2
                                            (let { PNested ds10 ds11 ds12 ds13 ~ _
                                             <- ipv71 `cast` ...
                                             } in
                                             let { UPVSegd ds14 ds15 ds16 ds17 ds18 ds19 ~ _
                                             <- ds10
                                             } in
                                             let { UPSSegd dt54 dt55 dt56 dt57 dt58 dt59 dt60 dt61
                                                           dt62 dt63 ds20 ~ _
                                             <- ds18
                                             } in
                                             dt55)
                                            (sc `cast` ...))
                                         `cast` ...)
                                        (+# sc1 1)
                                        (+# sc2 1);
                                    True -> (# sc, I# sc2 #)
                                  }; } in
                            let { (# ipv71, ipv72 #) ~ _ <- $s$wa (ipv69 `cast` ...) 0 0 } in
                            let { I# dt55 ~ _ <- ipv72 } in
                            let { (# ipv73, ipv74 #) ~ _
                            <- unsafeFreezeArray# ipv70 (ipv71 `cast` ...)
                            } in
                            (# ipv73 `cast` ..., Vector 0 dt55 ipv74 #))
                    } in
                    let { Vectors ipv69 ipv70 ipv71 ipv72 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww5 ww6 ww7 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv69, ipv70 #) ~ _
                                     <- newArray# ww2 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww2 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv70
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv71 #) ~ _
                                                           <- indexArray# ww3 (+# ww1 sc1)
                                                           } in
                                                           let { Vector ipv72 ipv73 ipv74 ~ _
                                                           <- ipv71 `cast` ...
                                                           } in
                                                           let { (# ipv75, ipv76 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv73 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv73 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild23
                                                                     <- indexIntArray#
                                                                          ipv74 (+# ipv72 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv76
                                                                           sc5
                                                                           wild23
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv77, ipv78 #) ~ _
                                                           <- $s$wa1 (ipv75 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt55 ~ dt54 <- ipv78 } in
                                                           let { (# ipv79, ipv80 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv76 `cast` ...) ipv77
                                                           } in
                                                           (# ipv79 `cast` ...,
                                                              (ByteArray ipv80, lvl7, dt54) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv71, ipv72 #) ~ _
                                     <- $s$wa (ipv69 `cast` ...) 0 0
                                     } in
                                     let { I# dt55 ~ _ <- ipv72 } in
                                     let { (# ipv73, ipv74 #) ~ _
                                     <- unsafeFreezeArray# ipv70 (ipv71 `cast` ...)
                                     } in
                                     (# ipv73 `cast` ..., Vector 0 dt55 ipv74 #))
                             } in
                             (\ s1 ->
                                let { (# ipv69, ipv70 #) ~ _ <- newArrayArray# ww2 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww2 of _ {
                                            False ->
                                              let { (ba, ds, ds9) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv71 #) ~ _
                                                      <- indexArray# ww3 (+# ww1 sc3)
                                                      } in
                                                      let { Vector ipv72 ipv73 ipv74 ~ _
                                                      <- ipv71 `cast` ...
                                                      } in
                                                      let { (# ipv75, ipv76 #) ~ _
                                                      <- newByteArray# (*# ipv73 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv73 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild24
                                                                <- indexIntArray#
                                                                     ipv74 (+# ipv72 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv76
                                                                      sc6
                                                                      wild24
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv77, ipv78 #) ~ _
                                                      <- $s$wa1 (ipv75 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt55 ~ dt54 <- ipv78 } in
                                                      let { (# ipv79, ipv80 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv76 `cast` ...) ipv77
                                                      } in
                                                      (# ipv79 `cast` ...,
                                                         (ByteArray ipv80, lvl7, dt54) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv70 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv71, ipv72 #) ~ _ <- $s$wa ipv69 0 ww2 0 } in
                                let { (# ipv73, ipv74 #) ~ _
                                <- unsafeFreezeArrayArray# ipv70 ipv71
                                } in
                                (# ipv73,
                                   let { (baStarts, ds10, ds11) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv75, ipv76 #) ~ _
                                           <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww6 of _ {
                                                   False ->
                                                     let { (# ipv77 #) ~ _
                                                     <- indexArray# ww7 (+# ww5 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv77 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv76 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv77, ipv78 #) ~ _
                                           <- $s$wa1 (ipv75 `cast` ...) 0 0
                                           } in
                                           let { I# dt55 ~ dt54 <- ipv78 } in
                                           let { (# ipv79, ipv80 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv76 `cast` ...) ipv77
                                           } in
                                           (# ipv79 `cast` ..., (ByteArray ipv80, lvl7, dt54) #))
                                   } in
                                   let { ByteArray dt55 ~ _ <- baStarts } in
                                   let { (baLens, ds12, ds13) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv75, ipv76 #) ~ _
                                           <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww6 of _ {
                                                   False ->
                                                     let { (# ipv77 #) ~ _
                                                     <- indexArray# ww7 (+# ww5 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv77 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv76 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv77, ipv78 #) ~ _
                                           <- $s$wa1 (ipv75 `cast` ...) 0 0
                                           } in
                                           let { I# dt57 ~ dt56 <- ipv78 } in
                                           let { (# ipv79, ipv80 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv76 `cast` ...) ipv77
                                           } in
                                           (# ipv79 `cast` ..., (ByteArray ipv80, lvl7, dt56) #))
                                   } in
                                   let { ByteArray dt57 ~ _ <- baLens } in
                                   Vectors ww2 dt55 dt57 ipv74 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let { UPVSegd ipv73 ipv74 ipv75 ipv76 ipv77 ipv78 ~ _ <- ipv65 } in
                    let { Vector ipv79 ipv80 ipv81 ~ _ <- yarr } in
                    let { Vector ww5 ww6 ww7 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let { (# ipv82, ipv83 #) ~ _
                            <- newArray# ipv80 (uninitialised) (s1 `cast` ...)
                            } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 ->
                                  case >=# sc1 ipv80 of _ {
                                    False ->
                                      let { (# ipv84 #) ~ _ <- indexArray# ipv81 (+# ipv79 sc1) } in
                                      $s$wa
                                        ((writeArray#
                                            ipv83
                                            sc2
                                            (let { PNested ds10 ds11 ds12 ds13 ~ _
                                             <- ipv84 `cast` ...
                                             } in
                                             let { UPVSegd ds14 ds15 ds16 ds17 ds18 ds19 ~ _
                                             <- ds10
                                             } in
                                             let { UPSSegd dt54 dt55 dt56 dt57 dt58 dt59 dt60 dt61
                                                           dt62 dt63 ds20 ~ _
                                             <- ds18
                                             } in
                                             dt55)
                                            (sc `cast` ...))
                                         `cast` ...)
                                        (+# sc1 1)
                                        (+# sc2 1);
                                    True -> (# sc, I# sc2 #)
                                  }; } in
                            let { (# ipv84, ipv85 #) ~ _ <- $s$wa (ipv82 `cast` ...) 0 0 } in
                            let { I# dt55 ~ _ <- ipv85 } in
                            let { (# ipv86, ipv87 #) ~ _
                            <- unsafeFreezeArray# ipv83 (ipv84 `cast` ...)
                            } in
                            (# ipv86 `cast` ..., Vector 0 dt55 ipv87 #))
                    } in
                    let { Vectors ipv82 ipv83 ipv84 ipv85 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww9 ww10 ww11 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv82, ipv83 #) ~ _
                                     <- newArray# ww6 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww6 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv83
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv84 #) ~ _
                                                           <- indexArray# ww7 (+# ww5 sc1)
                                                           } in
                                                           let { Vector ipv85 ipv86 ipv87 ~ _
                                                           <- ipv84 `cast` ...
                                                           } in
                                                           let { (# ipv88, ipv89 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv86 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv86 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild23
                                                                     <- indexIntArray#
                                                                          ipv87 (+# ipv85 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv89
                                                                           sc5
                                                                           wild23
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv90, ipv91 #) ~ _
                                                           <- $s$wa1 (ipv88 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt55 ~ dt54 <- ipv91 } in
                                                           let { (# ipv92, ipv93 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv89 `cast` ...) ipv90
                                                           } in
                                                           (# ipv92 `cast` ...,
                                                              (ByteArray ipv93, lvl7, dt54) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv84, ipv85 #) ~ _
                                     <- $s$wa (ipv82 `cast` ...) 0 0
                                     } in
                                     let { I# dt55 ~ _ <- ipv85 } in
                                     let { (# ipv86, ipv87 #) ~ _
                                     <- unsafeFreezeArray# ipv83 (ipv84 `cast` ...)
                                     } in
                                     (# ipv86 `cast` ..., Vector 0 dt55 ipv87 #))
                             } in
                             (\ s1 ->
                                let { (# ipv82, ipv83 #) ~ _ <- newArrayArray# ww6 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww6 of _ {
                                            False ->
                                              let { (ba, ds, ds9) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv84 #) ~ _
                                                      <- indexArray# ww7 (+# ww5 sc3)
                                                      } in
                                                      let { Vector ipv85 ipv86 ipv87 ~ _
                                                      <- ipv84 `cast` ...
                                                      } in
                                                      let { (# ipv88, ipv89 #) ~ _
                                                      <- newByteArray# (*# ipv86 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv86 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild24
                                                                <- indexIntArray#
                                                                     ipv87 (+# ipv85 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv89
                                                                      sc6
                                                                      wild24
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv90, ipv91 #) ~ _
                                                      <- $s$wa1 (ipv88 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt55 ~ dt54 <- ipv91 } in
                                                      let { (# ipv92, ipv93 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv89 `cast` ...) ipv90
                                                      } in
                                                      (# ipv92 `cast` ...,
                                                         (ByteArray ipv93, lvl7, dt54) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv83 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv84, ipv85 #) ~ _ <- $s$wa ipv82 0 ww6 0 } in
                                let { (# ipv86, ipv87 #) ~ _
                                <- unsafeFreezeArrayArray# ipv83 ipv84
                                } in
                                (# ipv86,
                                   let { (baStarts, ds10, ds11) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv88, ipv89 #) ~ _
                                           <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww10 of _ {
                                                   False ->
                                                     let { (# ipv90 #) ~ _
                                                     <- indexArray# ww11 (+# ww9 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv90 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv89 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv90, ipv91 #) ~ _
                                           <- $s$wa1 (ipv88 `cast` ...) 0 0
                                           } in
                                           let { I# dt55 ~ dt54 <- ipv91 } in
                                           let { (# ipv92, ipv93 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv89 `cast` ...) ipv90
                                           } in
                                           (# ipv92 `cast` ..., (ByteArray ipv93, lvl7, dt54) #))
                                   } in
                                   let { ByteArray dt55 ~ _ <- baStarts } in
                                   let { (baLens, ds12, ds13) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv88, ipv89 #) ~ _
                                           <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww10 of _ {
                                                   False ->
                                                     let { (# ipv90 #) ~ _
                                                     <- indexArray# ww11 (+# ww9 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv90 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv89 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv90, ipv91 #) ~ _
                                           <- $s$wa1 (ipv88 `cast` ...) 0 0
                                           } in
                                           let { I# dt57 ~ dt56 <- ipv91 } in
                                           let { (# ipv92, ipv93 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv89 `cast` ...) ipv90
                                           } in
                                           (# ipv92 `cast` ..., (ByteArray ipv93, lvl7, dt56) #))
                                   } in
                                   let { ByteArray dt57 ~ _ <- baLens } in
                                   Vectors ww6 dt55 dt57 ipv87 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let { UPSegd dt54 dt55 dt56 dt57 dt58 dt59 dt60 ds8 ~ _
                    <- segd'1
                    } in
                    let { DVector ipv86 ipv87 ipv88 ipv89 ipv90 ipv91 ~ nt13
                    <- (imapD'
                          lvl75
                          $dDT1
                          lvl76
                          wild
                          (\ _ x ->
                             let { (x5, y) ~ _ <- x } in
                             let { (x6, y1) ~ _ <- x5 } in
                             let { USegd dt61 dt62 dt63 dt64 dt65 dt66 dt67 ~ _ <- x6 } in
                             let { I# ipv86 ~ _ <- y1 } in
                             let { I# ipv87 ~ _ <- y } in
                             let { UPSSegd dt68 dt69 dt70 dt71 dt72 dt73 dt74 dt75 dt76 dt77
                                           ds9 ~ _
                             <- ipv76
                             } in
                             let { Vector ipv88 ipv89 ipv90 ~ _ <- dt70 `cast` ... } in
                             let { Vector ipv91 ipv92 ipv93 ~ _ <- dt69 `cast` ... } in
                             let { Vector ipv94 ipv95 ipv96 ~ _ <- dt36 `cast` ... } in
                             let { Vector ipv97 ipv98 ipv99 ~ _ <- ipv74 `cast` ... } in
                             let { Vector ipv100 ipv101 ipv102 ~ _ <- vsegids4 `cast` ... } in
                             runSTRep
                               (\ @ s s1 ->
                                  let { (# ipv103, ipv104 #) ~ _
                                  <- newByteArray# (*# dt67 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $s$wa
                                    $s$wa =
                                      \ sc sc1 sc2 sc3 sc4 sc5 sc6 sc7 sc8 ->
                                        case sc3 of ds11 {
                                          __DEFAULT ->
                                            case sc7 of ds12 {
                                              __DEFAULT ->
                                                case sc4 of wild26 {
                                                  __DEFAULT ->
                                                    let { __DEFAULT ~ wild27
                                                    <- indexIntArray# ipv83 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild28
                                                    <- indexByteArrayArray# ipv85 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild29
                                                    <- indexIntArray#
                                                         wild28 (+# wild27 (+# sc2 sc5))
                                                    } in
                                                    $s$wa
                                                      ((writeIntArray#
                                                          ipv104 sc8 wild29 (sc `cast` ...))
                                                       `cast` ...)
                                                      sc1
                                                      sc2
                                                      (-# ds11 1)
                                                      (-# wild26 1)
                                                      (+# sc5 1)
                                                      sc6
                                                      ds12
                                                      (+# sc8 1);
                                                  0 ->
                                                    let {
                                                      i1
                                                      i1 = +# sc6 1 } in
                                                    let { __DEFAULT ~ wild27
                                                    <- indexIntArray# ipv102 (+# ipv100 i1)
                                                    } in
                                                    let { __DEFAULT ~ wild28
                                                    <- indexIntArray# ipv96 (+# ipv94 wild27)
                                                    } in
                                                    let { __DEFAULT ~ wild29
                                                    <- indexIntArray# dt33 (+# dt31 wild27)
                                                    } in
                                                    let { __DEFAULT ~ wild30
                                                    <- indexIntArray# dt29 (+# dt27 wild27)
                                                    } in
                                                    $s$wa sc wild28 wild29 ds11 wild30 0 i1 0 sc8
                                                };
                                              0 ->
                                                case sc4 of wild26 {
                                                  __DEFAULT ->
                                                    let { __DEFAULT ~ wild27
                                                    <- indexIntArray# ipv70 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild28
                                                    <- indexByteArrayArray# ipv72 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild29
                                                    <- indexIntArray#
                                                         wild28 (+# wild27 (+# sc2 sc5))
                                                    } in
                                                    $s$wa
                                                      ((writeIntArray#
                                                          ipv104 sc8 wild29 (sc `cast` ...))
                                                       `cast` ...)
                                                      sc1
                                                      sc2
                                                      (-# ds11 1)
                                                      (-# wild26 1)
                                                      (+# sc5 1)
                                                      sc6
                                                      0
                                                      (+# sc8 1);
                                                  0 ->
                                                    let { __DEFAULT ~ wild27
                                                    <- indexIntArray# ipv99 (+# ipv97 sc6)
                                                    } in
                                                    let { __DEFAULT ~ wild28
                                                    <- indexIntArray# ipv90 (+# ipv88 wild27)
                                                    } in
                                                    let { __DEFAULT ~ wild29
                                                    <- indexIntArray# ipv93 (+# ipv91 wild27)
                                                    } in
                                                    let { __DEFAULT ~ wild30
                                                    <- indexIntArray# dt73 (+# dt71 wild27)
                                                    } in
                                                    $s$wa sc wild28 wild29 ds11 wild30 0 sc6 1 sc8
                                                }
                                            };
                                          0 -> (# sc, I# sc8 #)
                                        }; } in
                                  case dt67 of wild26 {
                                    __DEFAULT ->
                                      let { __DEFAULT ~ wild27
                                      <- indexIntArray# ipv102 (+# ipv100 ipv86)
                                      } in
                                      let { __DEFAULT ~ wild28
                                      <- indexIntArray# dt29 (+# dt27 wild27)
                                      } in
                                      case <# ipv87 wild28 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild30
                                          <- indexIntArray# ipv99 (+# ipv97 ipv86)
                                          } in
                                          let { __DEFAULT ~ wild31
                                          <- indexIntArray# ipv90 (+# ipv88 wild30)
                                          } in
                                          let { __DEFAULT ~ wild32
                                          <- indexIntArray# ipv93 (+# ipv91 wild30)
                                          } in
                                          let {
                                            i1
                                            i1 = -# ipv87 wild28 } in
                                          let { __DEFAULT ~ wild33
                                          <- indexIntArray# dt73 (+# dt71 wild30)
                                          } in
                                          let { (# ipv105, ipv106 #) ~ _
                                          <- $s$wa
                                               (ipv103 `cast` ...)
                                               wild31
                                               wild32
                                               wild26
                                               (-# wild33 i1)
                                               i1
                                               ipv86
                                               1
                                               0
                                          } in
                                          let { I# dt79 ~ _ <- ipv106 } in
                                          let { (# ipv107, ipv108 #) ~ _
                                          <- unsafeFreezeByteArray# ipv104 (ipv105 `cast` ...)
                                          } in
                                          (# ipv107 `cast` ...,
                                             (Vector 0 dt79 ipv108) `cast` ... #);
                                        True ->
                                          let { __DEFAULT ~ wild30
                                          <- indexIntArray# ipv96 (+# ipv94 wild27)
                                          } in
                                          let { __DEFAULT ~ wild31
                                          <- indexIntArray# dt33 (+# dt31 wild27)
                                          } in
                                          let { (# ipv105, ipv106 #) ~ _
                                          <- $s$wa
                                               (ipv103 `cast` ...)
                                               wild30
                                               wild31
                                               wild26
                                               (-# wild28 ipv87)
                                               ipv87
                                               ipv86
                                               0
                                               0
                                          } in
                                          let { I# dt79 ~ _ <- ipv106 } in
                                          let { (# ipv107, ipv108 #) ~ _
                                          <- unsafeFreezeByteArray# ipv104 (ipv105 `cast` ...)
                                          } in
                                          (# ipv107 `cast` ..., (Vector 0 dt79 ipv108) `cast` ... #)
                                      };
                                    0 ->
                                      let { (# ipv105, ipv106 #) ~ _
                                      <- $s$wa (ipv103 `cast` ...) 0 0 0 0 0 0 0 0
                                      } in
                                      let { I# dt79 ~ _ <- ipv106 } in
                                      let { (# ipv107, ipv108 #) ~ _
                                      <- unsafeFreezeByteArray# ipv104 (ipv105 `cast` ...)
                                      } in
                                      (# ipv107 `cast` ..., (Vector 0 dt79 ipv108) `cast` ... #)
                                  }))
                          ds8)
                       `cast` ...
                    } in
                    runSTRep
                      (\ @ s s1 ->
                         let { (di, n) ~ _
                         <- scanD
                              $fDTInt
                              lvl74
                              wild
                              $fNumInt_$c+
                              lvl7
                              ((DInt ipv86 ipv87 ipv88) `cast` ...)
                         } in
                         let { DInt ipv92 ipv93 ipv94 ~ nt14 <- di `cast` ... } in
                         let { I# ipv95 ~ n1 <- n } in
                         case >=# ipv95 0 of _ {
                           False -> case lvl72 ipv95 of wild24 { };
                           True ->
                             let { (# ipv96, ipv97 #) ~ _
                             <- newByteArray# (*# ipv95 8) (s1 `cast` ...)
                             } in
                             let {
                               nt15
                               nt15 = DProd (nt14 `cast` ...) (nt13 `cast` ...) } in
                             let { (# ipv98, ipv99 #) ~ _
                             <- ($wa1
                                   dt6
                                   ds1
                                   ds2
                                   (++
                                      $fShowComp2
                                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                   (WorkCopy n1)
                                   ((\ i s2 ->
                                       let { (# ipv98, ipv99 #) ~ _
                                       <- ((((myD lvl73 (nt15 `cast` ...)) `cast` ...) i)
                                           `cast` ...)
                                            s2
                                       } in
                                       let { (x, y) ~ _ <- ipv99 } in
                                       let { I# ipv100 ~ _ <- x } in
                                       let { Vector ipv101 ipv102 ipv103 ~ _ <- y `cast` ... } in
                                       (# copyByteArray#
                                            ipv103
                                            (*# ipv101 8)
                                            ipv97
                                            (*# ipv100 8)
                                            (*# ipv102 8)
                                            (ipv98 `cast` ...),
                                          () #)
                                       `cast` ...)
                                    `cast` ...)
                                   (ipv96 `cast` ...))
                                `cast` ...
                             } in
                             let { (# ipv100, ipv101 #) ~ _
                             <- unsafeFreezeByteArray# ipv97 (ipv98 `cast` ...)
                             } in
                             (# ipv100 `cast` ..., (Vector 0 ipv95 ipv101) `cast` ... #)
                         }) } in
                UPSSegd
                  False
                  a25
                  a24
                  dt47
                  dt48
                  dt49
                  dt50
                  dt51
                  dt52
                  dt53
                  (splitSSegdOnElemsD
                     wild
                     (USSegd False a25 a24 dt47 dt48 dt49 dt50 dt51 dt52 dt53)) } in
            let {
              vsegids5
              vsegids5 =
                let { UPSSegd dt47 dt48 dt49 dt50 dt51 dt52 dt53 dt54 dt55 dt56
                              ds7 ~ _
                <- a23
                } in
                runSTRep
                  (\ @ s s1 ->
                     let {
                       a24
                       a24 = -# dt51 1 } in
                     let {
                       $j
                       $j =
                         \ x ->
                           let { (# ipv66, ipv67 #) ~ _
                           <- newByteArray# (*# x 8) (s1 `cast` ...)
                           } in
                           letrec {
                             $s$wa
                             $s$wa =
                               \ sc sc1 sc2 ->
                                 case <=# sc1 a24 of _ {
                                   False -> (# sc, I# sc2 #);
                                   True ->
                                     $s$wa
                                       ((writeIntArray# ipv67 sc2 sc1 (sc `cast` ...)) `cast` ...)
                                       (+# sc1 1)
                                       (+# sc2 1)
                                 }; } in
                           let { (# ipv68, ipv69 #) ~ _ <- $s$wa (ipv66 `cast` ...) 0 0 } in
                           let { I# dt58 ~ _ <- ipv69 } in
                           let { (# ipv70, ipv71 #) ~ _
                           <- unsafeFreezeByteArray# ipv67 (ipv68 `cast` ...)
                           } in
                           (# ipv70 `cast` ..., (Vector 0 dt58 ipv71) `cast` ... #) } in
                     case ># 0 a24 of _ {
                       False ->
                         let {
                           a25
                           a25 = +# a24 1 } in
                         case ># a25 0 of _ {
                           False -> case lvl82 of wild23 { };
                           True -> $j a25
                         };
                       True -> $j 0
                     }) } in
            let {
              a24
              a24 =
                let { UPSSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ~ _
                <- a23
                } in
                $wmkDist vsegids5 ww4 ww6 ww9 } in
            let {
              a25
              a25 =
                $fPRInt_$cfromVectordPR
                  (let { Vector ww1 ww2 ww3 ~ _ <- xdata } in
                   let { Vector ipv66 ipv67 ipv68 ~ _ <- $wccat ww1 ww2 ww3 } in
                   let { Vector ww5 ww6 ww7 ~ _ <- ydata } in
                   let { Vector ipv69 ipv70 ipv71 ~ _ <- $wccat ww5 ww6 ww7 } in
                   (runSTRep
                      (\ @ s s1 ->
                         let { (# ipv72, ipv73 #) ~ _
                         <- newArray# (+# ipv67 ipv70) (uninitialised) (s1 `cast` ...)
                         } in
                         letrec {
                           $s$wa
                           $s$wa =
                             \ sc sc1 sc2 ->
                               case >=# sc1 ipv70 of _ {
                                 False ->
                                   let { (# ipv74 #) ~ _ <- indexArray# ipv71 (+# ipv69 sc1) } in
                                   $s$wa
                                     (+# sc 1)
                                     (+# sc1 1)
                                     ((writeArray# ipv73 sc ipv74 (sc2 `cast` ...)) `cast` ...);
                                 True -> (# sc2, I# sc #)
                               }; } in
                         letrec {
                           $s$wa1
                           $s$wa1 =
                             \ sc sc1 sc2 ->
                               case >=# sc2 ipv67 of _ {
                                 False ->
                                   let { (# ipv74 #) ~ _ <- indexArray# ipv68 (+# ipv66 sc2) } in
                                   $s$wa1
                                     ((writeArray# ipv73 sc1 ipv74 (sc `cast` ...)) `cast` ...)
                                     (+# sc1 1)
                                     (+# sc2 1);
                                 True -> $s$wa sc1 0 sc
                               }; } in
                         let { (# ipv74, ipv75 #) ~ _ <- $s$wa1 (ipv72 `cast` ...) 0 0 } in
                         let { I# dt48 ~ _ <- ipv75 } in
                         let { (# ipv76, ipv77 #) ~ _
                         <- unsafeFreezeArray# ipv73 (ipv74 `cast` ...)
                         } in
                         (# ipv76 `cast` ..., Vector 0 dt48 ipv77 #)))
                   `cast` ...) } in
            let {
              a26
              a26 = UPVSegd True vsegids5 vsegids5 a23 a23 a24 } in
            let {
              a27
              a27 =
                let { PInts arrs ~ _ <- a25 `cast` ... } in
                (PInt
                   (let { Vectors ipv66 ipv67 ipv68 ipv69 ~ _ <- arrs } in
                    let { UPSSegd dt47 dt48 dt49 dt50 dt51 dt52 dt53 dt54 dt55 dt56
                                  ds7 ~ _
                    <- a23
                    } in
                    let { Vector ipv70 ipv71 ipv72 ~ _ <- vsegids5 `cast` ... } in
                    let { DProd ipv73 ipv74 ~ nt14 <- a24 `cast` ... } in
                    let { DVector ipv75 ipv76 ipv77 ipv78 ipv79 ipv80 ~ nt15
                    <- (imapD'
                          lvl86
                          $dDT1
                          lvl88
                          wild
                          (\ _ x ->
                             let { (x5, y) ~ _ <- x } in
                             let { (x6, y1) ~ _ <- x5 } in
                             let { USegd dt57 dt58 dt59 dt60 dt61 dt62 dt63 ~ _ <- x6 } in
                             let { I# ipv75 ~ _ <- y1 } in
                             let { I# ipv76 ~ _ <- y } in
                             let { ByteArray ipv77 ~ _ <- lvl90 } in
                             let { Vector ipv78 ipv79 ipv80 ~ _ <- dt49 `cast` ... } in
                             let { Vector ipv81 ipv82 ipv83 ~ _ <- dt48 `cast` ... } in
                             letrec {
                               $s$wfoldlM'_loop
                               $s$wfoldlM'_loop =
                                 \ sc sc1 ->
                                   case >=# sc dt58 of _ {
                                     False ->
                                       let { __DEFAULT ~ wild26
                                       <- indexIntArray# dt59 (+# dt57 sc)
                                       } in
                                       $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild26);
                                     True -> sc1
                                   }; } in
                             let { __DEFAULT ~ ww <- $s$wfoldlM'_loop 0 0 } in
                             runSTRep
                               (\ @ s s1 ->
                                  let { (# ipv84, ipv85 #) ~ _
                                  <- newByteArray# (*# ww 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $s$wa
                                    $s$wa =
                                      \ sc sc1 sc2 sc3 sc4 sc5 ->
                                        case >=# sc1 sc2 of _ {
                                          False ->
                                            let { __DEFAULT ~ wild26 <- indexIntArray# sc3 sc1 } in
                                            $s$wa
                                              ((writeIntArray# ipv85 sc5 wild26 (sc `cast` ...))
                                               `cast` ...)
                                              (+# sc1 1)
                                              sc2
                                              sc3
                                              sc4
                                              (+# sc5 1);
                                          True ->
                                            case >=# (+# sc4 1) dt58 of _ {
                                              False ->
                                                let {
                                                  a28
                                                  a28 = +# sc4 1 } in
                                                let { __DEFAULT ~ wild27
                                                <- indexIntArray# ipv72 (+# ipv70 (+# a28 ipv75))
                                                } in
                                                let { __DEFAULT ~ wild28
                                                <- indexIntArray# ipv80 (+# ipv78 wild27)
                                                } in
                                                let {
                                                  $j
                                                  $j =
                                                    \ ww1 ->
                                                      let { __DEFAULT ~ wild29
                                                      <- indexIntArray# ipv67 wild28
                                                      } in
                                                      let { __DEFAULT ~ wild30
                                                      <- indexIntArray# ipv83 (+# ipv81 wild27)
                                                      } in
                                                      let { __DEFAULT ~ wild31
                                                      <- indexIntArray# dt59 (+# dt57 a28)
                                                      } in
                                                      let { __DEFAULT ~ wild32
                                                      <- indexByteArrayArray# ipv69 wild28
                                                      } in
                                                      $s$wa
                                                        sc
                                                        (+# (+# wild29 wild30) ww1)
                                                        (+# (+# (+# wild29 wild30) ww1) wild31)
                                                        wild32
                                                        a28
                                                        sc5 } in
                                                case a28 of _ {
                                                  __DEFAULT -> $j 0;
                                                  0 -> $j ipv76
                                                };
                                              True -> (# sc, I# sc5 #)
                                            }
                                        }; } in
                                  let { (# ipv86, ipv87 #) ~ _
                                  <- $s$wa (ipv84 `cast` ...) 0 0 ipv77 (-1) 0
                                  } in
                                  let { I# dt65 ~ _ <- ipv87 } in
                                  let { (# ipv88, ipv89 #) ~ _
                                  <- unsafeFreezeByteArray# ipv85 (ipv86 `cast` ...)
                                  } in
                                  (# ipv88 `cast` ..., (Vector 0 dt65 ipv89) `cast` ... #)))
                          (nt14 `cast` ...))
                       `cast` ...
                    } in
                    runSTRep
                      (\ @ s s1 ->
                         let { (di, n) ~ _
                         <- scanD
                              $fDTInt
                              lvl85
                              wild
                              $fNumInt_$c+
                              lvl7
                              ((DInt ipv75 ipv76 ipv77) `cast` ...)
                         } in
                         let { DInt ipv81 ipv82 ipv83 ~ nt16 <- di `cast` ... } in
                         let { I# ipv84 ~ n1 <- n } in
                         case >=# ipv84 0 of _ {
                           False -> case lvl83 ipv84 of wild24 { };
                           True ->
                             let { (# ipv85, ipv86 #) ~ _
                             <- newByteArray# (*# ipv84 8) (s1 `cast` ...)
                             } in
                             let {
                               nt17
                               nt17 = DProd (nt16 `cast` ...) (nt15 `cast` ...) } in
                             let { (# ipv87, ipv88 #) ~ _
                             <- ($wa1
                                   dt6
                                   ds1
                                   ds2
                                   (++
                                      $fShowComp2
                                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                   (WorkCopy n1)
                                   ((\ i s2 ->
                                       let { (# ipv87, ipv88 #) ~ _
                                       <- ((((myD lvl84 (nt17 `cast` ...)) `cast` ...) i)
                                           `cast` ...)
                                            s2
                                       } in
                                       let { (x, y) ~ _ <- ipv88 } in
                                       let { I# ipv89 ~ _ <- x } in
                                       let { Vector ipv90 ipv91 ipv92 ~ _ <- y `cast` ... } in
                                       (# copyByteArray#
                                            ipv92
                                            (*# ipv90 8)
                                            ipv86
                                            (*# ipv89 8)
                                            (*# ipv91 8)
                                            (ipv87 `cast` ...),
                                          () #)
                                       `cast` ...)
                                    `cast` ...)
                                   (ipv85 `cast` ...))
                                `cast` ...
                             } in
                             let { (# ipv89, ipv90 #) ~ _
                             <- unsafeFreezeByteArray# ipv86 (ipv87 `cast` ...)
                             } in
                             (# ipv89 `cast` ..., (Vector 0 ipv84 ipv90) `cast` ... #)
                         })))
                `cast` ... } in
            let {
              a28
              a28 = PNested a26 a25 segd'2 a27 } in
            (PNested
               (let {
                  upssegd1
                  upssegd1 =
                    let { UPSegd dt47 dt48 dt49 dt50 dt51 dt52 dt53 ds7 ~ _
                    <- segd'1
                    } in
                    let {
                      dt54
                      dt54 =
                        runSTRep
                          (\ @ s s1 ->
                             let {
                               $j
                               $j =
                                 \ x ->
                                   let { (# ipv66, ipv67 #) ~ _
                                   <- newByteArray# (*# x 8) (s1 `cast` ...)
                                   } in
                                   letrec {
                                     $s$wa
                                     $s$wa =
                                       \ sc sc1 sc2 ->
                                         case <=# sc1 0 of _ {
                                           False ->
                                             $s$wa
                                               ((writeIntArray# ipv67 sc2 0 (sc `cast` ...))
                                                `cast` ...)
                                               (-# sc1 1)
                                               (+# sc2 1);
                                           True -> (# sc, I# sc2 #)
                                         }; } in
                                   let { (# ipv68, ipv69 #) ~ _
                                   <- $s$wa (ipv66 `cast` ...) dt48 0
                                   } in
                                   let { I# dt56 ~ _ <- ipv69 } in
                                   let { (# ipv70, ipv71 #) ~ _
                                   <- unsafeFreezeByteArray# ipv67 (ipv68 `cast` ...)
                                   } in
                                   (# ipv70 `cast` ..., (Vector 0 dt56 ipv71) `cast` ... #) } in
                             case <=# dt48 0 of _ {
                               False -> $j dt48;
                               True -> $j 0
                             }) } in
                    let {
                      a29
                      a29 = Vector dt50 dt51 dt52 } in
                    UPSSegd
                      True
                      (a29 `cast` ...)
                      dt54
                      dt47
                      dt48
                      dt49
                      dt50
                      dt51
                      dt52
                      dt53
                      (splitSSegdOnElemsD
                         wild
                         (USSegd
                            True
                            (a29 `cast` ...)
                            dt54
                            dt47
                            dt48
                            dt49
                            dt50
                            dt51
                            dt52
                            dt53)) } in
                let {
                  vsegids6
                  vsegids6 =
                    let { UPSSegd dt47 dt48 dt49 dt50 dt51 dt52 dt53 dt54 dt55 dt56
                                  ds7 ~ _
                    <- upssegd1
                    } in
                    runSTRep
                      (\ @ s s1 ->
                         let {
                           a29
                           a29 = -# dt51 1 } in
                         let {
                           $j
                           $j =
                             \ x ->
                               let { (# ipv66, ipv67 #) ~ _
                               <- newByteArray# (*# x 8) (s1 `cast` ...)
                               } in
                               letrec {
                                 $s$wa
                                 $s$wa =
                                   \ sc sc1 sc2 ->
                                     case <=# sc1 a29 of _ {
                                       False -> (# sc, I# sc2 #);
                                       True ->
                                         $s$wa
                                           ((writeIntArray# ipv67 sc2 sc1 (sc `cast` ...))
                                            `cast` ...)
                                           (+# sc1 1)
                                           (+# sc2 1)
                                     }; } in
                               let { (# ipv68, ipv69 #) ~ _ <- $s$wa (ipv66 `cast` ...) 0 0 } in
                               let { I# dt58 ~ _ <- ipv69 } in
                               let { (# ipv70, ipv71 #) ~ _
                               <- unsafeFreezeByteArray# ipv67 (ipv68 `cast` ...)
                               } in
                               (# ipv70 `cast` ..., (Vector 0 dt58 ipv71) `cast` ... #) } in
                         case ># 0 a29 of _ {
                           False ->
                             let {
                               a30
                               a30 = +# a29 1 } in
                             case ># a30 0 of _ {
                               False -> case lvl91 of wild23 { };
                               True -> $j a30
                             };
                           True -> $j 0
                         }) } in
                UPVSegd
                  True
                  vsegids6
                  vsegids6
                  upssegd1
                  upssegd1
                  (mkDist vsegids6 upssegd1))
               ((PNesteds
                   (runSTRep
                      (\ @ s s1 ->
                         let { (# ipv66, ipv67 #) ~ _
                         <- newArray# 1 (uninitialised) (s1 `cast` ...)
                         } in
                         let { (# ipv68, ipv69 #) ~ _
                         <- unsafeFreezeArray#
                              ipv67 (writeArray# ipv67 0 (a28 `cast` ...) ipv66)
                         } in
                         (# ipv68 `cast` ..., Vector 0 1 ipv69 #))))
                `cast` ...)
               segd'1
               (a28 `cast` ...))
            `cast` ...))
        `cast` ...;
      0 ->
        let {
          segd'
          segd' =
            let {
              a11
              a11 = I# 0 } in
            let { Vector dt3 dt4 dt5 ~ _
            <- (runSTRep
                  (\ @ s s1 ->
                     let { (# ipv, ipv1 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                     let {
                       a12
                       a12 = MVector 0 0 ipv1 } in
                     let {
                       z2
                       z2 = I# 0 } in
                     let {
                       a13
                       a13 = MVector 0 0 ipv1 } in
                     let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeByteArray# ipv1 ipv } in
                     (# ipv2 `cast` ..., (Vector 0 0 ipv3) `cast` ... #)))
               `cast` ...
            } in
            let { Vector dt7 dt8 dt9 ~ _
            <- (runSTRep
                  (\ @ s s1 ->
                     let { (# ipv, ipv1 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                     let {
                       a12
                       a12 = MVector 0 0 ipv1 } in
                     let {
                       z2
                       z2 = I# 0 } in
                     let {
                       a13
                       a13 = MVector 0 0 ipv1 } in
                     let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeByteArray# ipv1 ipv } in
                     (# ipv2 `cast` ..., (Vector 0 0 ipv3) `cast` ... #)))
               `cast` ...
            } in
            let {
              a12
              a12 = \ _ -> Done } in
            let {
              a13
              a13 = I# 0 } in
            let {
              ipv
              ipv =
                \ @ s2 ->
                  (\ eta ->
                     let {
                       $dPrimMonad
                       $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                     let {
                       a14
                       a14 =
                         \ n s3 ->
                           let {
                             a15
                             a15 = \ tpl -> tpl } in
                           let { (# ipv3, ipv4 #) ~ _
                           <- ((\ s1 ->
                                  let {
                                    a16
                                    a16 = I# 0 } in
                                  let { I# x ~ _ <- n } in
                                  let { (# ipv1, ipv2 #) ~ _
                                  <- newByteArray# (*# x 8) (s1 `cast` ...)
                                  } in
                                  let {
                                    a17
                                    a17 = MutableByteArray ipv2 } in
                                  let {
                                    x1
                                    x1 = MVector 0 x ipv2 } in
                                  (# ipv1 `cast` ..., x1 `cast` ... #))
                               `cast` ...)
                                s3
                           } in
                           letrec {
                             foldlM'_loop
                             foldlM'_loop =
                               \ sPEC z1 s4 ->
                                 (\ eta1 ->
                                    let { __DEFAULT ~ _ <- sPEC } in
                                    let { I# ipv5 ~ z2 <- z1 } in
                                    ((\ s5 -> (# s5, z2 #)) `cast` ...) eta1)
                                 `cast` ...; } in
                           let { (# ipv5, ipv6 #) ~ _
                           <- ((foldlM'_loop SPEC (I# 0) ()) `cast` ...) ipv3
                           } in
                           (# ipv5,
                              let { MVector dt10 dt11 dt14 ~ _ <- ipv4 `cast` ... } in
                              let { I# dt16 ~ _ <- ipv6 } in
                              (MVector dt10 dt16 dt14) `cast` ... #) } in
                     ((a14 a13) `cast` ...) eta)
                  `cast` ... } in
            let { Vector dt11 dt14 dt15 ~ _
            <- (runSTRep
                  (\ @ s s1 ->
                     let { (# ipv1, ipv2 #) ~ _ <- ((ipv) `cast` ...) s1 } in
                     let {
                       $dPrimMonad
                       $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                     let {
                       a14
                       a14 = \ tpl -> tpl } in
                     let { MVector dt10 dt11 dt14 ~ _ <- ipv2 `cast` ... } in
                     let {
                       a15
                       a15 = I# dt10 } in
                     let {
                       a16
                       a16 = I# dt11 } in
                     let { (# ipv3, ipv4 #) ~ _
                     <- unsafeFreezeByteArray# dt14 (ipv1 `cast` ...)
                     } in
                     let {
                       a17
                       a17 = ByteArray ipv4 } in
                     let {
                       x1
                       x1 = Vector dt10 dt11 ipv4 } in
                     (# ipv3 `cast` ..., x1 `cast` ... #)))
               `cast` ...
            } in
            let {
              a14
              a14 = \ _ -> Done } in
            let {
              a15
              a15 = I# 0 } in
            let {
              ipv1
              ipv1 =
                \ @ s2 ->
                  (\ eta ->
                     let {
                       $dPrimMonad
                       $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                     let {
                       a16
                       a16 =
                         \ n s3 ->
                           let {
                             a17
                             a17 = \ tpl -> tpl } in
                           let { (# ipv3, ipv4 #) ~ _
                           <- ((\ s1 ->
                                  let {
                                    a18
                                    a18 = I# 0 } in
                                  let { I# x ~ _ <- n } in
                                  let { (# ipv2, ipv3 #) ~ _
                                  <- newByteArray# (*# x 8) (s1 `cast` ...)
                                  } in
                                  let {
                                    a19
                                    a19 = MutableByteArray ipv3 } in
                                  let {
                                    x1
                                    x1 = MVector 0 x ipv3 } in
                                  (# ipv2 `cast` ..., x1 `cast` ... #))
                               `cast` ...)
                                s3
                           } in
                           letrec {
                             foldlM'_loop
                             foldlM'_loop =
                               \ sPEC z1 s4 ->
                                 (\ eta1 ->
                                    let { __DEFAULT ~ _ <- sPEC } in
                                    let { I# ipv5 ~ z2 <- z1 } in
                                    ((\ s5 -> (# s5, z2 #)) `cast` ...) eta1)
                                 `cast` ...; } in
                           let { (# ipv5, ipv6 #) ~ _
                           <- ((foldlM'_loop SPEC (I# 0) ()) `cast` ...) ipv3
                           } in
                           (# ipv5,
                              let { MVector dt16 dt17 dt18 ~ _ <- ipv4 `cast` ... } in
                              let { I# dt20 ~ _ <- ipv6 } in
                              (MVector dt16 dt20 dt18) `cast` ... #) } in
                     ((a16 a15) `cast` ...) eta)
                  `cast` ... } in
            let { Vector dt17 dt18 dt19 ~ _
            <- (runSTRep
                  (\ @ s s1 ->
                     let { (# ipv2, ipv3 #) ~ _ <- ((ipv1) `cast` ...) s1 } in
                     let {
                       $dPrimMonad
                       $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                     let {
                       a16
                       a16 = \ tpl -> tpl } in
                     let { MVector dt16 dt17 dt18 ~ _ <- ipv3 `cast` ... } in
                     let {
                       a17
                       a17 = I# dt16 } in
                     let {
                       a18
                       a18 = I# dt17 } in
                     let { (# ipv4, ipv5 #) ~ _
                     <- unsafeFreezeByteArray# dt18 (ipv2 `cast` ...)
                     } in
                     let {
                       a19
                       a19 = ByteArray ipv5 } in
                     let {
                       x1
                       x1 = Vector dt16 dt17 ipv5 } in
                     (# ipv4 `cast` ..., x1 `cast` ... #)))
               `cast` ...
            } in
            let {
              $w$j
              $w$j =
                \ w3 ->
                  let { Gang dt20 ds1 ds2 ~ wild <- theGang } in
                  let { __DEFAULT ~ wild1 <- quotInt# w3 dt20 } in
                  let { __DEFAULT ~ wild3 <- remInt# w3 dt20 } in
                  let { DVector ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ~ nt
                  <- (generateD
                        $dDT1
                        lvl15
                        wild
                        (\ i ->
                           let { I# x1 ~ _ <- i } in
                           let {
                             $j
                             $j =
                               \ dt21 ->
                                 let {
                                   $j1
                                   $j1 =
                                     \ y ->
                                       runSTRep
                                         (\ @ s s1 ->
                                            let { (# ipv2, ipv3 #) ~ _
                                            <- newByteArray# (*# dt21 8) (s1 `cast` ...)
                                            } in
                                            let {
                                              a16
                                              a16 = +# dt11 y } in
                                            let {
                                              a17
                                              a17 = +# dt3 y } in
                                            letrec {
                                              $s$wa
                                              $s$wa =
                                                \ sc sc1 sc2 ->
                                                  case >=# sc1 dt21 of _ {
                                                    False ->
                                                      let { __DEFAULT ~ wild6
                                                      <- indexIntArray# dt5 (+# a17 sc1)
                                                      } in
                                                      let { __DEFAULT ~ wild7
                                                      <- indexIntArray# dt15 (+# a16 sc1)
                                                      } in
                                                      $s$wa
                                                        ((writeIntArray#
                                                            ipv3
                                                            sc2
                                                            (+# wild6 wild7)
                                                            (sc `cast` ...))
                                                         `cast` ...)
                                                        (+# sc1 1)
                                                        (+# sc2 1);
                                                    True -> (# sc, I# sc2 #)
                                                  }; } in
                                            let { (# ipv5, ipv6 #) ~ _
                                            <- $s$wa (ipv2 `cast` ...) 0 0
                                            } in
                                            let { I# dt23 ~ _ <- ipv6 } in
                                            let { (# ipv4, ipv7 #) ~ _
                                            <- unsafeFreezeByteArray# ipv3 (ipv5 `cast` ...)
                                            } in
                                            (# ipv4 `cast` ...,
                                               (Vector 0 dt23 ipv7) `cast` ... #)) } in
                                 case <# x1 wild3 of _ {
                                   False -> $j1 (+# (*# wild1 x1) wild3);
                                   True -> $j1 (*# (+# wild1 1) x1)
                                 } } in
                           case <# x1 wild3 of _ {
                             False -> $j wild1;
                             True -> $j (+# wild1 1)
                           }))
                     `cast` ...
                  } in
                  let { Vector dt22 dt23 dt24 ~ _
                  <- (runSTRep
                        (\ @ s s1 ->
                           let { (di, n) ~ _
                           <- scanD
                                $fDTInt
                                lvl13
                                wild
                                $fNumInt_$c+
                                lvl7
                                ((DInt ipv2 ipv3 ipv4) `cast` ...)
                           } in
                           let { DInt ipv8 ipv9 ipv10 ~ nt1 <- di `cast` ... } in
                           let { I# ipv11 ~ n1 <- n } in
                           case >=# ipv11 0 of _ {
                             False -> case lvl11 ipv11 of wild6 { };
                             True ->
                               let { (# ipv12, ipv13 #) ~ _
                               <- newByteArray# (*# ipv11 8) (s1 `cast` ...)
                               } in
                               let {
                                 nt2
                                 nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                               let { (# ipv14, ipv15 #) ~ _
                               <- ($wa1
                                     dt20
                                     ds1
                                     ds2
                                     (++
                                        $fShowComp2
                                        ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                     (WorkCopy n1)
                                     ((\ i s2 ->
                                         let { (# ipv14, ipv15 #) ~ _
                                         <- ((((myD lvl12 (nt2 `cast` ...)) `cast` ...) i)
                                             `cast` ...)
                                              s2
                                         } in
                                         let { (x, y) ~ _ <- ipv15 } in
                                         let { I# ipv16 ~ _ <- x } in
                                         let { Vector ipv17 ipv18 ipv19 ~ _ <- y `cast` ... } in
                                         (# copyByteArray#
                                              ipv19
                                              (*# ipv17 8)
                                              ipv13
                                              (*# ipv16 8)
                                              (*# ipv18 8)
                                              (ipv14 `cast` ...),
                                            () #)
                                         `cast` ...)
                                      `cast` ...)
                                     (ipv12 `cast` ...))
                                  `cast` ...
                               } in
                               let { (# ipv16, ipv17 #) ~ _
                               <- unsafeFreezeByteArray# ipv13 (ipv14 `cast` ...)
                               } in
                               (# ipv16 `cast` ..., (Vector 0 ipv11 ipv17) `cast` ... #)
                           }))
                     `cast` ...
                  } in
                  let {
                    $w$j1
                    $w$j1 =
                      \ w4 ->
                        let { __DEFAULT ~ wild4 <- quotInt# w4 dt20 } in
                        let { __DEFAULT ~ wild5 <- remInt# w4 dt20 } in
                        let { DVector ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ~ nt1
                        <- (generateD
                              $dDT1
                              lvl10
                              wild
                              (\ i ->
                                 let { I# x1 ~ _ <- i } in
                                 let {
                                   $j
                                   $j =
                                     \ dt25 ->
                                       let {
                                         $j1
                                         $j1 =
                                           \ y ->
                                             runSTRep
                                               (\ @ s s1 ->
                                                  let { (# ipv8, ipv9 #) ~ _
                                                  <- newByteArray# (*# dt25 8) (s1 `cast` ...)
                                                  } in
                                                  let {
                                                    a16
                                                    a16 = +# dt17 y } in
                                                  let {
                                                    a17
                                                    a17 = +# dt7 y } in
                                                  letrec {
                                                    $s$wa
                                                    $s$wa =
                                                      \ sc sc1 sc2 ->
                                                        case >=# sc1 dt25 of _ {
                                                          False ->
                                                            let { __DEFAULT ~ wild8
                                                            <- indexIntArray# dt9 (+# a17 sc1)
                                                            } in
                                                            let { __DEFAULT ~ wild9
                                                            <- indexIntArray# dt19 (+# a16 sc1)
                                                            } in
                                                            $s$wa
                                                              ((writeIntArray#
                                                                  ipv9
                                                                  sc2
                                                                  (+# wild8 wild9)
                                                                  (sc `cast` ...))
                                                               `cast` ...)
                                                              (+# sc1 1)
                                                              (+# sc2 1);
                                                          True -> (# sc, I# sc2 #)
                                                        }; } in
                                                  let { (# ipv10, ipv11 #) ~ _
                                                  <- $s$wa (ipv8 `cast` ...) 0 0
                                                  } in
                                                  let { I# dt27 ~ _ <- ipv11 } in
                                                  let { (# ipv12, ipv13 #) ~ _
                                                  <- unsafeFreezeByteArray# ipv9 (ipv10 `cast` ...)
                                                  } in
                                                  (# ipv12 `cast` ...,
                                                     (Vector 0 dt27 ipv13) `cast` ... #)) } in
                                       case <# x1 wild5 of _ {
                                         False -> $j1 (+# (*# wild4 x1) wild5);
                                         True -> $j1 (*# (+# wild4 1) x1)
                                       } } in
                                 case <# x1 wild5 of _ {
                                   False -> $j wild4;
                                   True -> $j (+# wild4 1)
                                 }))
                           `cast` ...
                        } in
                        let { Vector dt26 dt27 dt28 ~ _
                        <- (runSTRep
                              (\ @ s s1 ->
                                 let { (di, n) ~ _
                                 <- scanD
                                      $fDTInt
                                      lvl6
                                      wild
                                      $fNumInt_$c+
                                      lvl7
                                      ((DInt ipv8 ipv9 ipv10) `cast` ...)
                                 } in
                                 let { DInt ipv14 ipv15 ipv16 ~ nt2 <- di `cast` ... } in
                                 let { I# ipv17 ~ n1 <- n } in
                                 case >=# ipv17 0 of _ {
                                   False -> case lvl3 ipv17 of wild8 { };
                                   True ->
                                     let { (# ipv18, ipv19 #) ~ _
                                     <- newByteArray# (*# ipv17 8) (s1 `cast` ...)
                                     } in
                                     let {
                                       nt3
                                       nt3 = DProd (nt2 `cast` ...) (nt1 `cast` ...) } in
                                     let { (# ipv20, ipv21 #) ~ _
                                     <- ($wa1
                                           dt20
                                           ds1
                                           ds2
                                           (++
                                              $fShowComp2
                                              ($fShowComp_$cshowsPrec
                                                 $fShowComp7 (WJoinCopy n1) ([])))
                                           (WorkCopy n1)
                                           ((\ i s2 ->
                                               let { (# ipv20, ipv21 #) ~ _
                                               <- ((((myD lvl4 (nt3 `cast` ...)) `cast` ...) i)
                                                   `cast` ...)
                                                    s2
                                               } in
                                               let { (x, y) ~ _ <- ipv21 } in
                                               let { I# ipv22 ~ _ <- x } in
                                               let { Vector ipv23 ipv24 ipv25 ~ _
                                               <- y `cast` ...
                                               } in
                                               (# copyByteArray#
                                                    ipv25
                                                    (*# ipv23 8)
                                                    ipv19
                                                    (*# ipv22 8)
                                                    (*# ipv24 8)
                                                    (ipv20 `cast` ...),
                                                  () #)
                                               `cast` ...)
                                            `cast` ...)
                                           (ipv18 `cast` ...))
                                        `cast` ...
                                     } in
                                     let { (# ipv22, ipv23 #) ~ _
                                     <- unsafeFreezeByteArray# ipv19 (ipv20 `cast` ...)
                                     } in
                                     (# ipv22 `cast` ..., (Vector 0 ipv17 ipv23) `cast` ... #)
                                 }))
                           `cast` ...
                        } in
                        (# dt22,
                           dt23,
                           dt24,
                           dt26,
                           dt27,
                           dt28,
                           0,
                           splitSegdOnElemsD
                             wild (USegd dt22 dt23 dt24 dt26 dt27 dt28 0) #) } in
                  case <=# dt8 dt18 of _ {
                    False -> $w$j1 dt18;
                    True -> $w$j1 dt8
                  } } in
            case <=# dt4 dt14 of _ {
              False ->
                let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                <- $w$j dt14
                } in
                UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8;
              True ->
                let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                <- $w$j dt4
                } in
                UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8
            } } in
        let {
          a11
          a11 =
            let {
              vsegids3
              vsegids3 =
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv, ipv1 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                     let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeByteArray# ipv1 ipv } in
                     (# ipv2 `cast` ..., (Vector 0 0 ipv3) `cast` ... #)) } in
            let { Vectors ipv6 ipv7 ipv8 ipv9 ~ _
            <- runSTRep
                 (\ @ s s1 ->
                    let { (# ipv, ipv1 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                    let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeByteArray# ipv1 ipv } in
                    let { (# ipv4, ipv5 #) ~ _
                    <- newArrayArray# 0 (ipv2 `cast` ...)
                    } in
                    let { __DEFAULT ~ s'# <- writeByteArrayArray# ipv5 0 ipv3 ipv4 } in
                    let { (# ipv6, ipv7 #) ~ _ <- unsafeFreezeArrayArray# ipv5 s'# } in
                    (# ipv6, Vectors 0 ipv3 ipv3 ipv7 #))
            } in
            let {
              vsegids4
              vsegids4 =
                let {
                  a12
                  a12 = I# 0 } in
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv, ipv1 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                     let {
                       a13
                       a13 = MVector 0 0 ipv1 } in
                     let {
                       z2
                       z2 = I# 0 } in
                     let {
                       a14
                       a14 = MVector 0 0 ipv1 } in
                     let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeByteArray# ipv1 ipv } in
                     (# ipv2 `cast` ..., (Vector 0 0 ipv3) `cast` ... #)) } in
            let { Vectors ipv16 ipv17 ipv18 ipv19 ~ _
            <- runSTRep
                 (\ @ s s1 ->
                    let { (# ipv, ipv1 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                    let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeByteArray# ipv1 ipv } in
                    let { (# ipv4, ipv5 #) ~ _
                    <- newArrayArray# 0 (ipv2 `cast` ...)
                    } in
                    let { __DEFAULT ~ s'# <- writeByteArrayArray# ipv5 0 ipv3 ipv4 } in
                    let { (# ipv10, ipv11 #) ~ _
                    <- unsafeFreezeArrayArray# ipv5 s'#
                    } in
                    (# ipv10, Vectors 0 ipv3 ipv3 ipv11 #))
            } in
            let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds1 ~ _ <- segd' } in
            let { DVector ipv ipv1 ipv2 ipv3 ipv4 ipv5 ~ nt
            <- (imapD'
                  lvl20
                  $dDT1
                  lvl22
                  theGang
                  (\ _ x ->
                     let { (x1, y) ~ _ <- x } in
                     let { (x2, y1) ~ _ <- x1 } in
                     let { USegd dt9 dt10 dt11 dt14 dt15 dt16 dt17 ~ _ <- x2 } in
                     let { I# ipv ~ _ <- y1 } in
                     let { I# ipv1 ~ _ <- y } in
                     let {
                       a12
                       a12 = \ _ -> Done } in
                     let {
                       a13
                       a13 = I# 0 } in
                     let {
                       ipv2
                       ipv2 =
                         \ @ s2 ->
                           (\ eta ->
                              let {
                                $dPrimMonad
                                $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                              let {
                                a14
                                a14 =
                                  \ n s3 ->
                                    let {
                                      a15
                                      a15 = \ tpl -> tpl } in
                                    let { (# ipv3, ipv4 #) ~ _
                                    <- ((\ s1 ->
                                           let {
                                             a16
                                             a16 = I# 0 } in
                                           let { I# x3 ~ _ <- n } in
                                           let { (# ipv3, ipv4 #) ~ _
                                           <- newByteArray# (*# x3 8) (s1 `cast` ...)
                                           } in
                                           let {
                                             a17
                                             a17 = MutableByteArray ipv4 } in
                                           let {
                                             x4
                                             x4 = MVector 0 x3 ipv4 } in
                                           (# ipv3 `cast` ..., x4 `cast` ... #))
                                        `cast` ...)
                                         s3
                                    } in
                                    letrec {
                                      foldlM'_loop
                                      foldlM'_loop =
                                        \ sPEC z1 s4 ->
                                          (\ eta1 ->
                                             let { __DEFAULT ~ _ <- sPEC } in
                                             let { I# ipv5 ~ z2 <- z1 } in
                                             ((\ s5 -> (# s5, z2 #)) `cast` ...) eta1)
                                          `cast` ...; } in
                                    let { (# ipv5, ipv10 #) ~ _
                                    <- ((foldlM'_loop SPEC (I# 0) ()) `cast` ...) ipv3
                                    } in
                                    (# ipv5,
                                       let { MVector dt18 dt19 dt20 ~ _ <- ipv4 `cast` ... } in
                                       let { I# dt22 ~ _ <- ipv10 } in
                                       (MVector dt18 dt22 dt20) `cast` ... #) } in
                              ((a14 a13) `cast` ...) eta)
                           `cast` ... } in
                     let { Vector dt19 dt20 dt21 ~ _
                     <- (runSTRep
                           (\ @ s s1 ->
                              let { (# ipv3, ipv4 #) ~ _ <- ((ipv2) `cast` ...) s1 } in
                              let {
                                $dPrimMonad
                                $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                              let {
                                a14
                                a14 = \ tpl -> tpl } in
                              let { MVector dt18 dt19 dt20 ~ _ <- ipv4 `cast` ... } in
                              let {
                                a15
                                a15 = I# dt18 } in
                              let {
                                a16
                                a16 = I# dt19 } in
                              let { (# ipv5, ipv10 #) ~ _
                              <- unsafeFreezeByteArray# dt20 (ipv3 `cast` ...)
                              } in
                              let {
                                a17
                                a17 = ByteArray ipv10 } in
                              let {
                                x3
                                x3 = Vector dt18 dt19 ipv10 } in
                              (# ipv5 `cast` ..., x3 `cast` ... #)))
                        `cast` ...
                     } in
                     let {
                       a14
                       a14 = \ _ -> Done } in
                     let {
                       a15
                       a15 = I# 0 } in
                     let {
                       ipv3
                       ipv3 =
                         \ @ s2 ->
                           (\ eta ->
                              let {
                                $dPrimMonad
                                $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                              let {
                                a16
                                a16 =
                                  \ n s3 ->
                                    let {
                                      a17
                                      a17 = \ tpl -> tpl } in
                                    let { (# ipv4, ipv5 #) ~ _
                                    <- ((\ s1 ->
                                           let {
                                             a18
                                             a18 = I# 0 } in
                                           let { I# x3 ~ _ <- n } in
                                           let { (# ipv4, ipv5 #) ~ _
                                           <- newByteArray# (*# x3 8) (s1 `cast` ...)
                                           } in
                                           let {
                                             a19
                                             a19 = MutableByteArray ipv5 } in
                                           let {
                                             x4
                                             x4 = MVector 0 x3 ipv5 } in
                                           (# ipv4 `cast` ..., x4 `cast` ... #))
                                        `cast` ...)
                                         s3
                                    } in
                                    letrec {
                                      foldlM'_loop
                                      foldlM'_loop =
                                        \ sPEC z1 s4 ->
                                          (\ eta1 ->
                                             let { __DEFAULT ~ _ <- sPEC } in
                                             let { I# ipv10 ~ z2 <- z1 } in
                                             ((\ s5 -> (# s5, z2 #)) `cast` ...) eta1)
                                          `cast` ...; } in
                                    let { (# ipv10, ipv11 #) ~ _
                                    <- ((foldlM'_loop SPEC (I# 0) ()) `cast` ...) ipv4
                                    } in
                                    (# ipv10,
                                       let { MVector dt22 dt23 dt24 ~ _ <- ipv5 `cast` ... } in
                                       let { I# dt26 ~ _ <- ipv11 } in
                                       (MVector dt22 dt26 dt24) `cast` ... #) } in
                              ((a16 a15) `cast` ...) eta)
                           `cast` ... } in
                     let { Vector dt23 dt24 dt25 ~ _
                     <- (runSTRep
                           (\ @ s s1 ->
                              let { (# ipv4, ipv5 #) ~ _ <- ((ipv3) `cast` ...) s1 } in
                              let {
                                $dPrimMonad
                                $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                              let {
                                a16
                                a16 = \ tpl -> tpl } in
                              let { MVector dt22 dt23 dt24 ~ _ <- ipv5 `cast` ... } in
                              let {
                                a17
                                a17 = I# dt22 } in
                              let {
                                a18
                                a18 = I# dt23 } in
                              let { (# ipv10, ipv11 #) ~ _
                              <- unsafeFreezeByteArray# dt24 (ipv4 `cast` ...)
                              } in
                              let {
                                a19
                                a19 = ByteArray ipv11 } in
                              let {
                                x3
                                x3 = Vector dt22 dt23 ipv11 } in
                              (# ipv10 `cast` ..., x3 `cast` ... #)))
                        `cast` ...
                     } in
                     let {
                       dt26
                       dt26 =
                         let {
                           a16
                           a16 = \ _ -> Done } in
                         let {
                           a17
                           a17 = I# 0 } in
                         let {
                           ipv4
                           ipv4 =
                             \ @ s2 ->
                               (\ eta ->
                                  let {
                                    $dPrimMonad
                                    $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                                  let {
                                    a18
                                    a18 =
                                      \ n s3 ->
                                        let {
                                          a19
                                          a19 = \ tpl -> tpl } in
                                        let { (# ipv5, ipv10 #) ~ _
                                        <- ((\ s1 ->
                                               let {
                                                 a20
                                                 a20 = I# 0 } in
                                               let { I# x3 ~ _ <- n } in
                                               let { (# ipv5, ipv10 #) ~ _
                                               <- newByteArray# (*# x3 8) (s1 `cast` ...)
                                               } in
                                               let {
                                                 a21
                                                 a21 = MutableByteArray ipv10 } in
                                               let {
                                                 x4
                                                 x4 = MVector 0 x3 ipv10 } in
                                               (# ipv5 `cast` ..., x4 `cast` ... #))
                                            `cast` ...)
                                             s3
                                        } in
                                        letrec {
                                          foldlM'_loop
                                          foldlM'_loop =
                                            \ sPEC z1 s4 ->
                                              (\ eta1 ->
                                                 let { __DEFAULT ~ _ <- sPEC } in
                                                 let { I# ipv11 ~ z2 <- z1 } in
                                                 ((\ s5 -> (# s5, z2 #)) `cast` ...) eta1)
                                              `cast` ...; } in
                                        let { (# ipv11, ipv12 #) ~ _
                                        <- ((foldlM'_loop SPEC (I# 0) ()) `cast` ...) ipv5
                                        } in
                                        (# ipv11,
                                           let { MVector dt27 dt28 dt29 ~ _ <- ipv10 `cast` ... } in
                                           let { I# dt31 ~ _ <- ipv12 } in
                                           (MVector dt27 dt31 dt29) `cast` ... #) } in
                                  ((a18 a17) `cast` ...) eta)
                               `cast` ... } in
                         runSTRep
                           (\ @ s s1 ->
                              let { (# ipv5, ipv10 #) ~ _ <- ((ipv4) `cast` ...) s1 } in
                              let {
                                $dPrimMonad
                                $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                              let {
                                a18
                                a18 = \ tpl -> tpl } in
                              let { MVector dt27 dt28 dt29 ~ _ <- ipv10 `cast` ... } in
                              let {
                                a19
                                a19 = I# dt27 } in
                              let {
                                a20
                                a20 = I# dt28 } in
                              let { (# ipv11, ipv12 #) ~ _
                              <- unsafeFreezeByteArray# dt29 (ipv5 `cast` ...)
                              } in
                              let {
                                a21
                                a21 = ByteArray ipv12 } in
                              let {
                                x3
                                x3 = Vector dt27 dt28 ipv12 } in
                              (# ipv11 `cast` ..., x3 `cast` ... #)) } in
                     let {
                       dt27
                       dt27 =
                         let {
                           a16
                           a16 = \ _ -> Done } in
                         let {
                           a17
                           a17 = I# 0 } in
                         let {
                           ipv4
                           ipv4 =
                             \ @ s2 ->
                               (\ eta ->
                                  let {
                                    $dPrimMonad
                                    $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                                  let {
                                    a18
                                    a18 =
                                      \ n s3 ->
                                        let {
                                          a19
                                          a19 = \ tpl -> tpl } in
                                        let { (# ipv5, ipv10 #) ~ _
                                        <- ((\ s1 ->
                                               let {
                                                 a20
                                                 a20 = I# 0 } in
                                               let { I# x3 ~ _ <- n } in
                                               let { (# ipv5, ipv10 #) ~ _
                                               <- newByteArray# (*# x3 8) (s1 `cast` ...)
                                               } in
                                               let {
                                                 a21
                                                 a21 = MutableByteArray ipv10 } in
                                               let {
                                                 x4
                                                 x4 = MVector 0 x3 ipv10 } in
                                               (# ipv5 `cast` ..., x4 `cast` ... #))
                                            `cast` ...)
                                             s3
                                        } in
                                        letrec {
                                          foldlM'_loop
                                          foldlM'_loop =
                                            \ sPEC z1 s4 ->
                                              (\ eta1 ->
                                                 let { __DEFAULT ~ _ <- sPEC } in
                                                 let { I# ipv11 ~ z2 <- z1 } in
                                                 ((\ s5 -> (# s5, z2 #)) `cast` ...) eta1)
                                              `cast` ...; } in
                                        let { (# ipv11, ipv12 #) ~ _
                                        <- ((foldlM'_loop SPEC (I# 0) ()) `cast` ...) ipv5
                                        } in
                                        (# ipv11,
                                           let { MVector dt28 dt29 dt30 ~ _ <- ipv10 `cast` ... } in
                                           let { I# dt32 ~ _ <- ipv12 } in
                                           (MVector dt28 dt32 dt30) `cast` ... #) } in
                                  ((a18 a17) `cast` ...) eta)
                               `cast` ... } in
                         runSTRep
                           (\ @ s s1 ->
                              let { (# ipv5, ipv10 #) ~ _ <- ((ipv4) `cast` ...) s1 } in
                              let {
                                $dPrimMonad
                                $dPrimMonad = $fPrimMonadST ($fMonadST) } in
                              let {
                                a18
                                a18 = \ tpl -> tpl } in
                              let { MVector dt28 dt29 dt30 ~ _ <- ipv10 `cast` ... } in
                              let {
                                a19
                                a19 = I# dt28 } in
                              let {
                                a20
                                a20 = I# dt29 } in
                              let { (# ipv11, ipv12 #) ~ _
                              <- unsafeFreezeByteArray# dt30 (ipv5 `cast` ...)
                              } in
                              let {
                                a21
                                a21 = ByteArray ipv12 } in
                              let {
                                x3
                                x3 = Vector dt28 dt29 ipv12 } in
                              (# ipv11 `cast` ..., x3 `cast` ... #)) } in
                     let { Vector ipv21 ipv22 ipv23 ~ _ <- dt27 `cast` ... } in
                     let { Vector ipv24 ipv25 ipv26 ~ _ <- dt26 `cast` ... } in
                     let { Vector dt29 dt30 dt31 ~ _
                     <- (runSTRep
                           (\ @ s s1 ->
                              let { (# ipv4, ipv5 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                              let { (# ipv10, ipv11 #) ~ _
                              <- unsafeFreezeByteArray# ipv5 ipv4
                              } in
                              (# ipv10 `cast` ..., (Vector 0 0 ipv11) `cast` ... #)))
                        `cast` ...
                     } in
                     let { __DEFAULT ~ _
                     <- runSTRep
                          (\ @ s s1 ->
                             let { (# ipv4, ipv5 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                             let { (# ipv10, ipv11 #) ~ _
                             <- unsafeFreezeByteArray# ipv5 ipv4
                             } in
                             (# ipv10 `cast` ..., (Vector 0 0 ipv11) `cast` ... #))
                     } in
                     let { Vector ipv27 ipv28 ipv29 ~ _
                     <- (runSTRep
                           (\ @ s s1 ->
                              let { (# ipv4, ipv5 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                              let { (# ipv10, ipv11 #) ~ _
                              <- unsafeFreezeByteArray# ipv5 ipv4
                              } in
                              (# ipv10 `cast` ..., (Vector 0 0 ipv11) `cast` ... #)))
                        `cast` ...
                     } in
                     let { Vector ipv30 ipv31 ipv32 ~ _
                     <- (runSTRep
                           (\ @ s s1 ->
                              let { (# ipv4, ipv5 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                              let { (# ipv10, ipv11 #) ~ _
                              <- unsafeFreezeByteArray# ipv5 ipv4
                              } in
                              (# ipv10 `cast` ..., (Vector 0 0 ipv11) `cast` ... #)))
                        `cast` ...
                     } in
                     let { Vector ipv33 ipv34 ipv35 ~ _ <- vsegids4 `cast` ... } in
                     let { Vector ipv36 ipv37 ipv38 ~ _ <- vsegids3 `cast` ... } in
                     runSTRep
                       (\ @ s s1 ->
                          let { (# ipv4, ipv5 #) ~ _
                          <- newByteArray# (*# dt17 8) (s1 `cast` ...)
                          } in
                          letrec {
                            $s$wa
                            $s$wa =
                              \ sc sc1 sc2 sc3 sc4 sc5 sc6 sc7 sc8 ->
                                case sc3 of ds10 {
                                  __DEFAULT ->
                                    case sc7 of ds11 {
                                      __DEFAULT ->
                                        case sc4 of wild5 {
                                          __DEFAULT ->
                                            let { __DEFAULT ~ wild6 <- indexIntArray# ipv17 sc1 } in
                                            let { __DEFAULT ~ wild7
                                            <- indexByteArrayArray# ipv19 sc1
                                            } in
                                            let { __DEFAULT ~ wild8
                                            <- indexIntArray# wild7 (+# wild6 (+# sc2 sc5))
                                            } in
                                            $s$wa
                                              ((writeIntArray# ipv5 sc8 wild8 (sc `cast` ...))
                                               `cast` ...)
                                              sc1
                                              sc2
                                              (-# ds10 1)
                                              (-# wild5 1)
                                              (+# sc5 1)
                                              sc6
                                              ds11
                                              (+# sc8 1);
                                          0 ->
                                            let {
                                              i1
                                              i1 = +# sc6 1 } in
                                            let { __DEFAULT ~ wild6
                                            <- indexIntArray# ipv38 (+# ipv36 i1)
                                            } in
                                            let { __DEFAULT ~ wild7
                                            <- indexIntArray# ipv29 (+# ipv27 wild6)
                                            } in
                                            let { __DEFAULT ~ wild8
                                            <- indexIntArray# ipv32 (+# ipv30 wild6)
                                            } in
                                            let { __DEFAULT ~ wild9
                                            <- indexIntArray# dt31 (+# dt29 wild6)
                                            } in
                                            $s$wa sc wild7 wild8 ds10 wild9 0 i1 0 sc8
                                        };
                                      0 ->
                                        case sc4 of wild5 {
                                          __DEFAULT ->
                                            let { __DEFAULT ~ wild6 <- indexIntArray# ipv7 sc1 } in
                                            let { __DEFAULT ~ wild7
                                            <- indexByteArrayArray# ipv9 sc1
                                            } in
                                            let { __DEFAULT ~ wild8
                                            <- indexIntArray# wild7 (+# wild6 (+# sc2 sc5))
                                            } in
                                            $s$wa
                                              ((writeIntArray# ipv5 sc8 wild8 (sc `cast` ...))
                                               `cast` ...)
                                              sc1
                                              sc2
                                              (-# ds10 1)
                                              (-# wild5 1)
                                              (+# sc5 1)
                                              sc6
                                              0
                                              (+# sc8 1);
                                          0 ->
                                            let { __DEFAULT ~ wild6
                                            <- indexIntArray# ipv35 (+# ipv33 sc6)
                                            } in
                                            let { __DEFAULT ~ wild7
                                            <- indexIntArray# ipv23 (+# ipv21 wild6)
                                            } in
                                            let { __DEFAULT ~ wild8
                                            <- indexIntArray# ipv26 (+# ipv24 wild6)
                                            } in
                                            let { __DEFAULT ~ wild9
                                            <- indexIntArray# dt21 (+# dt19 wild6)
                                            } in
                                            $s$wa sc wild7 wild8 ds10 wild9 0 sc6 1 sc8
                                        }
                                    };
                                  0 -> (# sc, I# sc8 #)
                                }; } in
                          case dt17 of wild5 {
                            __DEFAULT ->
                              let { __DEFAULT ~ wild6 <- indexIntArray# ipv38 (+# ipv36 ipv) } in
                              let { __DEFAULT ~ wild7 <- indexIntArray# dt31 (+# dt29 wild6) } in
                              case <# ipv1 wild7 of _ {
                                False ->
                                  let { __DEFAULT ~ wild10
                                  <- indexIntArray# ipv35 (+# ipv33 ipv)
                                  } in
                                  let { __DEFAULT ~ wild13
                                  <- indexIntArray# ipv23 (+# ipv21 wild10)
                                  } in
                                  let { __DEFAULT ~ wild14
                                  <- indexIntArray# ipv26 (+# ipv24 wild10)
                                  } in
                                  let {
                                    i1
                                    i1 = -# ipv1 wild7 } in
                                  let { __DEFAULT ~ wild11
                                  <- indexIntArray# dt21 (+# dt19 wild10)
                                  } in
                                  let { (# ipv10, ipv11 #) ~ _
                                  <- $s$wa
                                       (ipv4 `cast` ...)
                                       wild13
                                       wild14
                                       wild5
                                       (-# wild11 i1)
                                       i1
                                       ipv
                                       1
                                       0
                                  } in
                                  let { I# dt33 ~ _ <- ipv11 } in
                                  let { (# ipv12, ipv13 #) ~ _
                                  <- unsafeFreezeByteArray# ipv5 (ipv10 `cast` ...)
                                  } in
                                  (# ipv12 `cast` ..., (Vector 0 dt33 ipv13) `cast` ... #);
                                True ->
                                  let { __DEFAULT ~ wild11
                                  <- indexIntArray# ipv29 (+# ipv27 wild6)
                                  } in
                                  let { __DEFAULT ~ wild12
                                  <- indexIntArray# ipv32 (+# ipv30 wild6)
                                  } in
                                  let { (# ipv10, ipv11 #) ~ _
                                  <- $s$wa
                                       (ipv4 `cast` ...)
                                       wild11
                                       wild12
                                       wild5
                                       (-# wild7 ipv1)
                                       ipv1
                                       ipv
                                       0
                                       0
                                  } in
                                  let { I# dt33 ~ _ <- ipv11 } in
                                  let { (# ipv12, ipv13 #) ~ _
                                  <- unsafeFreezeByteArray# ipv5 (ipv10 `cast` ...)
                                  } in
                                  (# ipv12 `cast` ..., (Vector 0 dt33 ipv13) `cast` ... #)
                              };
                            0 ->
                              let { (# ipv10, ipv11 #) ~ _
                              <- $s$wa (ipv4 `cast` ...) 0 0 0 0 0 0 0 0
                              } in
                              let { I# dt33 ~ _ <- ipv11 } in
                              let { (# ipv12, ipv13 #) ~ _
                              <- unsafeFreezeByteArray# ipv5 (ipv10 `cast` ...)
                              } in
                              (# ipv12 `cast` ..., (Vector 0 dt33 ipv13) `cast` ... #)
                          }))
                  ds1)
               `cast` ...
            } in
            runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl18
                      theGang
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv ipv1 ipv2) `cast` ...)
                 } in
                 let { DInt ipv10 ipv11 ipv12 ~ nt1 <- di `cast` ... } in
                 let { I# ipv13 ~ n1 <- n } in
                 case >=# ipv13 0 of _ {
                   False -> case lvl16 ipv13 of wild4 { };
                   True ->
                     let { (# ipv14, ipv15 #) ~ _
                     <- newByteArray# (*# ipv13 8) (s1 `cast` ...)
                     } in
                     let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                     let {
                       nt2
                       nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                     let { (# ipv20, ipv21 #) ~ _
                     <- ($wa1
                           ww1
                           ww2
                           ww3
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv20, ipv21 #) ~ _
                               <- ((((myD lvl17 (nt2 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv21 } in
                               let { I# ipv22 ~ _ <- x } in
                               let { Vector ipv23 ipv24 ipv25 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv25
                                    (*# ipv23 8)
                                    ipv15
                                    (*# ipv22 8)
                                    (*# ipv24 8)
                                    (ipv20 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv14 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv22, ipv23 #) ~ _
                     <- unsafeFreezeByteArray# ipv15 (ipv20 `cast` ...)
                     } in
                     (# ipv22 `cast` ..., (Vector 0 ipv13 ipv23) `cast` ... #)
                 }) } in
        (PTuple2
           ((PNested
               (let {
                  upssegd
                  upssegd =
                    let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds1 ~ _ <- segd' } in
                    let {
                      dt9
                      dt9 =
                        runSTRep
                          (\ @ s s1 ->
                             let {
                               $j
                               $j =
                                 \ x ->
                                   let { (# ipv, ipv1 #) ~ _
                                   <- newByteArray# (*# x 8) (s1 `cast` ...)
                                   } in
                                   letrec {
                                     $s$wa
                                     $s$wa =
                                       \ sc sc1 sc2 ->
                                         case <=# sc1 0 of _ {
                                           False ->
                                             $s$wa
                                               ((writeIntArray# ipv1 sc2 0 (sc `cast` ...))
                                                `cast` ...)
                                               (-# sc1 1)
                                               (+# sc2 1);
                                           True -> (# sc, I# sc2 #)
                                         }; } in
                                   let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv `cast` ...) dt3 0 } in
                                   let { I# dt11 ~ _ <- ipv6 } in
                                   let { (# ipv2, ipv3 #) ~ _
                                   <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
                                   } in
                                   (# ipv2 `cast` ..., (Vector 0 dt11 ipv3) `cast` ... #) } in
                             case <=# dt3 0 of _ {
                               False -> $j dt3;
                               True -> $j 0
                             }) } in
                    let {
                      a12
                      a12 = Vector dt5 dt6 dt7 } in
                    UPSSegd
                      True
                      (a12 `cast` ...)
                      dt9
                      dt
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      dt8
                      (splitSSegdOnElemsD
                         theGang
                         (USSegd True (a12 `cast` ...) dt9 dt dt3 dt4 dt5 dt6 dt7 dt8)) } in
                let {
                  vsegids3
                  vsegids3 =
                    let { UPSSegd dt3 dt6 dt7 dt8 dt9 dt10 dt11 dt4 dt5 dt14 ds1 ~ _
                    <- upssegd
                    } in
                    runSTRep
                      (\ @ s s1 ->
                         let {
                           a12
                           a12 = -# dt9 1 } in
                         let {
                           $j
                           $j =
                             \ x ->
                               let { (# ipv, ipv1 #) ~ _
                               <- newByteArray# (*# x 8) (s1 `cast` ...)
                               } in
                               letrec {
                                 $s$wa
                                 $s$wa =
                                   \ sc sc1 sc2 ->
                                     case <=# sc1 a12 of _ {
                                       False -> (# sc, I# sc2 #);
                                       True ->
                                         $s$wa
                                           ((writeIntArray# ipv1 sc2 sc1 (sc `cast` ...))
                                            `cast` ...)
                                           (+# sc1 1)
                                           (+# sc2 1)
                                     }; } in
                               let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv `cast` ...) 0 0 } in
                               let { I# dt16 ~ _ <- ipv6 } in
                               let { (# ipv2, ipv3 #) ~ _
                               <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
                               } in
                               (# ipv2 `cast` ..., (Vector 0 dt16 ipv3) `cast` ... #) } in
                         case ># 0 a12 of _ {
                           False ->
                             let {
                               a13
                               a13 = +# a12 1 } in
                             case ># a13 0 of _ {
                               False -> case lvl27 of wild4 { };
                               True -> $j a13
                             };
                           True -> $j 0
                         }) } in
                UPVSegd
                  True vsegids3 vsegids3 upssegd upssegd (mkDist vsegids3 upssegd))
               ((PInts
                   (runSTRep
                      (\ @ s s1 ->
                         let { Vector ipv ipv1 ipv2 ~ _ <- a11 `cast` ... } in
                         let {
                           ipv3
                           ipv3 = I# 0 } in
                         let { (# ipv4, ipv5 #) ~ _
                         <- ((\ eta ->
                                let { (# ipv4, ipv5 #) ~ _
                                <- newByteArray# (*# ipv1 8) (eta `cast` ...)
                                } in
                                let {
                                  a12
                                  a12 = MutableByteArray ipv5 } in
                                let {
                                  a13
                                  a13 = MVector 0 ipv1 ipv5 } in
                                letrec {
                                  a14
                                  a14 =
                                    \ sPEC z1 s4 eta1 ->
                                      let { __DEFAULT ~ _ <- sPEC } in
                                      let { I# ipv6 ~ z2 <- z1 } in
                                      let { I# x ~ _ <- s4 } in
                                      case >=# x ipv1 of _ {
                                        False ->
                                          ((foldlM'_loop SPEC (I# (+# ipv6 1)) (I# (+# x 1)))
                                           `cast` ...)
                                            (let { __DEFAULT ~ wild3
                                             <- indexIntArray# ipv2 (+# ipv x)
                                             } in
                                             (writeIntArray# ipv5 ipv6 wild3 (eta1 `cast` ...))
                                             `cast` ...);
                                        True -> (# eta1, z2 #)
                                      };
                                  foldlM'_loop
                                  foldlM'_loop = a14 `cast` ...; } in
                                let { (# ipv6, ipv7 #) ~ _
                                <- ((foldlM'_loop SPEC (I# 0) ipv3) `cast` ...) (ipv4 `cast` ...)
                                } in
                                (# ipv6,
                                   let { I# dt4 ~ _ <- ipv7 } in (MVector 0 dt4 ipv5) `cast` ... #)
                                `cast` ...)
                             `cast` ...)
                              s1
                         } in
                         let { MVector dt dt3 dt4 ~ _ <- ipv5 } in
                         let { (# ipv6, ipv7 #) ~ _
                         <- unsafeFreezeByteArray# (dt4 `cast` ...) (ipv4 `cast` ...)
                         } in
                         let { (# ipv8, ipv9 #) ~ _ <- newByteArray# 8 ipv6 } in
                         let { (# ipv10, ipv11 #) ~ _
                         <- unsafeFreezeByteArray# ipv9 (writeIntArray# ipv9 0 dt ipv8)
                         } in
                         let { (# ipv12, ipv13 #) ~ _ <- newByteArray# 8 ipv10 } in
                         let { (# ipv14, ipv15 #) ~ _
                         <- unsafeFreezeByteArray# ipv13 (writeIntArray# ipv13 0 dt3 ipv12)
                         } in
                         let { (# ipv16, ipv17 #) ~ _
                         <- newArrayArray# 1 (ipv14 `cast` ...)
                         } in
                         let { __DEFAULT ~ s'#
                         <- writeByteArrayArray# ipv17 0 ipv7 ipv16
                         } in
                         let { (# ipv18, ipv19 #) ~ _
                         <- unsafeFreezeArrayArray# ipv17 s'#
                         } in
                         (# ipv18, Vectors 1 ipv11 ipv15 ipv19 #))))
                `cast` ...)
               segd'
               ((PInt a11) `cast` ...))
            `cast` ...)
           (let {
              segd'1
              segd'1 =
                let { USegd dt3 dt4 dt5 dt6 dt7 dt8 dt9 ~ dt <- empty } in
                let {
                  $w$j
                  $w$j =
                    \ w3 ->
                      let { Gang dt10 ds1 ds2 ~ wild <- theGang } in
                      let { __DEFAULT ~ wild1 <- quotInt# w3 dt10 } in
                      let { __DEFAULT ~ wild3 <- remInt# w3 dt10 } in
                      let { DVector ipv ipv1 ipv2 ipv3 ipv4 ipv5 ~ nt
                      <- (generateD
                            $dDT1
                            lvl37
                            wild
                            (\ i ->
                               let { I# x1 ~ _ <- i } in
                               let {
                                 $j
                                 $j =
                                   \ dt11 ->
                                     let {
                                       $j1
                                       $j1 =
                                         \ y ->
                                           runSTRep
                                             (\ @ s s1 ->
                                                let { (# ipv, ipv1 #) ~ _
                                                <- newByteArray# (*# dt11 8) (s1 `cast` ...)
                                                } in
                                                let {
                                                  a12
                                                  a12 = +# dt3 y } in
                                                let {
                                                  a13
                                                  a13 = +# dt3 y } in
                                                letrec {
                                                  $s$wa
                                                  $s$wa =
                                                    \ sc sc1 sc2 ->
                                                      case >=# sc1 dt11 of _ {
                                                        False ->
                                                          let { __DEFAULT ~ wild6
                                                          <- indexIntArray# dt5 (+# a13 sc1)
                                                          } in
                                                          let { __DEFAULT ~ wild7
                                                          <- indexIntArray# dt5 (+# a12 sc1)
                                                          } in
                                                          $s$wa
                                                            ((writeIntArray#
                                                                ipv1
                                                                sc2
                                                                (+# wild6 wild7)
                                                                (sc `cast` ...))
                                                             `cast` ...)
                                                            (+# sc1 1)
                                                            (+# sc2 1);
                                                        True -> (# sc, I# sc2 #)
                                                      }; } in
                                                let { (# ipv5, ipv6 #) ~ _
                                                <- $s$wa (ipv `cast` ...) 0 0
                                                } in
                                                let { I# dt15 ~ _ <- ipv6 } in
                                                let { (# ipv2, ipv3 #) ~ _
                                                <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
                                                } in
                                                (# ipv2 `cast` ...,
                                                   (Vector 0 dt15 ipv3) `cast` ... #)) } in
                                     case <# x1 wild3 of _ {
                                       False -> $j1 (+# (*# wild1 x1) wild3);
                                       True -> $j1 (*# (+# wild1 1) x1)
                                     } } in
                               case <# x1 wild3 of _ {
                                 False -> $j wild1;
                                 True -> $j (+# wild1 1)
                               }))
                         `cast` ...
                      } in
                      let { Vector dt14 dt15 dt16 ~ _
                      <- (runSTRep
                            (\ @ s s1 ->
                               let { (di, n) ~ _
                               <- scanD
                                    $fDTInt
                                    lvl35
                                    wild
                                    $fNumInt_$c+
                                    lvl7
                                    ((DInt ipv ipv1 ipv2) `cast` ...)
                               } in
                               let { DInt ipv6 ipv7 ipv8 ~ nt1 <- di `cast` ... } in
                               let { I# ipv9 ~ n1 <- n } in
                               case >=# ipv9 0 of _ {
                                 False -> case lvl33 ipv9 of wild6 { };
                                 True ->
                                   let { (# ipv10, ipv11 #) ~ _
                                   <- newByteArray# (*# ipv9 8) (s1 `cast` ...)
                                   } in
                                   let {
                                     nt2
                                     nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                                   let { (# ipv14, ipv15 #) ~ _
                                   <- ($wa1
                                         dt10
                                         ds1
                                         ds2
                                         (++
                                            $fShowComp2
                                            ($fShowComp_$cshowsPrec
                                               $fShowComp7 (WJoinCopy n1) ([])))
                                         (WorkCopy n1)
                                         ((\ i s2 ->
                                             let { (# ipv14, ipv15 #) ~ _
                                             <- ((((myD lvl34 (nt2 `cast` ...)) `cast` ...) i)
                                                 `cast` ...)
                                                  s2
                                             } in
                                             let { (x, y) ~ _ <- ipv15 } in
                                             let { I# ipv16 ~ _ <- x } in
                                             let { Vector ipv12 ipv13 ipv17 ~ _ <- y `cast` ... } in
                                             (# copyByteArray#
                                                  ipv17
                                                  (*# ipv12 8)
                                                  ipv11
                                                  (*# ipv16 8)
                                                  (*# ipv13 8)
                                                  (ipv14 `cast` ...),
                                                () #)
                                             `cast` ...)
                                          `cast` ...)
                                         (ipv10 `cast` ...))
                                      `cast` ...
                                   } in
                                   let { (# ipv12, ipv13 #) ~ _
                                   <- unsafeFreezeByteArray# ipv11 (ipv14 `cast` ...)
                                   } in
                                   (# ipv12 `cast` ..., (Vector 0 ipv9 ipv13) `cast` ... #)
                               }))
                         `cast` ...
                      } in
                      let {
                        $w$j1
                        $w$j1 =
                          \ w4 ->
                            let { __DEFAULT ~ wild4 <- quotInt# w4 dt10 } in
                            let { __DEFAULT ~ wild5 <- remInt# w4 dt10 } in
                            let { DVector ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ~ nt1
                            <- (generateD
                                  $dDT1
                                  lvl32
                                  wild
                                  (\ i ->
                                     let { I# x1 ~ _ <- i } in
                                     let {
                                       $j
                                       $j =
                                         \ dt17 ->
                                           let {
                                             $j1
                                             $j1 =
                                               \ y ->
                                                 runSTRep
                                                   (\ @ s s1 ->
                                                      let { (# ipv6, ipv7 #) ~ _
                                                      <- newByteArray# (*# dt17 8) (s1 `cast` ...)
                                                      } in
                                                      let {
                                                        a12
                                                        a12 = +# dt6 y } in
                                                      let {
                                                        a13
                                                        a13 = +# dt6 y } in
                                                      letrec {
                                                        $s$wa
                                                        $s$wa =
                                                          \ sc sc1 sc2 ->
                                                            case >=# sc1 dt17 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild8
                                                                <- indexIntArray# dt8 (+# a13 sc1)
                                                                } in
                                                                let { __DEFAULT ~ wild9
                                                                <- indexIntArray# dt8 (+# a12 sc1)
                                                                } in
                                                                $s$wa
                                                                  ((writeIntArray#
                                                                      ipv7
                                                                      sc2
                                                                      (+# wild8 wild9)
                                                                      (sc `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc1 1)
                                                                  (+# sc2 1);
                                                              True -> (# sc, I# sc2 #)
                                                            }; } in
                                                      let { (# ipv8, ipv9 #) ~ _
                                                      <- $s$wa (ipv6 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt19 ~ _ <- ipv9 } in
                                                      let { (# ipv10, ipv11 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           ipv7 (ipv8 `cast` ...)
                                                      } in
                                                      (# ipv10 `cast` ...,
                                                         (Vector 0 dt19 ipv11) `cast` ... #)) } in
                                           case <# x1 wild5 of _ {
                                             False -> $j1 (+# (*# wild4 x1) wild5);
                                             True -> $j1 (*# (+# wild4 1) x1)
                                           } } in
                                     case <# x1 wild5 of _ {
                                       False -> $j wild4;
                                       True -> $j (+# wild4 1)
                                     }))
                               `cast` ...
                            } in
                            let { Vector dt18 dt19 dt20 ~ _
                            <- (runSTRep
                                  (\ @ s s1 ->
                                     let { (di, n) ~ _
                                     <- scanD
                                          $fDTInt
                                          lvl30
                                          wild
                                          $fNumInt_$c+
                                          lvl7
                                          ((DInt ipv6 ipv7 ipv8) `cast` ...)
                                     } in
                                     let { DInt ipv12 ipv13 ipv14 ~ nt2 <- di `cast` ... } in
                                     let { I# ipv15 ~ n1 <- n } in
                                     case >=# ipv15 0 of _ {
                                       False -> case lvl28 ipv15 of wild8 { };
                                       True ->
                                         let { (# ipv16, ipv17 #) ~ _
                                         <- newByteArray# (*# ipv15 8) (s1 `cast` ...)
                                         } in
                                         let {
                                           nt3
                                           nt3 = DProd (nt2 `cast` ...) (nt1 `cast` ...) } in
                                         let { (# ipv18, ipv19 #) ~ _
                                         <- ($wa1
                                               dt10
                                               ds1
                                               ds2
                                               (++
                                                  $fShowComp2
                                                  ($fShowComp_$cshowsPrec
                                                     $fShowComp7 (WJoinCopy n1) ([])))
                                               (WorkCopy n1)
                                               ((\ i s2 ->
                                                   let { (# ipv18, ipv19 #) ~ _
                                                   <- ((((myD lvl29 (nt3 `cast` ...)) `cast` ...) i)
                                                       `cast` ...)
                                                        s2
                                                   } in
                                                   let { (x, y) ~ _ <- ipv19 } in
                                                   let { I# ipv20 ~ _ <- x } in
                                                   let { Vector ipv21 ipv22 ipv23 ~ _
                                                   <- y `cast` ...
                                                   } in
                                                   (# copyByteArray#
                                                        ipv23
                                                        (*# ipv21 8)
                                                        ipv17
                                                        (*# ipv20 8)
                                                        (*# ipv22 8)
                                                        (ipv18 `cast` ...),
                                                      () #)
                                                   `cast` ...)
                                                `cast` ...)
                                               (ipv16 `cast` ...))
                                            `cast` ...
                                         } in
                                         let { (# ipv20, ipv21 #) ~ _
                                         <- unsafeFreezeByteArray# ipv17 (ipv18 `cast` ...)
                                         } in
                                         (# ipv20 `cast` ..., (Vector 0 ipv15 ipv21) `cast` ... #)
                                     }))
                               `cast` ...
                            } in
                            let {
                              dt21
                              dt21 = +# dt9 dt9 } in
                            (# dt14,
                               dt15,
                               dt16,
                               dt18,
                               dt19,
                               dt20,
                               dt21,
                               splitSegdOnElemsD
                                 wild (USegd dt14 dt15 dt16 dt18 dt19 dt20 dt21) #) } in
                      $w$j1 dt7 } in
                let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                <- $w$j dt4
                } in
                UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 } in
            let {
              yarr
              yarr =
                let { Vector ipv ipv1 ipv2 ~ _ <- lvl118 } in
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv3, ipv4 #) ~ _
                     <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
                     } in
                     letrec {
                       $s$wa
                       $s$wa =
                         \ sc sc1 sc2 ->
                           case >=# sc1 ipv1 of _ {
                             False ->
                               let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv sc1) } in
                               $s$wa
                                 ((writeArray#
                                     ipv4
                                     sc2
                                     (let { PNested vsegd xs segd flat ~ _ <- ipv5 `cast` ... } in
                                      (PNested vsegd (xs `cast` ...) segd (flat `cast` ...))
                                      `cast` ...)
                                     (sc `cast` ...))
                                  `cast` ...)
                                 (+# sc1 1)
                                 (+# sc2 1);
                             True -> (# sc, I# sc2 #)
                           }; } in
                     let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                     let { I# dt6 ~ _ <- ipv6 } in
                     let { (# ipv7, ipv8 #) ~ _
                     <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
                     } in
                     (# ipv7 `cast` ..., Vector 0 dt6 ipv8 #)) } in
            let {
              xarr
              xarr =
                let { Vector ipv ipv1 ipv2 ~ _ <- lvl143 } in
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv3, ipv4 #) ~ _
                     <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
                     } in
                     letrec {
                       $s$wa
                       $s$wa =
                         \ sc sc1 sc2 ->
                           case >=# sc1 ipv1 of _ {
                             False ->
                               let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv sc1) } in
                               $s$wa
                                 ((writeArray#
                                     ipv4
                                     sc2
                                     (let { PNested vsegd xs segd flat ~ _ <- ipv5 `cast` ... } in
                                      (PNested vsegd (xs `cast` ...) segd (flat `cast` ...))
                                      `cast` ...)
                                     (sc `cast` ...))
                                  `cast` ...)
                                 (+# sc1 1)
                                 (+# sc2 1);
                             True -> (# sc, I# sc2 #)
                           }; } in
                     let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                     let { I# dt6 ~ _ <- ipv6 } in
                     let { (# ipv7, ipv8 #) ~ _
                     <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
                     } in
                     (# ipv7 `cast` ..., Vector 0 dt6 ipv8 #)) } in
            let {
              ydata
              ydata =
                let { Vector ipv ipv1 ipv2 ~ _ <- yarr } in
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv3, ipv4 #) ~ _
                     <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
                     } in
                     letrec {
                       $s$wa
                       $s$wa =
                         \ sc sc1 sc2 ->
                           case >=# sc1 ipv1 of _ {
                             False ->
                               $s$wa
                                 ((writeArray#
                                     ipv4
                                     sc2
                                     (let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv sc1) } in
                                      let { PNested ds3 ds4 ds5 ds6 ~ _ <- ipv5 `cast` ... } in
                                      ($fPRInt_$ctoVectordPR (ds4 `cast` ...)) `cast` ...)
                                     (sc `cast` ...))
                                  `cast` ...)
                                 (+# sc1 1)
                                 (+# sc2 1);
                             True -> (# sc, I# sc2 #)
                           }; } in
                     let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                     let { I# dt6 ~ _ <- ipv6 } in
                     let { (# ipv7, ipv8 #) ~ _
                     <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
                     } in
                     (# ipv7 `cast` ..., Vector 0 dt6 ipv8 #)) } in
            let {
              xdata
              xdata =
                let { Vector ipv ipv1 ipv2 ~ _ <- xarr } in
                runSTRep
                  (\ @ s s1 ->
                     let { (# ipv3, ipv4 #) ~ _
                     <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
                     } in
                     letrec {
                       $s$wa
                       $s$wa =
                         \ sc sc1 sc2 ->
                           case >=# sc1 ipv1 of _ {
                             False ->
                               $s$wa
                                 ((writeArray#
                                     ipv4
                                     sc2
                                     (let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv sc1) } in
                                      let { PNested ds3 ds4 ds5 ds6 ~ _ <- ipv5 `cast` ... } in
                                      ($fPRInt_$ctoVectordPR (ds4 `cast` ...)) `cast` ...)
                                     (sc `cast` ...))
                                  `cast` ...)
                                 (+# sc1 1)
                                 (+# sc2 1);
                             True -> (# sc, I# sc2 #)
                           }; } in
                     let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                     let { I# dt6 ~ _ <- ipv6 } in
                     let { (# ipv7, ipv8 #) ~ _
                     <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
                     } in
                     (# ipv7 `cast` ..., Vector 0 dt6 ipv8 #)) } in
            let {
              segd'2
              segd'2 =
                let {
                  vsegids3
                  vsegids3 =
                    let {
                      a12
                      a12 = I# 0 } in
                    runSTRep
                      (\ @ s s1 ->
                         let { (# ipv, ipv1 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                         let {
                           a13
                           a13 = MVector 0 0 ipv1 } in
                         let {
                           z2
                           z2 = I# 0 } in
                         let {
                           a14
                           a14 = MVector 0 0 ipv1 } in
                         let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeByteArray# ipv1 ipv } in
                         (# ipv2 `cast` ..., (Vector 0 0 ipv3) `cast` ... #)) } in
                let { Vector ipv ipv1 ipv2 ~ _ <- xarr } in
                let { Vector ww1 ww2 ww3 ~ _
                <- runSTRep
                     (\ @ s s1 ->
                        let { (# ipv3, ipv4 #) ~ _
                        <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
                        } in
                        letrec {
                          $s$wa
                          $s$wa =
                            \ sc sc1 sc2 ->
                              case >=# sc1 ipv1 of _ {
                                False ->
                                  let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv sc1) } in
                                  $s$wa
                                    ((writeArray#
                                        ipv4
                                        sc2
                                        (let { PNested ds3 ds4 segd ds5 ~ _ <- ipv5 `cast` ... } in
                                         let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds6 ~ _
                                         <- segd
                                         } in
                                         (Vector dt dt3 dt4) `cast` ...)
                                        (sc `cast` ...))
                                     `cast` ...)
                                    (+# sc1 1)
                                    (+# sc2 1);
                                True -> (# sc, I# sc2 #)
                              }; } in
                        let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                        let { I# dt6 ~ _ <- ipv6 } in
                        let { (# ipv7, ipv8 #) ~ _
                        <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
                        } in
                        (# ipv7 `cast` ..., Vector 0 dt6 ipv8 #))
                } in
                let { Vectors ipv6 ipv7 ipv8 ipv9 ~ _
                <- runSTRep
                     ((\ @ s ->
                         let { Vector ww5 ww6 ww7 ~ _
                         <- runSTRep
                              (\ @ s1 s2 ->
                                 let { (# ipv3, ipv4 #) ~ _
                                 <- newArray# ww2 (uninitialised) (s2 `cast` ...)
                                 } in
                                 letrec {
                                   $s$wa
                                   $s$wa =
                                     \ sc sc1 sc2 ->
                                       case >=# sc1 ww2 of _ {
                                         False ->
                                           $s$wa
                                             ((writeArray#
                                                 ipv4
                                                 sc2
                                                 (runSTRep
                                                    (\ @ s3 s4 ->
                                                       let { (# ipv5 #) ~ _
                                                       <- indexArray# ww3 (+# ww1 sc1)
                                                       } in
                                                       let { Vector ipv6 ipv7 ipv8 ~ _
                                                       <- ipv5 `cast` ...
                                                       } in
                                                       let { (# ipv9, ipv10 #) ~ _
                                                       <- newByteArray# (*# ipv7 8) (s4 `cast` ...)
                                                       } in
                                                       letrec {
                                                         $s$wa1
                                                         $s$wa1 =
                                                           \ sc3 sc4 sc5 ->
                                                             case >=# sc4 ipv7 of _ {
                                                               False ->
                                                                 let { __DEFAULT ~ wild
                                                                 <- indexIntArray#
                                                                      ipv8 (+# ipv6 sc4)
                                                                 } in
                                                                 $s$wa1
                                                                   ((writeIntArray#
                                                                       ipv10
                                                                       sc5
                                                                       wild
                                                                       (sc3 `cast` ...))
                                                                    `cast` ...)
                                                                   (+# sc4 1)
                                                                   (+# sc5 1);
                                                               True -> (# sc3, I# sc5 #)
                                                             }; } in
                                                       let { (# ipv11, ipv12 #) ~ _
                                                       <- $s$wa1 (ipv9 `cast` ...) 0 0
                                                       } in
                                                       let { I# dt4 ~ dt3 <- ipv12 } in
                                                       let { (# ipv13, ipv14 #) ~ _
                                                       <- unsafeFreezeByteArray#
                                                            (ipv10 `cast` ...) ipv11
                                                       } in
                                                       (# ipv13 `cast` ...,
                                                          (ByteArray ipv14, lvl7, dt3) #)))
                                                 (sc `cast` ...))
                                              `cast` ...)
                                             (+# sc1 1)
                                             (+# sc2 1);
                                         True -> (# sc, I# sc2 #)
                                       }; } in
                                 let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                                 let { I# dt6 ~ _ <- ipv6 } in
                                 let { (# ipv7, ipv8 #) ~ _
                                 <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
                                 } in
                                 (# ipv7 `cast` ..., Vector 0 dt6 ipv8 #))
                         } in
                         (\ s1 ->
                            let { (# ipv3, ipv4 #) ~ _ <- newArrayArray# ww2 s1 } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 sc3 ->
                                  case ># sc2 0 of _ {
                                    False -> (# sc, () #);
                                    True ->
                                      case >=# sc3 ww2 of _ {
                                        False ->
                                          let { (ba, ds, ds2) ~ _
                                          <- runSTRep
                                               (\ @ s2 s3 ->
                                                  let { (# ipv5 #) ~ _
                                                  <- indexArray# ww3 (+# ww1 sc3)
                                                  } in
                                                  let { Vector ipv6 ipv7 ipv8 ~ _
                                                  <- ipv5 `cast` ...
                                                  } in
                                                  let { (# ipv9, ipv10 #) ~ _
                                                  <- newByteArray# (*# ipv7 8) (s3 `cast` ...)
                                                  } in
                                                  letrec {
                                                    $s$wa1
                                                    $s$wa1 =
                                                      \ sc4 sc5 sc6 ->
                                                        case >=# sc5 ipv7 of _ {
                                                          False ->
                                                            let { __DEFAULT ~ wild
                                                            <- indexIntArray# ipv8 (+# ipv6 sc5)
                                                            } in
                                                            $s$wa1
                                                              ((writeIntArray#
                                                                  ipv10 sc6 wild (sc4 `cast` ...))
                                                               `cast` ...)
                                                              (+# sc5 1)
                                                              (+# sc6 1);
                                                          True -> (# sc4, I# sc6 #)
                                                        }; } in
                                                  let { (# ipv11, ipv12 #) ~ _
                                                  <- $s$wa1 (ipv9 `cast` ...) 0 0
                                                  } in
                                                  let { I# dt4 ~ dt3 <- ipv12 } in
                                                  let { (# ipv13, ipv14 #) ~ _
                                                  <- unsafeFreezeByteArray# (ipv10 `cast` ...) ipv11
                                                  } in
                                                  (# ipv13 `cast` ...,
                                                     (ByteArray ipv14, lvl7, dt3) #))
                                          } in
                                          let { ByteArray ba# ~ _ <- ba } in
                                          let { __DEFAULT ~ s'#
                                          <- writeByteArrayArray# ipv4 sc1 ba# sc
                                          } in
                                          $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                        True -> (# sc, () #)
                                      }
                                  }; } in
                            let { (# ipv5, ipv6 #) ~ _ <- $s$wa ipv3 0 ww2 0 } in
                            let { (# ipv7, ipv8 #) ~ _
                            <- unsafeFreezeArrayArray# ipv4 ipv5
                            } in
                            (# ipv7,
                               let { (baStarts, ds3, ds4) ~ _
                               <- runSTRep
                                    (\ @ s2 s3 ->
                                       let { (# ipv9, ipv10 #) ~ _
                                       <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                       } in
                                       letrec {
                                         $s$wa1
                                         $s$wa1 =
                                           \ sc sc1 sc2 ->
                                             case >=# sc1 ww6 of _ {
                                               False ->
                                                 let { (# ipv11 #) ~ _
                                                 <- indexArray# ww7 (+# ww5 sc1)
                                                 } in
                                                 let { (a28, b1, c1) ~ _ <- ipv11 } in
                                                 let { I# x# ~ _ <- b1 } in
                                                 $s$wa1
                                                   ((writeIntArray# ipv10 sc2 x# (sc `cast` ...))
                                                    `cast` ...)
                                                   (+# sc1 1)
                                                   (+# sc2 1);
                                               True -> (# sc, I# sc2 #)
                                             }; } in
                                       let { (# ipv11, ipv12 #) ~ _
                                       <- $s$wa1 (ipv9 `cast` ...) 0 0
                                       } in
                                       let { I# dt4 ~ dt3 <- ipv12 } in
                                       let { (# ipv13, ipv14 #) ~ _
                                       <- unsafeFreezeByteArray# (ipv10 `cast` ...) ipv11
                                       } in
                                       (# ipv13 `cast` ..., (ByteArray ipv14, lvl7, dt3) #))
                               } in
                               let { ByteArray dt3 ~ _ <- baStarts } in
                               let { (baLens, ds5, ds6) ~ _
                               <- runSTRep
                                    (\ @ s2 s3 ->
                                       let { (# ipv9, ipv10 #) ~ _
                                       <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                       } in
                                       letrec {
                                         $s$wa1
                                         $s$wa1 =
                                           \ sc sc1 sc2 ->
                                             case >=# sc1 ww6 of _ {
                                               False ->
                                                 let { (# ipv11 #) ~ _
                                                 <- indexArray# ww7 (+# ww5 sc1)
                                                 } in
                                                 let { (a28, b1, c1) ~ _ <- ipv11 } in
                                                 let { I# x# ~ _ <- c1 } in
                                                 $s$wa1
                                                   ((writeIntArray# ipv10 sc2 x# (sc `cast` ...))
                                                    `cast` ...)
                                                   (+# sc1 1)
                                                   (+# sc2 1);
                                               True -> (# sc, I# sc2 #)
                                             }; } in
                                       let { (# ipv11, ipv12 #) ~ _
                                       <- $s$wa1 (ipv9 `cast` ...) 0 0
                                       } in
                                       let { I# dt5 ~ dt4 <- ipv12 } in
                                       let { (# ipv13, ipv14 #) ~ _
                                       <- unsafeFreezeByteArray# (ipv10 `cast` ...) ipv11
                                       } in
                                       (# ipv13 `cast` ..., (ByteArray ipv14, lvl7, dt4) #))
                               } in
                               let { ByteArray dt5 ~ _ <- baLens } in Vectors ww2 dt3 dt5 ipv8 #))
                         `cast` ...)
                      `cast` ...)
                } in
                let {
                  vsegids4
                  vsegids4 =
                    let {
                      a12
                      a12 = I# 0 } in
                    runSTRep
                      (\ @ s s1 ->
                         let { (# ipv3, ipv4 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                         let {
                           a13
                           a13 = MVector 0 0 ipv4 } in
                         let {
                           z2
                           z2 = I# 0 } in
                         let {
                           a14
                           a14 = MVector 0 0 ipv4 } in
                         let { (# ipv5, ipv10 #) ~ _
                         <- unsafeFreezeByteArray# ipv4 ipv3
                         } in
                         (# ipv5 `cast` ..., (Vector 0 0 ipv10) `cast` ... #)) } in
                let { Vector ipv3 ipv4 ipv5 ~ _ <- yarr } in
                let { Vector ww5 ww6 ww7 ~ _
                <- runSTRep
                     (\ @ s s1 ->
                        let { (# ipv10, ipv11 #) ~ _
                        <- newArray# ipv4 (uninitialised) (s1 `cast` ...)
                        } in
                        letrec {
                          $s$wa
                          $s$wa =
                            \ sc sc1 sc2 ->
                              case >=# sc1 ipv4 of _ {
                                False ->
                                  let { (# ipv12 #) ~ _ <- indexArray# ipv5 (+# ipv3 sc1) } in
                                  $s$wa
                                    ((writeArray#
                                        ipv11
                                        sc2
                                        (let { PNested ds3 ds4 segd ds5 ~ _ <- ipv12 `cast` ... } in
                                         let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds6 ~ _
                                         <- segd
                                         } in
                                         (Vector dt dt3 dt4) `cast` ...)
                                        (sc `cast` ...))
                                     `cast` ...)
                                    (+# sc1 1)
                                    (+# sc2 1);
                                True -> (# sc, I# sc2 #)
                              }; } in
                        let { (# ipv12, ipv13 #) ~ _ <- $s$wa (ipv10 `cast` ...) 0 0 } in
                        let { I# dt6 ~ _ <- ipv13 } in
                        let { (# ipv14, ipv15 #) ~ _
                        <- unsafeFreezeArray# ipv11 (ipv12 `cast` ...)
                        } in
                        (# ipv14 `cast` ..., Vector 0 dt6 ipv15 #))
                } in
                let { Vectors ipv16 ipv17 ipv18 ipv19 ~ _
                <- runSTRep
                     ((\ @ s ->
                         let { Vector ww9 ww10 ww11 ~ _
                         <- runSTRep
                              (\ @ s1 s2 ->
                                 let { (# ipv10, ipv11 #) ~ _
                                 <- newArray# ww6 (uninitialised) (s2 `cast` ...)
                                 } in
                                 letrec {
                                   $s$wa
                                   $s$wa =
                                     \ sc sc1 sc2 ->
                                       case >=# sc1 ww6 of _ {
                                         False ->
                                           $s$wa
                                             ((writeArray#
                                                 ipv11
                                                 sc2
                                                 (runSTRep
                                                    (\ @ s3 s4 ->
                                                       let { (# ipv12 #) ~ _
                                                       <- indexArray# ww7 (+# ww5 sc1)
                                                       } in
                                                       let { Vector ipv13 ipv14 ipv15 ~ _
                                                       <- ipv12 `cast` ...
                                                       } in
                                                       let { (# ipv16, ipv17 #) ~ _
                                                       <- newByteArray# (*# ipv14 8) (s4 `cast` ...)
                                                       } in
                                                       letrec {
                                                         $s$wa1
                                                         $s$wa1 =
                                                           \ sc3 sc4 sc5 ->
                                                             case >=# sc4 ipv14 of _ {
                                                               False ->
                                                                 let { __DEFAULT ~ wild
                                                                 <- indexIntArray#
                                                                      ipv15 (+# ipv13 sc4)
                                                                 } in
                                                                 $s$wa1
                                                                   ((writeIntArray#
                                                                       ipv17
                                                                       sc5
                                                                       wild
                                                                       (sc3 `cast` ...))
                                                                    `cast` ...)
                                                                   (+# sc4 1)
                                                                   (+# sc5 1);
                                                               True -> (# sc3, I# sc5 #)
                                                             }; } in
                                                       let { (# ipv18, ipv19 #) ~ _
                                                       <- $s$wa1 (ipv16 `cast` ...) 0 0
                                                       } in
                                                       let { I# dt4 ~ dt3 <- ipv19 } in
                                                       let { (# ipv20, ipv21 #) ~ _
                                                       <- unsafeFreezeByteArray#
                                                            (ipv17 `cast` ...) ipv18
                                                       } in
                                                       (# ipv20 `cast` ...,
                                                          (ByteArray ipv21, lvl7, dt3) #)))
                                                 (sc `cast` ...))
                                              `cast` ...)
                                             (+# sc1 1)
                                             (+# sc2 1);
                                         True -> (# sc, I# sc2 #)
                                       }; } in
                                 let { (# ipv12, ipv13 #) ~ _ <- $s$wa (ipv10 `cast` ...) 0 0 } in
                                 let { I# dt6 ~ _ <- ipv13 } in
                                 let { (# ipv14, ipv15 #) ~ _
                                 <- unsafeFreezeArray# ipv11 (ipv12 `cast` ...)
                                 } in
                                 (# ipv14 `cast` ..., Vector 0 dt6 ipv15 #))
                         } in
                         (\ s1 ->
                            let { (# ipv10, ipv11 #) ~ _ <- newArrayArray# ww6 s1 } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 sc3 ->
                                  case ># sc2 0 of _ {
                                    False -> (# sc, () #);
                                    True ->
                                      case >=# sc3 ww6 of _ {
                                        False ->
                                          let { (ba, ds, ds2) ~ _
                                          <- runSTRep
                                               (\ @ s2 s3 ->
                                                  let { (# ipv12 #) ~ _
                                                  <- indexArray# ww7 (+# ww5 sc3)
                                                  } in
                                                  let { Vector ipv13 ipv14 ipv15 ~ _
                                                  <- ipv12 `cast` ...
                                                  } in
                                                  let { (# ipv16, ipv17 #) ~ _
                                                  <- newByteArray# (*# ipv14 8) (s3 `cast` ...)
                                                  } in
                                                  letrec {
                                                    $s$wa1
                                                    $s$wa1 =
                                                      \ sc4 sc5 sc6 ->
                                                        case >=# sc5 ipv14 of _ {
                                                          False ->
                                                            let { __DEFAULT ~ wild
                                                            <- indexIntArray# ipv15 (+# ipv13 sc5)
                                                            } in
                                                            $s$wa1
                                                              ((writeIntArray#
                                                                  ipv17 sc6 wild (sc4 `cast` ...))
                                                               `cast` ...)
                                                              (+# sc5 1)
                                                              (+# sc6 1);
                                                          True -> (# sc4, I# sc6 #)
                                                        }; } in
                                                  let { (# ipv18, ipv19 #) ~ _
                                                  <- $s$wa1 (ipv16 `cast` ...) 0 0
                                                  } in
                                                  let { I# dt4 ~ dt3 <- ipv19 } in
                                                  let { (# ipv20, ipv21 #) ~ _
                                                  <- unsafeFreezeByteArray# (ipv17 `cast` ...) ipv18
                                                  } in
                                                  (# ipv20 `cast` ...,
                                                     (ByteArray ipv21, lvl7, dt3) #))
                                          } in
                                          let { ByteArray ba# ~ _ <- ba } in
                                          let { __DEFAULT ~ s'#
                                          <- writeByteArrayArray# ipv11 sc1 ba# sc
                                          } in
                                          $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                        True -> (# sc, () #)
                                      }
                                  }; } in
                            let { (# ipv12, ipv13 #) ~ _ <- $s$wa ipv10 0 ww6 0 } in
                            let { (# ipv14, ipv15 #) ~ _
                            <- unsafeFreezeArrayArray# ipv11 ipv12
                            } in
                            (# ipv14,
                               let { (baStarts, ds3, ds4) ~ _
                               <- runSTRep
                                    (\ @ s2 s3 ->
                                       let { (# ipv16, ipv17 #) ~ _
                                       <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                       } in
                                       letrec {
                                         $s$wa1
                                         $s$wa1 =
                                           \ sc sc1 sc2 ->
                                             case >=# sc1 ww10 of _ {
                                               False ->
                                                 let { (# ipv18 #) ~ _
                                                 <- indexArray# ww11 (+# ww9 sc1)
                                                 } in
                                                 let { (a28, b1, c1) ~ _ <- ipv18 } in
                                                 let { I# x# ~ _ <- b1 } in
                                                 $s$wa1
                                                   ((writeIntArray# ipv17 sc2 x# (sc `cast` ...))
                                                    `cast` ...)
                                                   (+# sc1 1)
                                                   (+# sc2 1);
                                               True -> (# sc, I# sc2 #)
                                             }; } in
                                       let { (# ipv18, ipv19 #) ~ _
                                       <- $s$wa1 (ipv16 `cast` ...) 0 0
                                       } in
                                       let { I# dt4 ~ dt3 <- ipv19 } in
                                       let { (# ipv20, ipv21 #) ~ _
                                       <- unsafeFreezeByteArray# (ipv17 `cast` ...) ipv18
                                       } in
                                       (# ipv20 `cast` ..., (ByteArray ipv21, lvl7, dt3) #))
                               } in
                               let { ByteArray dt3 ~ _ <- baStarts } in
                               let { (baLens, ds5, ds6) ~ _
                               <- runSTRep
                                    (\ @ s2 s3 ->
                                       let { (# ipv16, ipv17 #) ~ _
                                       <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                       } in
                                       letrec {
                                         $s$wa1
                                         $s$wa1 =
                                           \ sc sc1 sc2 ->
                                             case >=# sc1 ww10 of _ {
                                               False ->
                                                 let { (# ipv18 #) ~ _
                                                 <- indexArray# ww11 (+# ww9 sc1)
                                                 } in
                                                 let { (a28, b1, c1) ~ _ <- ipv18 } in
                                                 let { I# x# ~ _ <- c1 } in
                                                 $s$wa1
                                                   ((writeIntArray# ipv17 sc2 x# (sc `cast` ...))
                                                    `cast` ...)
                                                   (+# sc1 1)
                                                   (+# sc2 1);
                                               True -> (# sc, I# sc2 #)
                                             }; } in
                                       let { (# ipv18, ipv19 #) ~ _
                                       <- $s$wa1 (ipv16 `cast` ...) 0 0
                                       } in
                                       let { I# dt5 ~ dt4 <- ipv19 } in
                                       let { (# ipv20, ipv21 #) ~ _
                                       <- unsafeFreezeByteArray# (ipv17 `cast` ...) ipv18
                                       } in
                                       (# ipv20 `cast` ..., (ByteArray ipv21, lvl7, dt4) #))
                               } in
                               let { ByteArray dt5 ~ _ <- baLens } in
                               Vectors ww6 dt3 dt5 ipv15 #))
                         `cast` ...)
                      `cast` ...)
                } in
                let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds1 ~ _ <- segd'1 } in
                let { DVector ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ~ nt
                <- (imapD'
                      lvl70
                      $dDT1
                      lvl71
                      theGang
                      (\ _ x ->
                         let { (x1, y) ~ _ <- x } in
                         let { (x2, y1) ~ _ <- x1 } in
                         let { USegd dt9 dt10 dt11 dt14 dt15 dt16 dt17 ~ _ <- x2 } in
                         let { I# ipv10 ~ _ <- y1 } in
                         let { I# ipv11 ~ _ <- y } in
                         let { USSegd dt19 dt20 dt21 dt22 dt23 dt24 dt25 dt26 dt27
                                      dt28 ~ dt18
                         <- empty
                         } in
                         let { Vector ipv21 ipv22 ipv23 ~ _ <- dt21 `cast` ... } in
                         let { Vector ipv24 ipv25 ipv26 ~ _ <- dt20 `cast` ... } in
                         let { Vector ipv33 ipv34 ipv35 ~ _ <- vsegids4 `cast` ... } in
                         let { Vector ipv36 ipv37 ipv38 ~ _ <- vsegids3 `cast` ... } in
                         runSTRep
                           (\ @ s s1 ->
                              let { (# ipv12, ipv13 #) ~ _
                              <- newByteArray# (*# dt17 8) (s1 `cast` ...)
                              } in
                              letrec {
                                $s$wa
                                $s$wa =
                                  \ sc sc1 sc2 sc3 sc4 sc5 sc6 sc7 sc8 ->
                                    case sc3 of ds10 {
                                      __DEFAULT ->
                                        case sc7 of ds11 {
                                          __DEFAULT ->
                                            case sc4 of wild5 {
                                              __DEFAULT ->
                                                let { __DEFAULT ~ wild6
                                                <- indexIntArray# ipv17 sc1
                                                } in
                                                let { __DEFAULT ~ wild7
                                                <- indexByteArrayArray# ipv19 sc1
                                                } in
                                                let { __DEFAULT ~ wild8
                                                <- indexIntArray# wild7 (+# wild6 (+# sc2 sc5))
                                                } in
                                                $s$wa
                                                  ((writeIntArray# ipv13 sc8 wild8 (sc `cast` ...))
                                                   `cast` ...)
                                                  sc1
                                                  sc2
                                                  (-# ds10 1)
                                                  (-# wild5 1)
                                                  (+# sc5 1)
                                                  sc6
                                                  ds11
                                                  (+# sc8 1);
                                              0 ->
                                                let {
                                                  i1
                                                  i1 = +# sc6 1 } in
                                                let { __DEFAULT ~ wild6
                                                <- indexIntArray# ipv38 (+# ipv36 i1)
                                                } in
                                                let { __DEFAULT ~ wild7
                                                <- indexIntArray# ipv23 (+# ipv21 wild6)
                                                } in
                                                let { __DEFAULT ~ wild8
                                                <- indexIntArray# ipv26 (+# ipv24 wild6)
                                                } in
                                                let { __DEFAULT ~ wild9
                                                <- indexIntArray# dt24 (+# dt22 wild6)
                                                } in
                                                $s$wa sc wild7 wild8 ds10 wild9 0 i1 0 sc8
                                            };
                                          0 ->
                                            case sc4 of wild5 {
                                              __DEFAULT ->
                                                let { __DEFAULT ~ wild6
                                                <- indexIntArray# ipv7 sc1
                                                } in
                                                let { __DEFAULT ~ wild7
                                                <- indexByteArrayArray# ipv9 sc1
                                                } in
                                                let { __DEFAULT ~ wild8
                                                <- indexIntArray# wild7 (+# wild6 (+# sc2 sc5))
                                                } in
                                                $s$wa
                                                  ((writeIntArray# ipv13 sc8 wild8 (sc `cast` ...))
                                                   `cast` ...)
                                                  sc1
                                                  sc2
                                                  (-# ds10 1)
                                                  (-# wild5 1)
                                                  (+# sc5 1)
                                                  sc6
                                                  0
                                                  (+# sc8 1);
                                              0 ->
                                                let { __DEFAULT ~ wild6
                                                <- indexIntArray# ipv35 (+# ipv33 sc6)
                                                } in
                                                let { __DEFAULT ~ wild7
                                                <- indexIntArray# ipv23 (+# ipv21 wild6)
                                                } in
                                                let { __DEFAULT ~ wild8
                                                <- indexIntArray# ipv26 (+# ipv24 wild6)
                                                } in
                                                let { __DEFAULT ~ wild9
                                                <- indexIntArray# dt24 (+# dt22 wild6)
                                                } in
                                                $s$wa sc wild7 wild8 ds10 wild9 0 sc6 1 sc8
                                            }
                                        };
                                      0 -> (# sc, I# sc8 #)
                                    }; } in
                              case dt17 of wild5 {
                                __DEFAULT ->
                                  let { __DEFAULT ~ wild6
                                  <- indexIntArray# ipv38 (+# ipv36 ipv10)
                                  } in
                                  let { __DEFAULT ~ wild7
                                  <- indexIntArray# dt24 (+# dt22 wild6)
                                  } in
                                  case <# ipv11 wild7 of _ {
                                    False ->
                                      let { __DEFAULT ~ wild10
                                      <- indexIntArray# ipv35 (+# ipv33 ipv10)
                                      } in
                                      let { __DEFAULT ~ wild13
                                      <- indexIntArray# ipv23 (+# ipv21 wild10)
                                      } in
                                      let { __DEFAULT ~ wild14
                                      <- indexIntArray# ipv26 (+# ipv24 wild10)
                                      } in
                                      let {
                                        i1
                                        i1 = -# ipv11 wild7 } in
                                      let { __DEFAULT ~ wild11
                                      <- indexIntArray# dt24 (+# dt22 wild10)
                                      } in
                                      let { (# ipv14, ipv15 #) ~ _
                                      <- $s$wa
                                           (ipv12 `cast` ...)
                                           wild13
                                           wild14
                                           wild5
                                           (-# wild11 i1)
                                           i1
                                           ipv10
                                           1
                                           0
                                      } in
                                      let { I# dt30 ~ _ <- ipv15 } in
                                      let { (# ipv20, ipv27 #) ~ _
                                      <- unsafeFreezeByteArray# ipv13 (ipv14 `cast` ...)
                                      } in
                                      (# ipv20 `cast` ..., (Vector 0 dt30 ipv27) `cast` ... #);
                                    True ->
                                      let { __DEFAULT ~ wild11
                                      <- indexIntArray# ipv23 (+# ipv21 wild6)
                                      } in
                                      let { __DEFAULT ~ wild12
                                      <- indexIntArray# ipv26 (+# ipv24 wild6)
                                      } in
                                      let { (# ipv14, ipv15 #) ~ _
                                      <- $s$wa
                                           (ipv12 `cast` ...)
                                           wild11
                                           wild12
                                           wild5
                                           (-# wild7 ipv11)
                                           ipv11
                                           ipv10
                                           0
                                           0
                                      } in
                                      let { I# dt30 ~ _ <- ipv15 } in
                                      let { (# ipv20, ipv27 #) ~ _
                                      <- unsafeFreezeByteArray# ipv13 (ipv14 `cast` ...)
                                      } in
                                      (# ipv20 `cast` ..., (Vector 0 dt30 ipv27) `cast` ... #)
                                  };
                                0 ->
                                  let { (# ipv14, ipv15 #) ~ _
                                  <- $s$wa (ipv12 `cast` ...) 0 0 0 0 0 0 0 0
                                  } in
                                  let { I# dt30 ~ _ <- ipv15 } in
                                  let { (# ipv20, ipv27 #) ~ _
                                  <- unsafeFreezeByteArray# ipv13 (ipv14 `cast` ...)
                                  } in
                                  (# ipv20 `cast` ..., (Vector 0 dt30 ipv27) `cast` ... #)
                              }))
                      ds1)
                   `cast` ...
                } in
                let { Vector dt10 dt11 dt14 ~ _
                <- (runSTRep
                      (\ @ s s1 ->
                         let { (di, n) ~ _
                         <- scanD
                              $fDTInt
                              lvl69
                              theGang
                              $fNumInt_$c+
                              lvl7
                              ((DInt ipv10 ipv11 ipv12) `cast` ...)
                         } in
                         let { DInt ipv20 ipv21 ipv22 ~ nt1 <- di `cast` ... } in
                         let { I# ipv23 ~ n1 <- n } in
                         case >=# ipv23 0 of _ {
                           False -> case lvl67 ipv23 of wild4 { };
                           True ->
                             let { (# ipv24, ipv25 #) ~ _
                             <- newByteArray# (*# ipv23 8) (s1 `cast` ...)
                             } in
                             let { Gang ww9 ww10 ww11 ~ _ <- theGang } in
                             let {
                               nt2
                               nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                             let { (# ipv26, ipv27 #) ~ _
                             <- ($wa1
                                   ww9
                                   ww10
                                   ww11
                                   (++
                                      $fShowComp2
                                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                   (WorkCopy n1)
                                   ((\ i s2 ->
                                       let { (# ipv26, ipv27 #) ~ _
                                       <- ((((myD lvl68 (nt2 `cast` ...)) `cast` ...) i) `cast` ...)
                                            s2
                                       } in
                                       let { (x, y) ~ _ <- ipv27 } in
                                       let { I# ipv28 ~ _ <- x } in
                                       let { Vector ipv29 ipv30 ipv31 ~ _ <- y `cast` ... } in
                                       (# copyByteArray#
                                            ipv31
                                            (*# ipv29 8)
                                            ipv25
                                            (*# ipv28 8)
                                            (*# ipv30 8)
                                            (ipv26 `cast` ...),
                                          () #)
                                       `cast` ...)
                                    `cast` ...)
                                   (ipv24 `cast` ...))
                                `cast` ...
                             } in
                             let { (# ipv28, ipv29 #) ~ _
                             <- unsafeFreezeByteArray# ipv25 (ipv26 `cast` ...)
                             } in
                             (# ipv28 `cast` ..., (Vector 0 ipv23 ipv29) `cast` ... #)
                         }))
                   `cast` ...
                } in
                let { Gang dt15 ds2 ds3 ~ wild1 <- theGang } in
                let { __DEFAULT ~ wild3 <- quotInt# dt11 dt15 } in
                let { __DEFAULT ~ wild4 <- remInt# dt11 dt15 } in
                let { DProd dx dy ~ _
                <- (generateD
                      lvl63
                      lvl66
                      wild1
                      (\ i ->
                         let {
                           ys
                           ys =
                             let { I# x1 ~ _ <- i } in
                             let {
                               $j
                               $j =
                                 \ y ->
                                   let {
                                     $j1
                                     $j1 =
                                       \ dt16 ->
                                         runSTRep
                                           (\ @ s s1 ->
                                              let { (# ipv20, ipv21 #) ~ _
                                              <- newByteArray# (*# (+# 1 dt16) 8) (s1 `cast` ...)
                                              } in
                                              let {
                                                a12
                                                a12 = +# dt10 y } in
                                              letrec {
                                                $s$wa
                                                $s$wa =
                                                  \ sc sc1 sc2 sc3 ->
                                                    case >=# sc1 dt16 of _ {
                                                      False ->
                                                        let { __DEFAULT ~ wild7
                                                        <- indexIntArray# dt14 (+# a12 sc1)
                                                        } in
                                                        let {
                                                          x#
                                                          x# = +# sc2 wild7 } in
                                                        $s$wa
                                                          (+# sc 1)
                                                          (+# sc1 1)
                                                          x#
                                                          ((writeIntArray#
                                                              ipv21 sc x# (sc3 `cast` ...))
                                                           `cast` ...);
                                                      True -> (# sc3, I# sc #)
                                                    }; } in
                                              let { (# ipv22, ipv23 #) ~ _
                                              <- $s$wa
                                                   1
                                                   0
                                                   0
                                                   ((writeIntArray# ipv21 0 0 ipv20) `cast` ...)
                                              } in
                                              let { I# dt18 ~ _ <- ipv23 } in
                                              let { (# ipv24, ipv25 #) ~ _
                                              <- unsafeFreezeByteArray# ipv21 (ipv22 `cast` ...)
                                              } in
                                              (# ipv24 `cast` ...,
                                                 (Vector 0 dt18 ipv25) `cast` ... #)) } in
                                   case <# x1 wild4 of _ {
                                     False -> $j1 wild3;
                                     True -> $j1 (+# wild3 1)
                                   } } in
                             case <# x1 wild4 of _ {
                               False -> $j (+# (*# wild3 x1) wild4);
                               True -> $j (*# (+# wild3 1) x1)
                             } } in
                         (let { Vector dt16 dt17 dt18 ~ _ <- ys `cast` ... } in
                          (Vector dt16 (-# dt17 1) dt18) `cast` ...,
                          let { Vector dt16 dt17 dt18 ~ _ <- ys `cast` ... } in
                          let { __DEFAULT ~ wild6
                          <- indexIntArray# dt18 (+# dt16 (-# dt17 1))
                          } in
                          I# wild6)))
                   `cast` ...
                } in
                let { (x1, ds4) ~ _
                <- scanD $fDTInt lvl62 wild1 $fNumInt_$c+ lvl7 dy
                } in
                let { DInt ipv20 ipv21 ipv22 ~ nt1 <- x1 `cast` ... } in
                let { DVector ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ~ nt2
                <- (imapD'
                      lvl57
                      $dDT5
                      lvl59
                      wild1
                      lvl60
                      ((DProd (nt1 `cast` ...) dx) `cast` ...))
                   `cast` ...
                } in
                let { Vector dt17 dt18 dt19 ~ _
                <- (runSTRep
                      (\ @ s s1 ->
                         let { (di, n) ~ _
                         <- scanD
                              $fDTInt
                              lvl56
                              wild1
                              $fNumInt_$c+
                              lvl7
                              ((DInt ipv23 ipv24 ipv25) `cast` ...)
                         } in
                         let { DInt ipv29 ipv30 ipv31 ~ nt3 <- di `cast` ... } in
                         let { I# ipv32 ~ n1 <- n } in
                         case >=# ipv32 0 of _ {
                           False -> case lvl54 ipv32 of wild9 { };
                           True ->
                             let { (# ipv33, ipv34 #) ~ _
                             <- newByteArray# (*# ipv32 8) (s1 `cast` ...)
                             } in
                             let {
                               nt4
                               nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                             let { (# ipv35, ipv36 #) ~ _
                             <- ($wa1
                                   dt15
                                   ds2
                                   ds3
                                   (++
                                      $fShowComp2
                                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                   (WorkCopy n1)
                                   ((\ i s2 ->
                                       let { (# ipv35, ipv36 #) ~ _
                                       <- ((((myD lvl55 (nt4 `cast` ...)) `cast` ...) i) `cast` ...)
                                            s2
                                       } in
                                       let { (x, y) ~ _ <- ipv36 } in
                                       let { I# ipv37 ~ _ <- x } in
                                       let { Vector ipv38 ipv39 ipv40 ~ _ <- y `cast` ... } in
                                       (# copyByteArray#
                                            ipv40
                                            (*# ipv38 8)
                                            ipv34
                                            (*# ipv37 8)
                                            (*# ipv39 8)
                                            (ipv35 `cast` ...),
                                          () #)
                                       `cast` ...)
                                    `cast` ...)
                                   (ipv33 `cast` ...))
                                `cast` ...
                             } in
                             let { (# ipv37, ipv38 #) ~ _
                             <- unsafeFreezeByteArray# ipv34 (ipv35 `cast` ...)
                             } in
                             (# ipv37 `cast` ..., (Vector 0 ipv32 ipv38) `cast` ... #)
                         }))
                   `cast` ...
                } in
                let { I# dt21 ~ _
                <- foldD
                     $fDTInt
                     lvl50
                     wild1
                     $fNumInt_$c+
                     (generateD
                        $fDTInt
                        lvl53
                        wild1
                        ((\ i ->
                            let { I# x2 ~ _ <- i } in
                            let {
                              $w$j
                              $w$j =
                                \ w3 ->
                                  let {
                                    $w$j1
                                    $w$j1 =
                                      \ w4 ->
                                        let {
                                          a12
                                          a12 = +# dt10 w3 } in
                                        letrec {
                                          $s$wfoldlM'_loop
                                          $s$wfoldlM'_loop =
                                            \ sc sc1 ->
                                              case >=# sc w4 of _ {
                                                False ->
                                                  let { __DEFAULT ~ wild9
                                                  <- indexIntArray# dt14 (+# a12 sc)
                                                  } in
                                                  $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild9);
                                                True -> sc1
                                              }; } in
                                        $s$wfoldlM'_loop 0 0 } in
                                  case <# x2 wild4 of _ {
                                    False -> $w$j1 wild3;
                                    True -> $w$j1 (+# wild3 1)
                                  } } in
                            case <# x2 wild4 of _ {
                              False ->
                                let { __DEFAULT ~ ww8 <- $w$j (+# (*# wild3 x2) wild4) } in
                                (I# ww8) `cast` ...;
                              True ->
                                let { __DEFAULT ~ ww8 <- $w$j (*# (+# wild3 1) x2) } in
                                (I# ww8) `cast` ...
                            })
                         `cast` ...))
                } in
                UPSegd
                  dt10
                  dt11
                  dt14
                  dt17
                  dt18
                  dt19
                  dt21
                  (splitSegdOnElemsD
                     wild1 (USegd dt10 dt11 dt14 dt17 dt18 dt19 dt21)) } in
            let {
              a19
              a19 =
                let { UPSegd dt3 dt4 dt5 dt6 dt7 dt8 dt9 ds1 ~ _ <- segd'2 } in
                let {
                  a18
                  a18 =
                    let {
                      vsegids3
                      vsegids3 =
                        let {
                          a12
                          a12 = I# 0 } in
                        runSTRep
                          (\ @ s s1 ->
                             let { (# ipv, ipv1 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                             let {
                               a13
                               a13 = MVector 0 0 ipv1 } in
                             let {
                               z2
                               z2 = I# 0 } in
                             let {
                               a14
                               a14 = MVector 0 0 ipv1 } in
                             let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeByteArray# ipv1 ipv } in
                             (# ipv2 `cast` ..., (Vector 0 0 ipv3) `cast` ... #)) } in
                    let { Vector ipv ipv1 ipv2 ~ _ <- xarr } in
                    let { Vector ww1 ww2 ww3 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let { (# ipv3, ipv4 #) ~ _
                            <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
                            } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 ->
                                  case >=# sc1 ipv1 of _ {
                                    False ->
                                      let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv sc1) } in
                                      $s$wa
                                        ((writeArray#
                                            ipv4
                                            sc2
                                            (let { PNested ds4 ds5 ds6 ds7 ~ _
                                             <- ipv5 `cast` ...
                                             } in
                                             let { UPVSegd ds8 ds9 ds10 ds11 ds12 ds13 ~ _
                                             <- ds4
                                             } in
                                             let { UPSSegd dt10 dt11 dt14 dt15 dt16 dt17 dt18 dt19
                                                           dt20 dt21 ds14 ~ _
                                             <- ds12
                                             } in
                                             dt14)
                                            (sc `cast` ...))
                                         `cast` ...)
                                        (+# sc1 1)
                                        (+# sc2 1);
                                    True -> (# sc, I# sc2 #)
                                  }; } in
                            let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                            let { I# dt11 ~ _ <- ipv6 } in
                            let { (# ipv7, ipv8 #) ~ _
                            <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
                            } in
                            (# ipv7 `cast` ..., Vector 0 dt11 ipv8 #))
                    } in
                    let { Vectors dt dt10 dt11 dt14 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww5 ww6 ww7 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv3, ipv4 #) ~ _
                                     <- newArray# ww2 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww2 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv4
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv5 #) ~ _
                                                           <- indexArray# ww3 (+# ww1 sc1)
                                                           } in
                                                           let { Vector ipv6 ipv7 ipv8 ~ _
                                                           <- ipv5 `cast` ...
                                                           } in
                                                           let { (# ipv9, ipv10 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv7 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv7 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild4
                                                                     <- indexIntArray#
                                                                          ipv8 (+# ipv6 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv10
                                                                           sc5
                                                                           wild4
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv11, ipv12 #) ~ _
                                                           <- $s$wa1 (ipv9 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt11 ~ dt10 <- ipv12 } in
                                                           let { (# ipv13, ipv14 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv10 `cast` ...) ipv11
                                                           } in
                                                           (# ipv13 `cast` ...,
                                                              (ByteArray ipv14, lvl7, dt10) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                                     let { I# dt11 ~ _ <- ipv6 } in
                                     let { (# ipv7, ipv8 #) ~ _
                                     <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
                                     } in
                                     (# ipv7 `cast` ..., Vector 0 dt11 ipv8 #))
                             } in
                             (\ s1 ->
                                let { (# ipv3, ipv4 #) ~ _ <- newArrayArray# ww2 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww2 of _ {
                                            False ->
                                              let { (ba, ds, ds3) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv5 #) ~ _
                                                      <- indexArray# ww3 (+# ww1 sc3)
                                                      } in
                                                      let { Vector ipv6 ipv7 ipv8 ~ _
                                                      <- ipv5 `cast` ...
                                                      } in
                                                      let { (# ipv9, ipv10 #) ~ _
                                                      <- newByteArray# (*# ipv7 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv7 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild5
                                                                <- indexIntArray# ipv8 (+# ipv6 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv10
                                                                      sc6
                                                                      wild5
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv11, ipv12 #) ~ _
                                                      <- $s$wa1 (ipv9 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt11 ~ dt10 <- ipv12 } in
                                                      let { (# ipv13, ipv14 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv10 `cast` ...) ipv11
                                                      } in
                                                      (# ipv13 `cast` ...,
                                                         (ByteArray ipv14, lvl7, dt10) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv4 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv5, ipv6 #) ~ _ <- $s$wa ipv3 0 ww2 0 } in
                                let { (# ipv7, ipv8 #) ~ _
                                <- unsafeFreezeArrayArray# ipv4 ipv5
                                } in
                                (# ipv7,
                                   let { (baStarts, ds4, ds5) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv9, ipv10 #) ~ _
                                           <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww6 of _ {
                                                   False ->
                                                     let { (# ipv11 #) ~ _
                                                     <- indexArray# ww7 (+# ww5 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv11 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv10 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv11, ipv12 #) ~ _
                                           <- $s$wa1 (ipv9 `cast` ...) 0 0
                                           } in
                                           let { I# dt11 ~ dt10 <- ipv12 } in
                                           let { (# ipv13, ipv14 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv10 `cast` ...) ipv11
                                           } in
                                           (# ipv13 `cast` ..., (ByteArray ipv14, lvl7, dt10) #))
                                   } in
                                   let { ByteArray dt10 ~ _ <- baStarts } in
                                   let { (baLens, ds6, ds7) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv9, ipv10 #) ~ _
                                           <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww6 of _ {
                                                   False ->
                                                     let { (# ipv11 #) ~ _
                                                     <- indexArray# ww7 (+# ww5 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv11 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv10 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv11, ipv12 #) ~ _
                                           <- $s$wa1 (ipv9 `cast` ...) 0 0
                                           } in
                                           let { I# dt14 ~ dt11 <- ipv12 } in
                                           let { (# ipv13, ipv14 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv10 `cast` ...) ipv11
                                           } in
                                           (# ipv13 `cast` ..., (ByteArray ipv14, lvl7, dt11) #))
                                   } in
                                   let { ByteArray dt14 ~ _ <- baLens } in
                                   Vectors ww2 dt10 dt14 ipv8 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let { Vector ipv3 ipv4 ipv5 ~ _ <- xdata } in
                    let { Vector ipv6 ipv7 ipv8 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let { (# ipv6, ipv7 #) ~ _
                            <- newArray# ipv4 (uninitialised) (s1 `cast` ...)
                            } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 ->
                                  case >=# sc1 ipv4 of _ {
                                    False ->
                                      let { (# ipv8 #) ~ _ <- indexArray# ipv5 (+# ipv3 sc1) } in
                                      $s$wa
                                        ((writeArray#
                                            ipv7
                                            sc2
                                            (let { Vector dt15 dt16 dt17 ~ _ <- ipv8 } in I# dt16)
                                            (sc `cast` ...))
                                         `cast` ...)
                                        (+# sc1 1)
                                        (+# sc2 1);
                                    True -> (# sc, I# sc2 #)
                                  }; } in
                            let { (# ipv8, ipv9 #) ~ _ <- $s$wa (ipv6 `cast` ...) 0 0 } in
                            let { I# dt16 ~ _ <- ipv9 } in
                            let { (# ipv10, ipv11 #) ~ _
                            <- unsafeFreezeArray# ipv7 (ipv8 `cast` ...)
                            } in
                            (# ipv10 `cast` ..., Vector 0 dt16 ipv11 #))
                    } in
                    let { Vector ww5 ww6 ww7 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let {
                              $w$j
                              $w$j =
                                \ w3 ->
                                  let {
                                    $j
                                    $j =
                                      \ n# ->
                                        let { (# ipv9, ipv10 #) ~ _
                                        <- newArray# n# (uninitialised) (s1 `cast` ...)
                                        } in
                                        letrec {
                                          $s$wa
                                          $s$wa =
                                            \ sc sc1 sc2 sc3 sc4 sc5 ->
                                              case ># sc2 0 of _ {
                                                False -> (# sc5, I# sc #);
                                                True ->
                                                  case >=# sc3 ipv7 of _ {
                                                    False ->
                                                      let { (# ipv11 #) ~ _
                                                      <- indexArray# ipv8 (+# ipv6 sc3)
                                                      } in
                                                      $s$wa
                                                        (+# sc 1)
                                                        (+# sc1 1)
                                                        (-# sc2 1)
                                                        (+# sc3 1)
                                                        (let { I# x ~ _ <- sc4 } in
                                                         let { I# y ~ _ <- ipv11 } in I# (+# x y))
                                                        ((writeArray#
                                                            ipv10
                                                            sc
                                                            (let { Vector ipv12 ipv13 ipv14 ~ _
                                                             <- runSTRep
                                                                  (\ @ s2 s3 ->
                                                                     let { __DEFAULT ~ wild5
                                                                     <- indexByteArrayArray#
                                                                          dt14 sc1
                                                                     } in
                                                                     let { (# ipv12, ipv13 #) ~ _
                                                                     <- unsafeFreezeByteArray#
                                                                          (wild5 `cast` ...)
                                                                          (s3 `cast` ...)
                                                                     } in
                                                                     let { __DEFAULT ~ wild6
                                                                     <- indexIntArray# dt10 sc1
                                                                     } in
                                                                     let { __DEFAULT ~ wild7
                                                                     <- indexIntArray# dt11 sc1
                                                                     } in
                                                                     (# ipv12 `cast` ...,
                                                                        Vector wild6 wild7 ipv13 #))
                                                             } in
                                                             $wgetsrc
                                                               $fNumInt
                                                               $fUnboxInt
                                                               (runSTRep
                                                                  (\ @ s2 s3 ->
                                                                     let { (# ipv15, ipv16 #) ~ _
                                                                     <- newByteArray#
                                                                          (*# ipv13 8)
                                                                          (s3 `cast` ...)
                                                                     } in
                                                                     letrec {
                                                                       $s$wa1
                                                                       $s$wa1 =
                                                                         \ sc6 sc7 sc8 ->
                                                                           case >=# sc7 ipv13 of _ {
                                                                             False ->
                                                                               let { __DEFAULT ~ wild6
                                                                               <- indexIntArray#
                                                                                    ipv14
                                                                                    (+# ipv12 sc7)
                                                                               } in
                                                                               $s$wa1
                                                                                 ((writeIntArray#
                                                                                     ipv16
                                                                                     sc8
                                                                                     wild6
                                                                                     (sc6
                                                                                      `cast` ...))
                                                                                  `cast` ...)
                                                                                 (+# sc7 1)
                                                                                 (+# sc8 1);
                                                                             True ->
                                                                               (# sc6, I# sc8 #)
                                                                           }; } in
                                                                     let { (# ipv17, ipv18 #) ~ _
                                                                     <- $s$wa1
                                                                          (ipv15 `cast` ...) 0 0
                                                                     } in
                                                                     let { I# dt16 ~ _ <- ipv18 } in
                                                                     let { (# ipv19, ipv20 #) ~ _
                                                                     <- unsafeFreezeByteArray#
                                                                          ipv16 (ipv17 `cast` ...)
                                                                     } in
                                                                     (# ipv19 `cast` ...,
                                                                        (Vector 0 dt16 ipv20)
                                                                        `cast` ... #)))
                                                               sc4)
                                                            (sc5 `cast` ...))
                                                         `cast` ...);
                                                    True -> (# sc5, I# sc #)
                                                  }
                                              }; } in
                                        case ># dt 0 of _ {
                                          False ->
                                            let { (# ipv11, ipv12 #) ~ _
                                            <- unsafeFreezeArray# ipv10 ipv9
                                            } in
                                            (# ipv11 `cast` ..., Vector 0 0 ipv12 #);
                                          True ->
                                            case >=# 0 ipv7 of _ {
                                              False ->
                                                let { (# ipv11 #) ~ _ <- indexArray# ipv8 ipv6 } in
                                                let { (# ipv12, ipv13 #) ~ _
                                                <- $s$wa
                                                     1
                                                     1
                                                     (-# dt 1)
                                                     1
                                                     ipv11
                                                     ((writeArray#
                                                         ipv10
                                                         0
                                                         (let { Vector ipv12 ipv13 ipv14 ~ _
                                                          <- runSTRep
                                                               (\ @ s2 s3 ->
                                                                  let { __DEFAULT ~ wild5
                                                                  <- indexByteArrayArray# dt14 0
                                                                  } in
                                                                  let { (# ipv12, ipv13 #) ~ _
                                                                  <- unsafeFreezeByteArray#
                                                                       (wild5 `cast` ...)
                                                                       (s3 `cast` ...)
                                                                  } in
                                                                  let { __DEFAULT ~ wild6
                                                                  <- indexIntArray# dt10 0
                                                                  } in
                                                                  let { __DEFAULT ~ wild7
                                                                  <- indexIntArray# dt11 0
                                                                  } in
                                                                  (# ipv12 `cast` ...,
                                                                     Vector wild6 wild7 ipv13 #))
                                                          } in
                                                          $wgetsrc
                                                            $fNumInt
                                                            $fUnboxInt
                                                            (runSTRep
                                                               (\ @ s2 s3 ->
                                                                  let { (# ipv15, ipv16 #) ~ _
                                                                  <- newByteArray#
                                                                       (*# ipv13 8) (s3 `cast` ...)
                                                                  } in
                                                                  letrec {
                                                                    $s$wa1
                                                                    $s$wa1 =
                                                                      \ sc sc1 sc2 ->
                                                                        case >=# sc1 ipv13 of _ {
                                                                          False ->
                                                                            let { __DEFAULT ~ wild6
                                                                            <- indexIntArray#
                                                                                 ipv14
                                                                                 (+# ipv12 sc1)
                                                                            } in
                                                                            $s$wa1
                                                                              ((writeIntArray#
                                                                                  ipv16
                                                                                  sc2
                                                                                  wild6
                                                                                  (sc `cast` ...))
                                                                               `cast` ...)
                                                                              (+# sc1 1)
                                                                              (+# sc2 1);
                                                                          True -> (# sc, I# sc2 #)
                                                                        }; } in
                                                                  let { (# ipv17, ipv18 #) ~ _
                                                                  <- $s$wa1 (ipv15 `cast` ...) 0 0
                                                                  } in
                                                                  let { I# dt16 ~ _ <- ipv18 } in
                                                                  let { (# ipv19, ipv20 #) ~ _
                                                                  <- unsafeFreezeByteArray#
                                                                       ipv16 (ipv17 `cast` ...)
                                                                  } in
                                                                  (# ipv19 `cast` ...,
                                                                     (Vector 0 dt16 ipv20)
                                                                     `cast` ... #)))
                                                            (I# 0))
                                                         ipv9)
                                                      `cast` ...)
                                                } in
                                                let { I# dt16 ~ _ <- ipv13 } in
                                                let { (# ipv14, ipv15 #) ~ _
                                                <- unsafeFreezeArray# ipv10 (ipv12 `cast` ...)
                                                } in
                                                (# ipv14 `cast` ..., Vector 0 dt16 ipv15 #);
                                              True ->
                                                let { (# ipv11, ipv12 #) ~ _
                                                <- unsafeFreezeArray# ipv10 ipv9
                                                } in
                                                (# ipv11 `cast` ..., Vector 0 0 ipv12 #)
                                            }
                                        } } in
                                  case <=# w3 ipv7 of _ {
                                    False -> $j ipv7;
                                    True -> $j w3
                                  } } in
                            case <=# dt 0 of _ {
                              False -> $w$j dt;
                              True -> $w$j 0
                            })
                    } in
                    let { Vectors ipv9 ipv10 ipv11 ipv12 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww9 ww10 ww11 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv9, ipv10 #) ~ _
                                     <- newArray# ww6 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww6 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv10
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv11 #) ~ _
                                                           <- indexArray# ww7 (+# ww5 sc1)
                                                           } in
                                                           let { Vector ipv12 ipv13 ipv14 ~ _
                                                           <- ipv11 `cast` ...
                                                           } in
                                                           let { (# ipv15, ipv16 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv13 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv13 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild5
                                                                     <- indexIntArray#
                                                                          ipv14 (+# ipv12 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv16
                                                                           sc5
                                                                           wild5
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv17, ipv18 #) ~ _
                                                           <- $s$wa1 (ipv15 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt16 ~ dt15 <- ipv18 } in
                                                           let { (# ipv19, ipv20 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv16 `cast` ...) ipv17
                                                           } in
                                                           (# ipv19 `cast` ...,
                                                              (ByteArray ipv20, lvl7, dt15) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv11, ipv12 #) ~ _
                                     <- $s$wa (ipv9 `cast` ...) 0 0
                                     } in
                                     let { I# dt16 ~ _ <- ipv12 } in
                                     let { (# ipv13, ipv14 #) ~ _
                                     <- unsafeFreezeArray# ipv10 (ipv11 `cast` ...)
                                     } in
                                     (# ipv13 `cast` ..., Vector 0 dt16 ipv14 #))
                             } in
                             (\ s1 ->
                                let { (# ipv9, ipv10 #) ~ _ <- newArrayArray# ww6 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww6 of _ {
                                            False ->
                                              let { (ba, ds, ds3) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv11 #) ~ _
                                                      <- indexArray# ww7 (+# ww5 sc3)
                                                      } in
                                                      let { Vector ipv12 ipv13 ipv14 ~ _
                                                      <- ipv11 `cast` ...
                                                      } in
                                                      let { (# ipv15, ipv16 #) ~ _
                                                      <- newByteArray# (*# ipv13 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv13 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild6
                                                                <- indexIntArray#
                                                                     ipv14 (+# ipv12 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv16
                                                                      sc6
                                                                      wild6
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv17, ipv18 #) ~ _
                                                      <- $s$wa1 (ipv15 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt16 ~ dt15 <- ipv18 } in
                                                      let { (# ipv19, ipv20 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv16 `cast` ...) ipv17
                                                      } in
                                                      (# ipv19 `cast` ...,
                                                         (ByteArray ipv20, lvl7, dt15) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv10 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv11, ipv12 #) ~ _ <- $s$wa ipv9 0 ww6 0 } in
                                let { (# ipv13, ipv14 #) ~ _
                                <- unsafeFreezeArrayArray# ipv10 ipv11
                                } in
                                (# ipv13,
                                   let { (baStarts, ds4, ds5) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv15, ipv16 #) ~ _
                                           <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww10 of _ {
                                                   False ->
                                                     let { (# ipv17 #) ~ _
                                                     <- indexArray# ww11 (+# ww9 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv17 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv16 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv17, ipv18 #) ~ _
                                           <- $s$wa1 (ipv15 `cast` ...) 0 0
                                           } in
                                           let { I# dt16 ~ dt15 <- ipv18 } in
                                           let { (# ipv19, ipv20 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv16 `cast` ...) ipv17
                                           } in
                                           (# ipv19 `cast` ..., (ByteArray ipv20, lvl7, dt15) #))
                                   } in
                                   let { ByteArray dt16 ~ _ <- baStarts } in
                                   let { (baLens, ds6, ds7) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv15, ipv16 #) ~ _
                                           <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww10 of _ {
                                                   False ->
                                                     let { (# ipv17 #) ~ _
                                                     <- indexArray# ww11 (+# ww9 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv17 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv16 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv17, ipv18 #) ~ _
                                           <- $s$wa1 (ipv15 `cast` ...) 0 0
                                           } in
                                           let { I# dt18 ~ dt17 <- ipv18 } in
                                           let { (# ipv19, ipv20 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv16 `cast` ...) ipv17
                                           } in
                                           (# ipv19 `cast` ..., (ByteArray ipv20, lvl7, dt17) #))
                                   } in
                                   let { ByteArray dt18 ~ _ <- baLens } in
                                   Vectors ww6 dt16 dt18 ipv14 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let {
                      vsegids4
                      vsegids4 =
                        let {
                          a12
                          a12 = I# 0 } in
                        runSTRep
                          (\ @ s s1 ->
                             let { (# ipv13, ipv14 #) ~ _
                             <- newByteArray# 0 (s1 `cast` ...)
                             } in
                             let {
                               a13
                               a13 = MVector 0 0 ipv14 } in
                             let {
                               z2
                               z2 = I# 0 } in
                             let {
                               a14
                               a14 = MVector 0 0 ipv14 } in
                             let { (# ipv15, ipv16 #) ~ _
                             <- unsafeFreezeByteArray# ipv14 ipv13
                             } in
                             (# ipv15 `cast` ..., (Vector 0 0 ipv16) `cast` ... #)) } in
                    let { Vector ipv13 ipv14 ipv15 ~ _ <- yarr } in
                    let { Vector ww9 ww10 ww11 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let { (# ipv16, ipv17 #) ~ _
                            <- newArray# ipv14 (uninitialised) (s1 `cast` ...)
                            } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 ->
                                  case >=# sc1 ipv14 of _ {
                                    False ->
                                      let { (# ipv18 #) ~ _ <- indexArray# ipv15 (+# ipv13 sc1) } in
                                      $s$wa
                                        ((writeArray#
                                            ipv17
                                            sc2
                                            (let { PNested ds4 ds5 ds6 ds7 ~ _
                                             <- ipv18 `cast` ...
                                             } in
                                             let { UPVSegd ds8 ds9 ds10 ds11 ds12 ds13 ~ _
                                             <- ds4
                                             } in
                                             let { UPSSegd dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22
                                                           dt23 dt24 ds14 ~ _
                                             <- ds12
                                             } in
                                             dt17)
                                            (sc `cast` ...))
                                         `cast` ...)
                                        (+# sc1 1)
                                        (+# sc2 1);
                                    True -> (# sc, I# sc2 #)
                                  }; } in
                            let { (# ipv18, ipv19 #) ~ _ <- $s$wa (ipv16 `cast` ...) 0 0 } in
                            let { I# dt16 ~ _ <- ipv19 } in
                            let { (# ipv20, ipv21 #) ~ _
                            <- unsafeFreezeArray# ipv17 (ipv18 `cast` ...)
                            } in
                            (# ipv20 `cast` ..., Vector 0 dt16 ipv21 #))
                    } in
                    let { Vectors dt15 dt16 dt17 dt18 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww13 ww14 ww15 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv16, ipv17 #) ~ _
                                     <- newArray# ww10 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww10 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv17
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv18 #) ~ _
                                                           <- indexArray# ww11 (+# ww9 sc1)
                                                           } in
                                                           let { Vector ipv19 ipv20 ipv21 ~ _
                                                           <- ipv18 `cast` ...
                                                           } in
                                                           let { (# ipv22, ipv23 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv20 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv20 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild5
                                                                     <- indexIntArray#
                                                                          ipv21 (+# ipv19 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv23
                                                                           sc5
                                                                           wild5
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv24, ipv25 #) ~ _
                                                           <- $s$wa1 (ipv22 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt16 ~ dt15 <- ipv25 } in
                                                           let { (# ipv26, ipv27 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv23 `cast` ...) ipv24
                                                           } in
                                                           (# ipv26 `cast` ...,
                                                              (ByteArray ipv27, lvl7, dt15) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv18, ipv19 #) ~ _
                                     <- $s$wa (ipv16 `cast` ...) 0 0
                                     } in
                                     let { I# dt16 ~ _ <- ipv19 } in
                                     let { (# ipv20, ipv21 #) ~ _
                                     <- unsafeFreezeArray# ipv17 (ipv18 `cast` ...)
                                     } in
                                     (# ipv20 `cast` ..., Vector 0 dt16 ipv21 #))
                             } in
                             (\ s1 ->
                                let { (# ipv16, ipv17 #) ~ _ <- newArrayArray# ww10 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww10 of _ {
                                            False ->
                                              let { (ba, ds, ds3) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv18 #) ~ _
                                                      <- indexArray# ww11 (+# ww9 sc3)
                                                      } in
                                                      let { Vector ipv19 ipv20 ipv21 ~ _
                                                      <- ipv18 `cast` ...
                                                      } in
                                                      let { (# ipv22, ipv23 #) ~ _
                                                      <- newByteArray# (*# ipv20 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv20 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild6
                                                                <- indexIntArray#
                                                                     ipv21 (+# ipv19 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv23
                                                                      sc6
                                                                      wild6
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv24, ipv25 #) ~ _
                                                      <- $s$wa1 (ipv22 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt16 ~ dt15 <- ipv25 } in
                                                      let { (# ipv26, ipv27 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv23 `cast` ...) ipv24
                                                      } in
                                                      (# ipv26 `cast` ...,
                                                         (ByteArray ipv27, lvl7, dt15) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv17 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv18, ipv19 #) ~ _ <- $s$wa ipv16 0 ww10 0 } in
                                let { (# ipv20, ipv21 #) ~ _
                                <- unsafeFreezeArrayArray# ipv17 ipv18
                                } in
                                (# ipv20,
                                   let { (baStarts, ds4, ds5) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv22, ipv23 #) ~ _
                                           <- newByteArray# (*# ww14 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww14 of _ {
                                                   False ->
                                                     let { (# ipv24 #) ~ _
                                                     <- indexArray# ww15 (+# ww13 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv24 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv23 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv24, ipv25 #) ~ _
                                           <- $s$wa1 (ipv22 `cast` ...) 0 0
                                           } in
                                           let { I# dt16 ~ dt15 <- ipv25 } in
                                           let { (# ipv26, ipv27 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv23 `cast` ...) ipv24
                                           } in
                                           (# ipv26 `cast` ..., (ByteArray ipv27, lvl7, dt15) #))
                                   } in
                                   let { ByteArray dt16 ~ _ <- baStarts } in
                                   let { (baLens, ds6, ds7) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv22, ipv23 #) ~ _
                                           <- newByteArray# (*# ww14 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww14 of _ {
                                                   False ->
                                                     let { (# ipv24 #) ~ _
                                                     <- indexArray# ww15 (+# ww13 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv24 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv23 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv24, ipv25 #) ~ _
                                           <- $s$wa1 (ipv22 `cast` ...) 0 0
                                           } in
                                           let { I# dt18 ~ dt17 <- ipv25 } in
                                           let { (# ipv26, ipv27 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv23 `cast` ...) ipv24
                                           } in
                                           (# ipv26 `cast` ..., (ByteArray ipv27, lvl7, dt17) #))
                                   } in
                                   let { ByteArray dt18 ~ _ <- baLens } in
                                   Vectors ww10 dt16 dt18 ipv21 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let { Vector ipv16 ipv17 ipv18 ~ _ <- ydata } in
                    let { Vector ww13 ww14 ww15 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let {
                              $w$j
                              $w$j =
                                \ w3 ->
                                  let {
                                    $j
                                    $j =
                                      \ n# ->
                                        let { (# ipv19, ipv20 #) ~ _
                                        <- newArray# n# (uninitialised) (s1 `cast` ...)
                                        } in
                                        letrec {
                                          $s$wa
                                          $s$wa =
                                            \ sc sc1 sc2 sc3 sc4 sc5 ->
                                              case ># sc3 0 of _ {
                                                False -> (# sc, I# sc1 #);
                                                True ->
                                                  case >=# sc4 ipv17 of _ {
                                                    False ->
                                                      let { (# ipv21 #) ~ _
                                                      <- indexArray# ipv18 (+# ipv16 sc4)
                                                      } in
                                                      $s$wa
                                                        ((writeArray#
                                                            ipv20
                                                            sc1
                                                            (let { Vector ipv22 ipv23 ipv24 ~ _
                                                             <- runSTRep
                                                                  (\ @ s2 s3 ->
                                                                     let { __DEFAULT ~ wild6
                                                                     <- indexByteArrayArray#
                                                                          dt18 sc2
                                                                     } in
                                                                     let { (# ipv22, ipv23 #) ~ _
                                                                     <- unsafeFreezeByteArray#
                                                                          (wild6 `cast` ...)
                                                                          (s3 `cast` ...)
                                                                     } in
                                                                     let { __DEFAULT ~ wild7
                                                                     <- indexIntArray# dt16 sc2
                                                                     } in
                                                                     let { __DEFAULT ~ wild8
                                                                     <- indexIntArray# dt17 sc2
                                                                     } in
                                                                     (# ipv22 `cast` ...,
                                                                        Vector wild7 wild8 ipv23 #))
                                                             } in
                                                             $wgetsrc
                                                               $fNumInt
                                                               $fUnboxInt
                                                               (runSTRep
                                                                  (\ @ s2 s3 ->
                                                                     let { (# ipv25, ipv26 #) ~ _
                                                                     <- newByteArray#
                                                                          (*# ipv23 8)
                                                                          (s3 `cast` ...)
                                                                     } in
                                                                     letrec {
                                                                       $s$wa1
                                                                       $s$wa1 =
                                                                         \ sc6 sc7 sc8 ->
                                                                           case >=# sc7 ipv23 of _ {
                                                                             False ->
                                                                               let { __DEFAULT ~ wild7
                                                                               <- indexIntArray#
                                                                                    ipv24
                                                                                    (+# ipv22 sc7)
                                                                               } in
                                                                               $s$wa1
                                                                                 ((writeIntArray#
                                                                                     ipv26
                                                                                     sc8
                                                                                     wild7
                                                                                     (sc6
                                                                                      `cast` ...))
                                                                                  `cast` ...)
                                                                                 (+# sc7 1)
                                                                                 (+# sc8 1);
                                                                             True ->
                                                                               (# sc6, I# sc8 #)
                                                                           }; } in
                                                                     let { (# ipv27, ipv28 #) ~ _
                                                                     <- $s$wa1
                                                                          (ipv25 `cast` ...) 0 0
                                                                     } in
                                                                     let { I# dt20 ~ _ <- ipv28 } in
                                                                     let { (# ipv29, ipv30 #) ~ _
                                                                     <- unsafeFreezeByteArray#
                                                                          ipv26 (ipv27 `cast` ...)
                                                                     } in
                                                                     (# ipv29 `cast` ...,
                                                                        (Vector 0 dt20 ipv30)
                                                                        `cast` ... #)))
                                                               sc5)
                                                            (sc `cast` ...))
                                                         `cast` ...)
                                                        (+# sc1 1)
                                                        (+# sc2 1)
                                                        (-# sc3 1)
                                                        (+# sc4 1)
                                                        (let { I# x ~ _ <- sc5 } in
                                                         let { Vector dt19 dt20 dt21 ~ _
                                                         <- ipv21
                                                         } in
                                                         I# (+# x dt20));
                                                    True -> (# sc, I# sc1 #)
                                                  }
                                              }; } in
                                        let { (# ipv21, ipv22 #) ~ _
                                        <- $s$wa
                                             (ipv19 `cast` ...)
                                             0
                                             0
                                             dt15
                                             0
                                             (letrec {
                                                $s$wfoldlM'_loop
                                                $s$wfoldlM'_loop =
                                                  \ sc sc1 ->
                                                    case >=# sc ipv7 of _ {
                                                      False ->
                                                        let { (# ipv21 #) ~ _
                                                        <- indexArray# ipv8 (+# ipv6 sc)
                                                        } in
                                                        let { I# y ~ _ <- ipv21 } in
                                                        $s$wfoldlM'_loop (+# sc 1) (+# sc1 y);
                                                      True -> sc1
                                                    }; } in
                                              let { __DEFAULT ~ ww12 <- $s$wfoldlM'_loop 0 0 } in
                                              I# ww12)
                                        } in
                                        let { I# dt20 ~ _ <- ipv22 } in
                                        let { (# ipv23, ipv24 #) ~ _
                                        <- unsafeFreezeArray# ipv20 (ipv21 `cast` ...)
                                        } in
                                        (# ipv23 `cast` ..., Vector 0 dt20 ipv24 #) } in
                                  case <=# w3 ipv17 of _ {
                                    False -> $j ipv17;
                                    True -> $j w3
                                  } } in
                            case <=# dt15 0 of _ {
                              False -> $w$j dt15;
                              True -> $w$j 0
                            })
                    } in
                    let { Vectors ipv19 ipv20 ipv21 ipv22 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww17 ww18 ww19 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv19, ipv20 #) ~ _
                                     <- newArray# ww14 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww14 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv20
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv21 #) ~ _
                                                           <- indexArray# ww15 (+# ww13 sc1)
                                                           } in
                                                           let { Vector ipv22 ipv23 ipv24 ~ _
                                                           <- ipv21 `cast` ...
                                                           } in
                                                           let { (# ipv25, ipv26 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv23 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv23 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild6
                                                                     <- indexIntArray#
                                                                          ipv24 (+# ipv22 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv26
                                                                           sc5
                                                                           wild6
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv27, ipv28 #) ~ _
                                                           <- $s$wa1 (ipv25 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt20 ~ dt19 <- ipv28 } in
                                                           let { (# ipv29, ipv30 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv26 `cast` ...) ipv27
                                                           } in
                                                           (# ipv29 `cast` ...,
                                                              (ByteArray ipv30, lvl7, dt19) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv21, ipv22 #) ~ _
                                     <- $s$wa (ipv19 `cast` ...) 0 0
                                     } in
                                     let { I# dt20 ~ _ <- ipv22 } in
                                     let { (# ipv23, ipv24 #) ~ _
                                     <- unsafeFreezeArray# ipv20 (ipv21 `cast` ...)
                                     } in
                                     (# ipv23 `cast` ..., Vector 0 dt20 ipv24 #))
                             } in
                             (\ s1 ->
                                let { (# ipv19, ipv20 #) ~ _ <- newArrayArray# ww14 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww14 of _ {
                                            False ->
                                              let { (ba, ds, ds3) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv21 #) ~ _
                                                      <- indexArray# ww15 (+# ww13 sc3)
                                                      } in
                                                      let { Vector ipv22 ipv23 ipv24 ~ _
                                                      <- ipv21 `cast` ...
                                                      } in
                                                      let { (# ipv25, ipv26 #) ~ _
                                                      <- newByteArray# (*# ipv23 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv23 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild7
                                                                <- indexIntArray#
                                                                     ipv24 (+# ipv22 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv26
                                                                      sc6
                                                                      wild7
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv27, ipv28 #) ~ _
                                                      <- $s$wa1 (ipv25 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt20 ~ dt19 <- ipv28 } in
                                                      let { (# ipv29, ipv30 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv26 `cast` ...) ipv27
                                                      } in
                                                      (# ipv29 `cast` ...,
                                                         (ByteArray ipv30, lvl7, dt19) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv20 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv21, ipv22 #) ~ _ <- $s$wa ipv19 0 ww14 0 } in
                                let { (# ipv23, ipv24 #) ~ _
                                <- unsafeFreezeArrayArray# ipv20 ipv21
                                } in
                                (# ipv23,
                                   let { (baStarts, ds4, ds5) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv25, ipv26 #) ~ _
                                           <- newByteArray# (*# ww18 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww18 of _ {
                                                   False ->
                                                     let { (# ipv27 #) ~ _
                                                     <- indexArray# ww19 (+# ww17 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv27 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv26 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv27, ipv28 #) ~ _
                                           <- $s$wa1 (ipv25 `cast` ...) 0 0
                                           } in
                                           let { I# dt20 ~ dt19 <- ipv28 } in
                                           let { (# ipv29, ipv30 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv26 `cast` ...) ipv27
                                           } in
                                           (# ipv29 `cast` ..., (ByteArray ipv30, lvl7, dt19) #))
                                   } in
                                   let { ByteArray dt20 ~ _ <- baStarts } in
                                   let { (baLens, ds6, ds7) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv25, ipv26 #) ~ _
                                           <- newByteArray# (*# ww18 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww18 of _ {
                                                   False ->
                                                     let { (# ipv27 #) ~ _
                                                     <- indexArray# ww19 (+# ww17 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv27 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv26 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv27, ipv28 #) ~ _
                                           <- $s$wa1 (ipv25 `cast` ...) 0 0
                                           } in
                                           let { I# dt22 ~ dt21 <- ipv28 } in
                                           let { (# ipv29, ipv30 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv26 `cast` ...) ipv27
                                           } in
                                           (# ipv29 `cast` ..., (ByteArray ipv30, lvl7, dt21) #))
                                   } in
                                   let { ByteArray dt22 ~ _ <- baLens } in
                                   Vectors ww14 dt20 dt22 ipv24 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let { UPSegd dt19 dt20 dt21 dt22 dt23 dt24 dt25 ds2 ~ _
                    <- segd'1
                    } in
                    let { DVector ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ~ nt
                    <- (imapD'
                          lvl80
                          $dDT1
                          lvl81
                          theGang
                          (\ _ x ->
                             let { (x1, y) ~ _ <- x } in
                             let { (x2, y1) ~ _ <- x1 } in
                             let { USegd dt26 dt27 dt28 dt29 dt30 dt31 dt32 ~ _ <- x2 } in
                             let { I# ipv23 ~ _ <- y1 } in
                             let { I# ipv24 ~ _ <- y } in
                             let { USSegd dt34 dt35 dt36 dt37 dt38 dt39 dt40 dt41 dt42
                                          dt43 ~ dt33
                             <- empty
                             } in
                             let { Vector ipv25 ipv26 ipv27 ~ _ <- dt36 `cast` ... } in
                             let { Vector ipv28 ipv29 ipv30 ~ _ <- dt35 `cast` ... } in
                             let { Vector ipv33 ipv34 ipv35 ~ _ <- vsegids4 `cast` ... } in
                             let { Vector ipv36 ipv37 ipv38 ~ _ <- vsegids3 `cast` ... } in
                             runSTRep
                               (\ @ s s1 ->
                                  let { (# ipv31, ipv32 #) ~ _
                                  <- newByteArray# (*# dt32 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $s$wa
                                    $s$wa =
                                      \ sc sc1 sc2 sc3 sc4 sc5 sc6 sc7 sc8 ->
                                        case sc3 of ds10 {
                                          __DEFAULT ->
                                            case sc7 of ds11 {
                                              __DEFAULT ->
                                                case sc4 of wild8 {
                                                  __DEFAULT ->
                                                    let { __DEFAULT ~ wild9
                                                    <- indexIntArray# ipv20 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild10
                                                    <- indexByteArrayArray# ipv22 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild11
                                                    <- indexIntArray# wild10 (+# wild9 (+# sc2 sc5))
                                                    } in
                                                    $s$wa
                                                      ((writeIntArray#
                                                          ipv32 sc8 wild11 (sc `cast` ...))
                                                       `cast` ...)
                                                      sc1
                                                      sc2
                                                      (-# ds10 1)
                                                      (-# wild8 1)
                                                      (+# sc5 1)
                                                      sc6
                                                      ds11
                                                      (+# sc8 1);
                                                  0 ->
                                                    let {
                                                      i1
                                                      i1 = +# sc6 1 } in
                                                    let { __DEFAULT ~ wild9
                                                    <- indexIntArray# ipv38 (+# ipv36 i1)
                                                    } in
                                                    let { __DEFAULT ~ wild10
                                                    <- indexIntArray# ipv27 (+# ipv25 wild9)
                                                    } in
                                                    let { __DEFAULT ~ wild11
                                                    <- indexIntArray# ipv30 (+# ipv28 wild9)
                                                    } in
                                                    let { __DEFAULT ~ wild12
                                                    <- indexIntArray# dt39 (+# dt37 wild9)
                                                    } in
                                                    $s$wa sc wild10 wild11 ds10 wild12 0 i1 0 sc8
                                                };
                                              0 ->
                                                case sc4 of wild8 {
                                                  __DEFAULT ->
                                                    let { __DEFAULT ~ wild9
                                                    <- indexIntArray# ipv10 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild10
                                                    <- indexByteArrayArray# ipv12 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild11
                                                    <- indexIntArray# wild10 (+# wild9 (+# sc2 sc5))
                                                    } in
                                                    $s$wa
                                                      ((writeIntArray#
                                                          ipv32 sc8 wild11 (sc `cast` ...))
                                                       `cast` ...)
                                                      sc1
                                                      sc2
                                                      (-# ds10 1)
                                                      (-# wild8 1)
                                                      (+# sc5 1)
                                                      sc6
                                                      0
                                                      (+# sc8 1);
                                                  0 ->
                                                    let { __DEFAULT ~ wild9
                                                    <- indexIntArray# ipv35 (+# ipv33 sc6)
                                                    } in
                                                    let { __DEFAULT ~ wild10
                                                    <- indexIntArray# ipv27 (+# ipv25 wild9)
                                                    } in
                                                    let { __DEFAULT ~ wild11
                                                    <- indexIntArray# ipv30 (+# ipv28 wild9)
                                                    } in
                                                    let { __DEFAULT ~ wild12
                                                    <- indexIntArray# dt39 (+# dt37 wild9)
                                                    } in
                                                    $s$wa sc wild10 wild11 ds10 wild12 0 sc6 1 sc8
                                                }
                                            };
                                          0 -> (# sc, I# sc8 #)
                                        }; } in
                                  case dt32 of wild8 {
                                    __DEFAULT ->
                                      let { __DEFAULT ~ wild9
                                      <- indexIntArray# ipv38 (+# ipv36 ipv23)
                                      } in
                                      let { __DEFAULT ~ wild10
                                      <- indexIntArray# dt39 (+# dt37 wild9)
                                      } in
                                      case <# ipv24 wild10 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild12
                                          <- indexIntArray# ipv35 (+# ipv33 ipv23)
                                          } in
                                          let { __DEFAULT ~ wild13
                                          <- indexIntArray# ipv27 (+# ipv25 wild12)
                                          } in
                                          let { __DEFAULT ~ wild14
                                          <- indexIntArray# ipv30 (+# ipv28 wild12)
                                          } in
                                          let {
                                            i1
                                            i1 = -# ipv24 wild10 } in
                                          let { __DEFAULT ~ wild15
                                          <- indexIntArray# dt39 (+# dt37 wild12)
                                          } in
                                          let { (# ipv39, ipv40 #) ~ _
                                          <- $s$wa
                                               (ipv31 `cast` ...)
                                               wild13
                                               wild14
                                               wild8
                                               (-# wild15 i1)
                                               i1
                                               ipv23
                                               1
                                               0
                                          } in
                                          let { I# dt45 ~ _ <- ipv40 } in
                                          let { (# ipv41, ipv42 #) ~ _
                                          <- unsafeFreezeByteArray# ipv32 (ipv39 `cast` ...)
                                          } in
                                          (# ipv41 `cast` ..., (Vector 0 dt45 ipv42) `cast` ... #);
                                        True ->
                                          let { __DEFAULT ~ wild12
                                          <- indexIntArray# ipv27 (+# ipv25 wild9)
                                          } in
                                          let { __DEFAULT ~ wild13
                                          <- indexIntArray# ipv30 (+# ipv28 wild9)
                                          } in
                                          let { (# ipv39, ipv40 #) ~ _
                                          <- $s$wa
                                               (ipv31 `cast` ...)
                                               wild12
                                               wild13
                                               wild8
                                               (-# wild10 ipv24)
                                               ipv24
                                               ipv23
                                               0
                                               0
                                          } in
                                          let { I# dt45 ~ _ <- ipv40 } in
                                          let { (# ipv41, ipv42 #) ~ _
                                          <- unsafeFreezeByteArray# ipv32 (ipv39 `cast` ...)
                                          } in
                                          (# ipv41 `cast` ..., (Vector 0 dt45 ipv42) `cast` ... #)
                                      };
                                    0 ->
                                      let { (# ipv39, ipv40 #) ~ _
                                      <- $s$wa (ipv31 `cast` ...) 0 0 0 0 0 0 0 0
                                      } in
                                      let { I# dt45 ~ _ <- ipv40 } in
                                      let { (# ipv41, ipv42 #) ~ _
                                      <- unsafeFreezeByteArray# ipv32 (ipv39 `cast` ...)
                                      } in
                                      (# ipv41 `cast` ..., (Vector 0 dt45 ipv42) `cast` ... #)
                                  }))
                          ds2)
                       `cast` ...
                    } in
                    runSTRep
                      (\ @ s s1 ->
                         let { (di, n) ~ _
                         <- scanD
                              $fDTInt
                              lvl79
                              theGang
                              $fNumInt_$c+
                              lvl7
                              ((DInt ipv23 ipv24 ipv25) `cast` ...)
                         } in
                         let { DInt ipv29 ipv30 ipv31 ~ nt1 <- di `cast` ... } in
                         let { I# ipv32 ~ n1 <- n } in
                         case >=# ipv32 0 of _ {
                           False -> case lvl77 ipv32 of wild7 { };
                           True ->
                             let { (# ipv33, ipv34 #) ~ _
                             <- newByteArray# (*# ipv32 8) (s1 `cast` ...)
                             } in
                             let { Gang ww17 ww18 ww19 ~ _ <- theGang } in
                             let {
                               nt2
                               nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                             let { (# ipv35, ipv36 #) ~ _
                             <- ($wa1
                                   ww17
                                   ww18
                                   ww19
                                   (++
                                      $fShowComp2
                                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                   (WorkCopy n1)
                                   ((\ i s2 ->
                                       let { (# ipv35, ipv36 #) ~ _
                                       <- ((((myD lvl78 (nt2 `cast` ...)) `cast` ...) i) `cast` ...)
                                            s2
                                       } in
                                       let { (x, y) ~ _ <- ipv36 } in
                                       let { I# ipv37 ~ _ <- x } in
                                       let { Vector ipv38 ipv39 ipv40 ~ _ <- y `cast` ... } in
                                       (# copyByteArray#
                                            ipv40
                                            (*# ipv38 8)
                                            ipv34
                                            (*# ipv37 8)
                                            (*# ipv39 8)
                                            (ipv35 `cast` ...),
                                          () #)
                                       `cast` ...)
                                    `cast` ...)
                                   (ipv33 `cast` ...))
                                `cast` ...
                             } in
                             let { (# ipv37, ipv38 #) ~ _
                             <- unsafeFreezeByteArray# ipv34 (ipv35 `cast` ...)
                             } in
                             (# ipv37 `cast` ..., (Vector 0 ipv32 ipv38) `cast` ... #)
                         }) } in
                let {
                  a17
                  a17 =
                    let {
                      vsegids3
                      vsegids3 =
                        let {
                          a12
                          a12 = I# 0 } in
                        runSTRep
                          (\ @ s s1 ->
                             let { (# ipv, ipv1 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                             let {
                               a13
                               a13 = MVector 0 0 ipv1 } in
                             let {
                               z2
                               z2 = I# 0 } in
                             let {
                               a14
                               a14 = MVector 0 0 ipv1 } in
                             let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeByteArray# ipv1 ipv } in
                             (# ipv2 `cast` ..., (Vector 0 0 ipv3) `cast` ... #)) } in
                    let { Vector ipv ipv1 ipv2 ~ _ <- xarr } in
                    let { Vector ww1 ww2 ww3 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let { (# ipv3, ipv4 #) ~ _
                            <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
                            } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 ->
                                  case >=# sc1 ipv1 of _ {
                                    False ->
                                      let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv sc1) } in
                                      $s$wa
                                        ((writeArray#
                                            ipv4
                                            sc2
                                            (let { PNested ds4 ds5 ds6 ds7 ~ _
                                             <- ipv5 `cast` ...
                                             } in
                                             let { UPVSegd ds8 ds9 ds10 ds11 ds12 ds13 ~ _
                                             <- ds4
                                             } in
                                             let { UPSSegd dt10 dt11 dt14 dt15 dt16 dt17 dt18 dt19
                                                           dt20 dt21 ds14 ~ _
                                             <- ds12
                                             } in
                                             dt11)
                                            (sc `cast` ...))
                                         `cast` ...)
                                        (+# sc1 1)
                                        (+# sc2 1);
                                    True -> (# sc, I# sc2 #)
                                  }; } in
                            let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                            let { I# dt11 ~ _ <- ipv6 } in
                            let { (# ipv7, ipv8 #) ~ _
                            <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
                            } in
                            (# ipv7 `cast` ..., Vector 0 dt11 ipv8 #))
                    } in
                    let { Vectors ipv6 ipv7 ipv8 ipv9 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww5 ww6 ww7 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv3, ipv4 #) ~ _
                                     <- newArray# ww2 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww2 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv4
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv5 #) ~ _
                                                           <- indexArray# ww3 (+# ww1 sc1)
                                                           } in
                                                           let { Vector ipv6 ipv7 ipv8 ~ _
                                                           <- ipv5 `cast` ...
                                                           } in
                                                           let { (# ipv9, ipv10 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv7 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv7 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild4
                                                                     <- indexIntArray#
                                                                          ipv8 (+# ipv6 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv10
                                                                           sc5
                                                                           wild4
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv11, ipv12 #) ~ _
                                                           <- $s$wa1 (ipv9 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt11 ~ dt10 <- ipv12 } in
                                                           let { (# ipv13, ipv14 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv10 `cast` ...) ipv11
                                                           } in
                                                           (# ipv13 `cast` ...,
                                                              (ByteArray ipv14, lvl7, dt10) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                                     let { I# dt11 ~ _ <- ipv6 } in
                                     let { (# ipv7, ipv8 #) ~ _
                                     <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
                                     } in
                                     (# ipv7 `cast` ..., Vector 0 dt11 ipv8 #))
                             } in
                             (\ s1 ->
                                let { (# ipv3, ipv4 #) ~ _ <- newArrayArray# ww2 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww2 of _ {
                                            False ->
                                              let { (ba, ds, ds3) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv5 #) ~ _
                                                      <- indexArray# ww3 (+# ww1 sc3)
                                                      } in
                                                      let { Vector ipv6 ipv7 ipv8 ~ _
                                                      <- ipv5 `cast` ...
                                                      } in
                                                      let { (# ipv9, ipv10 #) ~ _
                                                      <- newByteArray# (*# ipv7 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv7 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild5
                                                                <- indexIntArray# ipv8 (+# ipv6 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv10
                                                                      sc6
                                                                      wild5
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv11, ipv12 #) ~ _
                                                      <- $s$wa1 (ipv9 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt11 ~ dt10 <- ipv12 } in
                                                      let { (# ipv13, ipv14 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv10 `cast` ...) ipv11
                                                      } in
                                                      (# ipv13 `cast` ...,
                                                         (ByteArray ipv14, lvl7, dt10) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv4 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv5, ipv6 #) ~ _ <- $s$wa ipv3 0 ww2 0 } in
                                let { (# ipv7, ipv8 #) ~ _
                                <- unsafeFreezeArrayArray# ipv4 ipv5
                                } in
                                (# ipv7,
                                   let { (baStarts, ds4, ds5) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv9, ipv10 #) ~ _
                                           <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww6 of _ {
                                                   False ->
                                                     let { (# ipv11 #) ~ _
                                                     <- indexArray# ww7 (+# ww5 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv11 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv10 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv11, ipv12 #) ~ _
                                           <- $s$wa1 (ipv9 `cast` ...) 0 0
                                           } in
                                           let { I# dt11 ~ dt10 <- ipv12 } in
                                           let { (# ipv13, ipv14 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv10 `cast` ...) ipv11
                                           } in
                                           (# ipv13 `cast` ..., (ByteArray ipv14, lvl7, dt10) #))
                                   } in
                                   let { ByteArray dt10 ~ _ <- baStarts } in
                                   let { (baLens, ds6, ds7) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv9, ipv10 #) ~ _
                                           <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww6 of _ {
                                                   False ->
                                                     let { (# ipv11 #) ~ _
                                                     <- indexArray# ww7 (+# ww5 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv11 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv10 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv11, ipv12 #) ~ _
                                           <- $s$wa1 (ipv9 `cast` ...) 0 0
                                           } in
                                           let { I# dt14 ~ dt11 <- ipv12 } in
                                           let { (# ipv13, ipv14 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv10 `cast` ...) ipv11
                                           } in
                                           (# ipv13 `cast` ..., (ByteArray ipv14, lvl7, dt11) #))
                                   } in
                                   let { ByteArray dt14 ~ _ <- baLens } in
                                   Vectors ww2 dt10 dt14 ipv8 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let {
                      vsegids4
                      vsegids4 =
                        let {
                          a12
                          a12 = I# 0 } in
                        runSTRep
                          (\ @ s s1 ->
                             let { (# ipv3, ipv4 #) ~ _ <- newByteArray# 0 (s1 `cast` ...) } in
                             let {
                               a13
                               a13 = MVector 0 0 ipv4 } in
                             let {
                               z2
                               z2 = I# 0 } in
                             let {
                               a14
                               a14 = MVector 0 0 ipv4 } in
                             let { (# ipv5, ipv10 #) ~ _
                             <- unsafeFreezeByteArray# ipv4 ipv3
                             } in
                             (# ipv5 `cast` ..., (Vector 0 0 ipv10) `cast` ... #)) } in
                    let { Vector ipv3 ipv4 ipv5 ~ _ <- yarr } in
                    let { Vector ww5 ww6 ww7 ~ _
                    <- runSTRep
                         (\ @ s s1 ->
                            let { (# ipv10, ipv11 #) ~ _
                            <- newArray# ipv4 (uninitialised) (s1 `cast` ...)
                            } in
                            letrec {
                              $s$wa
                              $s$wa =
                                \ sc sc1 sc2 ->
                                  case >=# sc1 ipv4 of _ {
                                    False ->
                                      let { (# ipv12 #) ~ _ <- indexArray# ipv5 (+# ipv3 sc1) } in
                                      $s$wa
                                        ((writeArray#
                                            ipv11
                                            sc2
                                            (let { PNested ds4 ds5 ds6 ds7 ~ _
                                             <- ipv12 `cast` ...
                                             } in
                                             let { UPVSegd ds8 ds9 ds10 ds11 ds12 ds13 ~ _
                                             <- ds4
                                             } in
                                             let { UPSSegd dt10 dt11 dt14 dt15 dt16 dt17 dt18 dt19
                                                           dt20 dt21 ds14 ~ _
                                             <- ds12
                                             } in
                                             dt11)
                                            (sc `cast` ...))
                                         `cast` ...)
                                        (+# sc1 1)
                                        (+# sc2 1);
                                    True -> (# sc, I# sc2 #)
                                  }; } in
                            let { (# ipv12, ipv13 #) ~ _ <- $s$wa (ipv10 `cast` ...) 0 0 } in
                            let { I# dt11 ~ _ <- ipv13 } in
                            let { (# ipv14, ipv15 #) ~ _
                            <- unsafeFreezeArray# ipv11 (ipv12 `cast` ...)
                            } in
                            (# ipv14 `cast` ..., Vector 0 dt11 ipv15 #))
                    } in
                    let { Vectors ipv16 ipv17 ipv18 ipv19 ~ _
                    <- runSTRep
                         ((\ @ s ->
                             let { Vector ww9 ww10 ww11 ~ _
                             <- runSTRep
                                  (\ @ s1 s2 ->
                                     let { (# ipv10, ipv11 #) ~ _
                                     <- newArray# ww6 (uninitialised) (s2 `cast` ...)
                                     } in
                                     letrec {
                                       $s$wa
                                       $s$wa =
                                         \ sc sc1 sc2 ->
                                           case >=# sc1 ww6 of _ {
                                             False ->
                                               $s$wa
                                                 ((writeArray#
                                                     ipv11
                                                     sc2
                                                     (runSTRep
                                                        (\ @ s3 s4 ->
                                                           let { (# ipv12 #) ~ _
                                                           <- indexArray# ww7 (+# ww5 sc1)
                                                           } in
                                                           let { Vector ipv13 ipv14 ipv15 ~ _
                                                           <- ipv12 `cast` ...
                                                           } in
                                                           let { (# ipv16, ipv17 #) ~ _
                                                           <- newByteArray#
                                                                (*# ipv14 8) (s4 `cast` ...)
                                                           } in
                                                           letrec {
                                                             $s$wa1
                                                             $s$wa1 =
                                                               \ sc3 sc4 sc5 ->
                                                                 case >=# sc4 ipv14 of _ {
                                                                   False ->
                                                                     let { __DEFAULT ~ wild4
                                                                     <- indexIntArray#
                                                                          ipv15 (+# ipv13 sc4)
                                                                     } in
                                                                     $s$wa1
                                                                       ((writeIntArray#
                                                                           ipv17
                                                                           sc5
                                                                           wild4
                                                                           (sc3 `cast` ...))
                                                                        `cast` ...)
                                                                       (+# sc4 1)
                                                                       (+# sc5 1);
                                                                   True -> (# sc3, I# sc5 #)
                                                                 }; } in
                                                           let { (# ipv18, ipv19 #) ~ _
                                                           <- $s$wa1 (ipv16 `cast` ...) 0 0
                                                           } in
                                                           let { I# dt11 ~ dt10 <- ipv19 } in
                                                           let { (# ipv20, ipv21 #) ~ _
                                                           <- unsafeFreezeByteArray#
                                                                (ipv17 `cast` ...) ipv18
                                                           } in
                                                           (# ipv20 `cast` ...,
                                                              (ByteArray ipv21, lvl7, dt10) #)))
                                                     (sc `cast` ...))
                                                  `cast` ...)
                                                 (+# sc1 1)
                                                 (+# sc2 1);
                                             True -> (# sc, I# sc2 #)
                                           }; } in
                                     let { (# ipv12, ipv13 #) ~ _
                                     <- $s$wa (ipv10 `cast` ...) 0 0
                                     } in
                                     let { I# dt11 ~ _ <- ipv13 } in
                                     let { (# ipv14, ipv15 #) ~ _
                                     <- unsafeFreezeArray# ipv11 (ipv12 `cast` ...)
                                     } in
                                     (# ipv14 `cast` ..., Vector 0 dt11 ipv15 #))
                             } in
                             (\ s1 ->
                                let { (# ipv10, ipv11 #) ~ _ <- newArrayArray# ww6 s1 } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 ->
                                      case ># sc2 0 of _ {
                                        False -> (# sc, () #);
                                        True ->
                                          case >=# sc3 ww6 of _ {
                                            False ->
                                              let { (ba, ds, ds3) ~ _
                                              <- runSTRep
                                                   (\ @ s2 s3 ->
                                                      let { (# ipv12 #) ~ _
                                                      <- indexArray# ww7 (+# ww5 sc3)
                                                      } in
                                                      let { Vector ipv13 ipv14 ipv15 ~ _
                                                      <- ipv12 `cast` ...
                                                      } in
                                                      let { (# ipv16, ipv17 #) ~ _
                                                      <- newByteArray# (*# ipv14 8) (s3 `cast` ...)
                                                      } in
                                                      letrec {
                                                        $s$wa1
                                                        $s$wa1 =
                                                          \ sc4 sc5 sc6 ->
                                                            case >=# sc5 ipv14 of _ {
                                                              False ->
                                                                let { __DEFAULT ~ wild5
                                                                <- indexIntArray#
                                                                     ipv15 (+# ipv13 sc5)
                                                                } in
                                                                $s$wa1
                                                                  ((writeIntArray#
                                                                      ipv17
                                                                      sc6
                                                                      wild5
                                                                      (sc4 `cast` ...))
                                                                   `cast` ...)
                                                                  (+# sc5 1)
                                                                  (+# sc6 1);
                                                              True -> (# sc4, I# sc6 #)
                                                            }; } in
                                                      let { (# ipv18, ipv19 #) ~ _
                                                      <- $s$wa1 (ipv16 `cast` ...) 0 0
                                                      } in
                                                      let { I# dt11 ~ dt10 <- ipv19 } in
                                                      let { (# ipv20, ipv21 #) ~ _
                                                      <- unsafeFreezeByteArray#
                                                           (ipv17 `cast` ...) ipv18
                                                      } in
                                                      (# ipv20 `cast` ...,
                                                         (ByteArray ipv21, lvl7, dt10) #))
                                              } in
                                              let { ByteArray ba# ~ _ <- ba } in
                                              let { __DEFAULT ~ s'#
                                              <- writeByteArrayArray# ipv11 sc1 ba# sc
                                              } in
                                              $s$wa s'# (+# sc1 1) (-# sc2 1) (+# sc3 1);
                                            True -> (# sc, () #)
                                          }
                                      }; } in
                                let { (# ipv12, ipv13 #) ~ _ <- $s$wa ipv10 0 ww6 0 } in
                                let { (# ipv14, ipv15 #) ~ _
                                <- unsafeFreezeArrayArray# ipv11 ipv12
                                } in
                                (# ipv14,
                                   let { (baStarts, ds4, ds5) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv16, ipv17 #) ~ _
                                           <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww10 of _ {
                                                   False ->
                                                     let { (# ipv18 #) ~ _
                                                     <- indexArray# ww11 (+# ww9 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv18 } in
                                                     let { I# x# ~ _ <- b1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv17 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv18, ipv19 #) ~ _
                                           <- $s$wa1 (ipv16 `cast` ...) 0 0
                                           } in
                                           let { I# dt11 ~ dt10 <- ipv19 } in
                                           let { (# ipv20, ipv21 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv17 `cast` ...) ipv18
                                           } in
                                           (# ipv20 `cast` ..., (ByteArray ipv21, lvl7, dt10) #))
                                   } in
                                   let { ByteArray dt10 ~ _ <- baStarts } in
                                   let { (baLens, ds6, ds7) ~ _
                                   <- runSTRep
                                        (\ @ s2 s3 ->
                                           let { (# ipv16, ipv17 #) ~ _
                                           <- newByteArray# (*# ww10 8) (s3 `cast` ...)
                                           } in
                                           letrec {
                                             $s$wa1
                                             $s$wa1 =
                                               \ sc sc1 sc2 ->
                                                 case >=# sc1 ww10 of _ {
                                                   False ->
                                                     let { (# ipv18 #) ~ _
                                                     <- indexArray# ww11 (+# ww9 sc1)
                                                     } in
                                                     let { (a28, b1, c1) ~ _ <- ipv18 } in
                                                     let { I# x# ~ _ <- c1 } in
                                                     $s$wa1
                                                       ((writeIntArray#
                                                           ipv17 sc2 x# (sc `cast` ...))
                                                        `cast` ...)
                                                       (+# sc1 1)
                                                       (+# sc2 1);
                                                   True -> (# sc, I# sc2 #)
                                                 }; } in
                                           let { (# ipv18, ipv19 #) ~ _
                                           <- $s$wa1 (ipv16 `cast` ...) 0 0
                                           } in
                                           let { I# dt14 ~ dt11 <- ipv19 } in
                                           let { (# ipv20, ipv21 #) ~ _
                                           <- unsafeFreezeByteArray# (ipv17 `cast` ...) ipv18
                                           } in
                                           (# ipv20 `cast` ..., (ByteArray ipv21, lvl7, dt11) #))
                                   } in
                                   let { ByteArray dt14 ~ _ <- baLens } in
                                   Vectors ww6 dt10 dt14 ipv15 #))
                             `cast` ...)
                          `cast` ...)
                    } in
                    let { UPSegd dt dt10 dt11 dt14 dt15 dt16 dt17 ds2 ~ _
                    <- segd'1
                    } in
                    let { DVector ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ~ nt
                    <- (imapD'
                          lvl75
                          $dDT1
                          lvl76
                          theGang
                          (\ _ x ->
                             let { (x1, y) ~ _ <- x } in
                             let { (x2, y1) ~ _ <- x1 } in
                             let { USegd dt18 dt19 dt20 dt21 dt22 dt23 dt24 ~ _ <- x2 } in
                             let { I# ipv10 ~ _ <- y1 } in
                             let { I# ipv11 ~ _ <- y } in
                             let { USSegd dt26 dt27 dt28 dt29 dt30 dt31 dt32 dt33 dt34
                                          dt35 ~ dt25
                             <- empty
                             } in
                             let { Vector ipv21 ipv22 ipv23 ~ _ <- dt28 `cast` ... } in
                             let { Vector ipv24 ipv25 ipv26 ~ _ <- dt27 `cast` ... } in
                             let { Vector ipv33 ipv34 ipv35 ~ _ <- vsegids4 `cast` ... } in
                             let { Vector ipv36 ipv37 ipv38 ~ _ <- vsegids3 `cast` ... } in
                             runSTRep
                               (\ @ s s1 ->
                                  let { (# ipv12, ipv13 #) ~ _
                                  <- newByteArray# (*# dt24 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $s$wa
                                    $s$wa =
                                      \ sc sc1 sc2 sc3 sc4 sc5 sc6 sc7 sc8 ->
                                        case sc3 of ds10 {
                                          __DEFAULT ->
                                            case sc7 of ds11 {
                                              __DEFAULT ->
                                                case sc4 of wild6 {
                                                  __DEFAULT ->
                                                    let { __DEFAULT ~ wild7
                                                    <- indexIntArray# ipv17 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild8
                                                    <- indexByteArrayArray# ipv19 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild9
                                                    <- indexIntArray# wild8 (+# wild7 (+# sc2 sc5))
                                                    } in
                                                    $s$wa
                                                      ((writeIntArray#
                                                          ipv13 sc8 wild9 (sc `cast` ...))
                                                       `cast` ...)
                                                      sc1
                                                      sc2
                                                      (-# ds10 1)
                                                      (-# wild6 1)
                                                      (+# sc5 1)
                                                      sc6
                                                      ds11
                                                      (+# sc8 1);
                                                  0 ->
                                                    let {
                                                      i1
                                                      i1 = +# sc6 1 } in
                                                    let { __DEFAULT ~ wild7
                                                    <- indexIntArray# ipv38 (+# ipv36 i1)
                                                    } in
                                                    let { __DEFAULT ~ wild8
                                                    <- indexIntArray# ipv23 (+# ipv21 wild7)
                                                    } in
                                                    let { __DEFAULT ~ wild9
                                                    <- indexIntArray# ipv26 (+# ipv24 wild7)
                                                    } in
                                                    let { __DEFAULT ~ wild10
                                                    <- indexIntArray# dt31 (+# dt29 wild7)
                                                    } in
                                                    $s$wa sc wild8 wild9 ds10 wild10 0 i1 0 sc8
                                                };
                                              0 ->
                                                case sc4 of wild6 {
                                                  __DEFAULT ->
                                                    let { __DEFAULT ~ wild7
                                                    <- indexIntArray# ipv7 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild8
                                                    <- indexByteArrayArray# ipv9 sc1
                                                    } in
                                                    let { __DEFAULT ~ wild9
                                                    <- indexIntArray# wild8 (+# wild7 (+# sc2 sc5))
                                                    } in
                                                    $s$wa
                                                      ((writeIntArray#
                                                          ipv13 sc8 wild9 (sc `cast` ...))
                                                       `cast` ...)
                                                      sc1
                                                      sc2
                                                      (-# ds10 1)
                                                      (-# wild6 1)
                                                      (+# sc5 1)
                                                      sc6
                                                      0
                                                      (+# sc8 1);
                                                  0 ->
                                                    let { __DEFAULT ~ wild7
                                                    <- indexIntArray# ipv35 (+# ipv33 sc6)
                                                    } in
                                                    let { __DEFAULT ~ wild8
                                                    <- indexIntArray# ipv23 (+# ipv21 wild7)
                                                    } in
                                                    let { __DEFAULT ~ wild9
                                                    <- indexIntArray# ipv26 (+# ipv24 wild7)
                                                    } in
                                                    let { __DEFAULT ~ wild10
                                                    <- indexIntArray# dt31 (+# dt29 wild7)
                                                    } in
                                                    $s$wa sc wild8 wild9 ds10 wild10 0 sc6 1 sc8
                                                }
                                            };
                                          0 -> (# sc, I# sc8 #)
                                        }; } in
                                  case dt24 of wild6 {
                                    __DEFAULT ->
                                      let { __DEFAULT ~ wild7
                                      <- indexIntArray# ipv38 (+# ipv36 ipv10)
                                      } in
                                      let { __DEFAULT ~ wild8
                                      <- indexIntArray# dt31 (+# dt29 wild7)
                                      } in
                                      case <# ipv11 wild8 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild10
                                          <- indexIntArray# ipv35 (+# ipv33 ipv10)
                                          } in
                                          let { __DEFAULT ~ wild13
                                          <- indexIntArray# ipv23 (+# ipv21 wild10)
                                          } in
                                          let { __DEFAULT ~ wild14
                                          <- indexIntArray# ipv26 (+# ipv24 wild10)
                                          } in
                                          let {
                                            i1
                                            i1 = -# ipv11 wild8 } in
                                          let { __DEFAULT ~ wild11
                                          <- indexIntArray# dt31 (+# dt29 wild10)
                                          } in
                                          let { (# ipv14, ipv15 #) ~ _
                                          <- $s$wa
                                               (ipv12 `cast` ...)
                                               wild13
                                               wild14
                                               wild6
                                               (-# wild11 i1)
                                               i1
                                               ipv10
                                               1
                                               0
                                          } in
                                          let { I# dt37 ~ _ <- ipv15 } in
                                          let { (# ipv20, ipv27 #) ~ _
                                          <- unsafeFreezeByteArray# ipv13 (ipv14 `cast` ...)
                                          } in
                                          (# ipv20 `cast` ..., (Vector 0 dt37 ipv27) `cast` ... #);
                                        True ->
                                          let { __DEFAULT ~ wild11
                                          <- indexIntArray# ipv23 (+# ipv21 wild7)
                                          } in
                                          let { __DEFAULT ~ wild12
                                          <- indexIntArray# ipv26 (+# ipv24 wild7)
                                          } in
                                          let { (# ipv14, ipv15 #) ~ _
                                          <- $s$wa
                                               (ipv12 `cast` ...)
                                               wild11
                                               wild12
                                               wild6
                                               (-# wild8 ipv11)
                                               ipv11
                                               ipv10
                                               0
                                               0
                                          } in
                                          let { I# dt37 ~ _ <- ipv15 } in
                                          let { (# ipv20, ipv27 #) ~ _
                                          <- unsafeFreezeByteArray# ipv13 (ipv14 `cast` ...)
                                          } in
                                          (# ipv20 `cast` ..., (Vector 0 dt37 ipv27) `cast` ... #)
                                      };
                                    0 ->
                                      let { (# ipv14, ipv15 #) ~ _
                                      <- $s$wa (ipv12 `cast` ...) 0 0 0 0 0 0 0 0
                                      } in
                                      let { I# dt37 ~ _ <- ipv15 } in
                                      let { (# ipv20, ipv27 #) ~ _
                                      <- unsafeFreezeByteArray# ipv13 (ipv14 `cast` ...)
                                      } in
                                      (# ipv20 `cast` ..., (Vector 0 dt37 ipv27) `cast` ... #)
                                  }))
                          ds2)
                       `cast` ...
                    } in
                    runSTRep
                      (\ @ s s1 ->
                         let { (di, n) ~ _
                         <- scanD
                              $fDTInt
                              lvl74
                              theGang
                              $fNumInt_$c+
                              lvl7
                              ((DInt ipv10 ipv11 ipv12) `cast` ...)
                         } in
                         let { DInt ipv20 ipv21 ipv22 ~ nt1 <- di `cast` ... } in
                         let { I# ipv23 ~ n1 <- n } in
                         case >=# ipv23 0 of _ {
                           False -> case lvl72 ipv23 of wild5 { };
                           True ->
                             let { (# ipv24, ipv25 #) ~ _
                             <- newByteArray# (*# ipv23 8) (s1 `cast` ...)
                             } in
                             let { Gang ww9 ww10 ww11 ~ _ <- theGang } in
                             let {
                               nt2
                               nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                             let { (# ipv26, ipv27 #) ~ _
                             <- ($wa1
                                   ww9
                                   ww10
                                   ww11
                                   (++
                                      $fShowComp2
                                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                   (WorkCopy n1)
                                   ((\ i s2 ->
                                       let { (# ipv26, ipv27 #) ~ _
                                       <- ((((myD lvl73 (nt2 `cast` ...)) `cast` ...) i) `cast` ...)
                                            s2
                                       } in
                                       let { (x, y) ~ _ <- ipv27 } in
                                       let { I# ipv28 ~ _ <- x } in
                                       let { Vector ipv29 ipv30 ipv31 ~ _ <- y `cast` ... } in
                                       (# copyByteArray#
                                            ipv31
                                            (*# ipv29 8)
                                            ipv25
                                            (*# ipv28 8)
                                            (*# ipv30 8)
                                            (ipv26 `cast` ...),
                                          () #)
                                       `cast` ...)
                                    `cast` ...)
                                   (ipv24 `cast` ...))
                                `cast` ...
                             } in
                             let { (# ipv28, ipv29 #) ~ _
                             <- unsafeFreezeByteArray# ipv25 (ipv26 `cast` ...)
                             } in
                             (# ipv28 `cast` ..., (Vector 0 ipv23 ipv29) `cast` ... #)
                         }) } in
                UPSSegd
                  False
                  a17
                  a18
                  dt3
                  dt4
                  dt5
                  dt6
                  dt7
                  dt8
                  dt9
                  (splitSSegdOnElemsD
                     theGang (USSegd False a17 a18 dt3 dt4 dt5 dt6 dt7 dt8 dt9)) } in
            let {
              vsegids3
              vsegids3 =
                let { UPSSegd dt3 dt6 dt7 dt8 dt9 dt10 dt11 dt4 dt5 dt14 ds1 ~ _
                <- a19
                } in
                runSTRep
                  (\ @ s s1 ->
                     let {
                       a12
                       a12 = -# dt9 1 } in
                     let {
                       $j
                       $j =
                         \ x ->
                           let { (# ipv, ipv1 #) ~ _
                           <- newByteArray# (*# x 8) (s1 `cast` ...)
                           } in
                           letrec {
                             $s$wa
                             $s$wa =
                               \ sc sc1 sc2 ->
                                 case <=# sc1 a12 of _ {
                                   False -> (# sc, I# sc2 #);
                                   True ->
                                     $s$wa
                                       ((writeIntArray# ipv1 sc2 sc1 (sc `cast` ...)) `cast` ...)
                                       (+# sc1 1)
                                       (+# sc2 1)
                                 }; } in
                           let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv `cast` ...) 0 0 } in
                           let { I# dt16 ~ _ <- ipv6 } in
                           let { (# ipv2, ipv3 #) ~ _
                           <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
                           } in
                           (# ipv2 `cast` ..., (Vector 0 dt16 ipv3) `cast` ... #) } in
                     case ># 0 a12 of _ {
                       False ->
                         let {
                           a13
                           a13 = +# a12 1 } in
                         case ># a13 0 of _ {
                           False -> case lvl82 of wild4 { };
                           True -> $j a13
                         };
                       True -> $j 0
                     }) } in
            let {
              a12
              a12 =
                let { UPSSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ~ _
                <- a19
                } in
                $wmkDist vsegids3 ww4 ww6 ww9 } in
            let {
              a13
              a13 =
                $fPRInt_$cfromVectordPR
                  (let { Vector ww1 ww2 ww3 ~ _ <- xdata } in
                   let { Vector ipv ipv1 ipv2 ~ _ <- $wccat ww1 ww2 ww3 } in
                   let { Vector ww5 ww6 ww7 ~ _ <- ydata } in
                   let { Vector ipv3 ipv4 ipv5 ~ _ <- $wccat ww5 ww6 ww7 } in
                   (runSTRep
                      (\ @ s s1 ->
                         let { (# ipv6, ipv7 #) ~ _
                         <- newArray# (+# ipv1 ipv4) (uninitialised) (s1 `cast` ...)
                         } in
                         letrec {
                           $s$wa
                           $s$wa =
                             \ sc sc1 sc2 ->
                               case >=# sc1 ipv4 of _ {
                                 False ->
                                   let { (# ipv8 #) ~ _ <- indexArray# ipv5 (+# ipv3 sc1) } in
                                   $s$wa
                                     (+# sc 1)
                                     (+# sc1 1)
                                     ((writeArray# ipv7 sc ipv8 (sc2 `cast` ...)) `cast` ...);
                                 True -> (# sc2, I# sc #)
                               }; } in
                         letrec {
                           $s$wa1
                           $s$wa1 =
                             \ sc sc1 sc2 ->
                               case >=# sc2 ipv1 of _ {
                                 False ->
                                   let { (# ipv8 #) ~ _ <- indexArray# ipv2 (+# ipv sc2) } in
                                   $s$wa1
                                     ((writeArray# ipv7 sc1 ipv8 (sc `cast` ...)) `cast` ...)
                                     (+# sc1 1)
                                     (+# sc2 1);
                                 True -> $s$wa sc1 0 sc
                               }; } in
                         let { (# ipv8, ipv9 #) ~ _ <- $s$wa1 (ipv6 `cast` ...) 0 0 } in
                         let { I# dt6 ~ _ <- ipv9 } in
                         let { (# ipv10, ipv11 #) ~ _
                         <- unsafeFreezeArray# ipv7 (ipv8 `cast` ...)
                         } in
                         (# ipv10 `cast` ..., Vector 0 dt6 ipv11 #)))
                   `cast` ...) } in
            let {
              a14
              a14 = UPVSegd True vsegids3 vsegids3 a19 a19 a12 } in
            let {
              a15
              a15 =
                let { PInts arrs ~ _ <- a13 `cast` ... } in
                (PInt
                   (let { Vectors ipv6 ipv7 ipv8 ipv9 ~ _ <- arrs } in
                    let { UPSSegd dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt14 ds1 ~ _
                    <- a19
                    } in
                    let { Vector ipv10 ipv11 ipv12 ~ _ <- vsegids3 `cast` ... } in
                    let { DProd ipv13 ipv14 ~ nt1 <- a12 `cast` ... } in
                    let { DVector ipv ipv1 ipv2 ipv3 ipv4 ipv5 ~ nt2
                    <- (imapD'
                          lvl86
                          $dDT1
                          lvl88
                          theGang
                          (\ _ x ->
                             let { (x1, y) ~ _ <- x } in
                             let { (x2, y1) ~ _ <- x1 } in
                             let { USegd dt dt15 dt16 dt17 dt18 dt19 dt20 ~ _ <- x2 } in
                             let { I# ipv ~ _ <- y1 } in
                             let { I# ipv1 ~ _ <- y } in
                             let { ByteArray ipv26 ~ _ <- lvl90 } in
                             let { Vector ipv27 ipv28 ipv29 ~ _ <- dt5 `cast` ... } in
                             let { Vector ipv30 ipv31 ipv32 ~ _ <- dt4 `cast` ... } in
                             letrec {
                               $s$wfoldlM'_loop
                               $s$wfoldlM'_loop =
                                 \ sc sc1 ->
                                   case >=# sc dt15 of _ {
                                     False ->
                                       let { __DEFAULT ~ wild7
                                       <- indexIntArray# dt16 (+# dt sc)
                                       } in
                                       $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild7);
                                     True -> sc1
                                   }; } in
                             let { __DEFAULT ~ ww <- $s$wfoldlM'_loop 0 0 } in
                             runSTRep
                               (\ @ s s1 ->
                                  let { (# ipv2, ipv3 #) ~ _
                                  <- newByteArray# (*# ww 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $s$wa
                                    $s$wa =
                                      \ sc sc1 sc2 sc3 sc4 sc5 ->
                                        case >=# sc1 sc2 of _ {
                                          False ->
                                            let { __DEFAULT ~ wild7 <- indexIntArray# sc3 sc1 } in
                                            $s$wa
                                              ((writeIntArray# ipv3 sc5 wild7 (sc `cast` ...))
                                               `cast` ...)
                                              (+# sc1 1)
                                              sc2
                                              sc3
                                              sc4
                                              (+# sc5 1);
                                          True ->
                                            case >=# (+# sc4 1) dt15 of _ {
                                              False ->
                                                let {
                                                  a16
                                                  a16 = +# sc4 1 } in
                                                let { __DEFAULT ~ wild8
                                                <- indexIntArray# ipv12 (+# ipv10 (+# a16 ipv))
                                                } in
                                                let { __DEFAULT ~ wild9
                                                <- indexIntArray# ipv29 (+# ipv27 wild8)
                                                } in
                                                let {
                                                  $j
                                                  $j =
                                                    \ ww1 ->
                                                      let { __DEFAULT ~ wild10
                                                      <- indexIntArray# ipv7 wild9
                                                      } in
                                                      let { __DEFAULT ~ wild11
                                                      <- indexIntArray# ipv32 (+# ipv30 wild8)
                                                      } in
                                                      let { __DEFAULT ~ wild12
                                                      <- indexIntArray# dt16 (+# dt a16)
                                                      } in
                                                      let { __DEFAULT ~ wild13
                                                      <- indexByteArrayArray# ipv9 wild9
                                                      } in
                                                      $s$wa
                                                        sc
                                                        (+# (+# wild10 wild11) ww1)
                                                        (+# (+# (+# wild10 wild11) ww1) wild12)
                                                        wild13
                                                        a16
                                                        sc5 } in
                                                case a16 of _ {
                                                  __DEFAULT -> $j 0;
                                                  0 -> $j ipv1
                                                };
                                              True -> (# sc, I# sc5 #)
                                            }
                                        }; } in
                                  let { (# ipv5, ipv4 #) ~ _
                                  <- $s$wa (ipv2 `cast` ...) 0 0 ipv26 (-1) 0
                                  } in
                                  let { I# dt22 ~ _ <- ipv4 } in
                                  let { (# ipv15, ipv16 #) ~ _
                                  <- unsafeFreezeByteArray# ipv3 (ipv5 `cast` ...)
                                  } in
                                  (# ipv15 `cast` ..., (Vector 0 dt22 ipv16) `cast` ... #)))
                          (nt1 `cast` ...))
                       `cast` ...
                    } in
                    runSTRep
                      (\ @ s s1 ->
                         let { (di, n) ~ _
                         <- scanD
                              $fDTInt
                              lvl85
                              theGang
                              $fNumInt_$c+
                              lvl7
                              ((DInt ipv ipv1 ipv2) `cast` ...)
                         } in
                         let { DInt ipv15 ipv16 ipv17 ~ nt3 <- di `cast` ... } in
                         let { I# ipv18 ~ n1 <- n } in
                         case >=# ipv18 0 of _ {
                           False -> case lvl83 ipv18 of wild5 { };
                           True ->
                             let { (# ipv19, ipv20 #) ~ _
                             <- newByteArray# (*# ipv18 8) (s1 `cast` ...)
                             } in
                             let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                             let {
                               nt4
                               nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                             let { (# ipv21, ipv22 #) ~ _
                             <- ($wa1
                                   ww1
                                   ww2
                                   ww3
                                   (++
                                      $fShowComp2
                                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                   (WorkCopy n1)
                                   ((\ i s2 ->
                                       let { (# ipv21, ipv22 #) ~ _
                                       <- ((((myD lvl84 (nt4 `cast` ...)) `cast` ...) i) `cast` ...)
                                            s2
                                       } in
                                       let { (x, y) ~ _ <- ipv22 } in
                                       let { I# ipv23 ~ _ <- x } in
                                       let { Vector ipv24 ipv25 ipv26 ~ _ <- y `cast` ... } in
                                       (# copyByteArray#
                                            ipv26
                                            (*# ipv24 8)
                                            ipv20
                                            (*# ipv23 8)
                                            (*# ipv25 8)
                                            (ipv21 `cast` ...),
                                          () #)
                                       `cast` ...)
                                    `cast` ...)
                                   (ipv19 `cast` ...))
                                `cast` ...
                             } in
                             let { (# ipv23, ipv24 #) ~ _
                             <- unsafeFreezeByteArray# ipv20 (ipv21 `cast` ...)
                             } in
                             (# ipv23 `cast` ..., (Vector 0 ipv18 ipv24) `cast` ... #)
                         })))
                `cast` ... } in
            let {
              a16
              a16 = PNested a14 a13 segd'2 a15 } in
            (PNested
               (let {
                  upssegd
                  upssegd =
                    let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds1 ~ _ <- segd'1 } in
                    let {
                      dt9
                      dt9 =
                        runSTRep
                          (\ @ s s1 ->
                             let {
                               $j
                               $j =
                                 \ x ->
                                   let { (# ipv, ipv1 #) ~ _
                                   <- newByteArray# (*# x 8) (s1 `cast` ...)
                                   } in
                                   letrec {
                                     $s$wa
                                     $s$wa =
                                       \ sc sc1 sc2 ->
                                         case <=# sc1 0 of _ {
                                           False ->
                                             $s$wa
                                               ((writeIntArray# ipv1 sc2 0 (sc `cast` ...))
                                                `cast` ...)
                                               (-# sc1 1)
                                               (+# sc2 1);
                                           True -> (# sc, I# sc2 #)
                                         }; } in
                                   let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv `cast` ...) dt3 0 } in
                                   let { I# dt11 ~ _ <- ipv6 } in
                                   let { (# ipv2, ipv3 #) ~ _
                                   <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
                                   } in
                                   (# ipv2 `cast` ..., (Vector 0 dt11 ipv3) `cast` ... #) } in
                             case <=# dt3 0 of _ {
                               False -> $j dt3;
                               True -> $j 0
                             }) } in
                    let {
                      a17
                      a17 = Vector dt5 dt6 dt7 } in
                    UPSSegd
                      True
                      (a17 `cast` ...)
                      dt9
                      dt
                      dt3
                      dt4
                      dt5
                      dt6
                      dt7
                      dt8
                      (splitSSegdOnElemsD
                         theGang
                         (USSegd True (a17 `cast` ...) dt9 dt dt3 dt4 dt5 dt6 dt7 dt8)) } in
                let {
                  vsegids4
                  vsegids4 =
                    let { UPSSegd dt3 dt6 dt7 dt8 dt9 dt10 dt11 dt4 dt5 dt14 ds1 ~ _
                    <- upssegd
                    } in
                    runSTRep
                      (\ @ s s1 ->
                         let {
                           a17
                           a17 = -# dt9 1 } in
                         let {
                           $j
                           $j =
                             \ x ->
                               let { (# ipv, ipv1 #) ~ _
                               <- newByteArray# (*# x 8) (s1 `cast` ...)
                               } in
                               letrec {
                                 $s$wa
                                 $s$wa =
                                   \ sc sc1 sc2 ->
                                     case <=# sc1 a17 of _ {
                                       False -> (# sc, I# sc2 #);
                                       True ->
                                         $s$wa
                                           ((writeIntArray# ipv1 sc2 sc1 (sc `cast` ...))
                                            `cast` ...)
                                           (+# sc1 1)
                                           (+# sc2 1)
                                     }; } in
                               let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv `cast` ...) 0 0 } in
                               let { I# dt16 ~ _ <- ipv6 } in
                               let { (# ipv2, ipv3 #) ~ _
                               <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
                               } in
                               (# ipv2 `cast` ..., (Vector 0 dt16 ipv3) `cast` ... #) } in
                         case ># 0 a17 of _ {
                           False ->
                             let {
                               a18
                               a18 = +# a17 1 } in
                             case ># a18 0 of _ {
                               False -> case lvl91 of wild4 { };
                               True -> $j a18
                             };
                           True -> $j 0
                         }) } in
                UPVSegd
                  True vsegids4 vsegids4 upssegd upssegd (mkDist vsegids4 upssegd))
               ((PNesteds
                   (runSTRep
                      (\ @ s s1 ->
                         let { (# ipv, ipv1 #) ~ _
                         <- newArray# 1 (uninitialised) (s1 `cast` ...)
                         } in
                         let { (# ipv2, ipv3 #) ~ _
                         <- unsafeFreezeArray#
                              ipv1 (writeArray# ipv1 0 (a16 `cast` ...) ipv)
                         } in
                         (# ipv2 `cast` ..., Vector 0 1 ipv3 #))))
                `cast` ...)
               segd'1
               (a16 `cast` ...))
            `cast` ...))
        `cast` ...
    }

$vsplitPoints4
$vsplitPoints4 = $wlsplitPoints

$vsplitPoints3
$vsplitPoints3 = $vsplitPoints4

lvl189
lvl189 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl190
lvl190 = $fDT(,) $fDTInt $dDT1

lvl191
lvl191 = What lvl5

lvl192
lvl192 = What lvl114

lvl193
lvl193 = I# 1

lvl194
lvl194 = splitLenD theGang lvl193

lvl195
lvl195 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl196
lvl196 = $fDT(,) $fDTInt $dDT1

lvl197
lvl197 = What lvl5

lvl198
lvl198 = What lvl114

lvl199
lvl199 = splitLenD theGang lvl193

lvl200
lvl200 =
  \ @ s s1 ->
    let { (# ipv, ipv1 #) ~ _ <- newByteArray# 8 (s1 `cast` ...) } in
    letrec {
      $s$wa
      $s$wa =
        \ sc sc1 sc2 ->
          case <=# sc1 0 of _ {
            False ->
              $s$wa
                ((writeIntArray# ipv1 sc2 0 (sc `cast` ...)) `cast` ...)
                (-# sc1 1)
                (+# sc2 1);
            True -> (# sc, I# sc2 #)
          }; } in
    let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv `cast` ...) 1 0 } in
    let { I# dt4 ~ _ <- ipv6 } in
    let { (# ipv2, ipv3 #) ~ _
    <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
    } in
    (# ipv2 `cast` ..., (Vector 0 dt4 ipv3) `cast` ... #)

vsegids2
vsegids2 = runSTRep lvl200

lvl201
lvl201 =
  \ @ s s1 ->
    let { (# ipv, ipv1 #) ~ _ <- newByteArray# 8 (s1 `cast` ...) } in
    let { (# ipv2, ipv3 #) ~ _
    <- unsafeFreezeByteArray# ipv1 (writeIntArray# ipv1 0 0 ipv)
    } in
    (# ipv2 `cast` ..., (Vector 0 1 ipv3) `cast` ... #)

dt12
dt12 = runSTRep lvl201

dt13
dt13 = runSTRep lvl201

lvl202
lvl202 = runSTRep lvl201

vsegids1
vsegids1 = runSTRep lvl200

dt1
dt1 = runSTRep lvl201

dt2
dt2 = runSTRep lvl201

lvl203
lvl203 = runSTRep lvl201

lvl204
lvl204 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl205
lvl205 = $fDT(,) $fDTInt $dDT1

lvl206
lvl206 = What lvl5

lvl207
lvl207 = $fDT(,) lvl19 $fDTInt

lvl208
lvl208 = What lvl87

lvl209
lvl209 = unsafeDupablePerformIO (lvl89 `cast` ...)

$wvsplitPoints
$wvsplitPoints =
  \ w w1 ->
    (# PArray
         2
         ((PInt
             (let { I# ipv ~ _ <- w } in
              let { DVector ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ~ nt
              <- (imapD'
                    $fDTInt
                    $dDT1
                    lvl198
                    theGang
                    (\ _ x ->
                       let { I# ipv1 ~ _ <- x } in
                       runSTRep
                         (\ @ s s1 ->
                            let {
                              $j
                              $j =
                                \ x1 ->
                                  let { (# ipv2, ipv3 #) ~ _
                                  <- newByteArray# (*# x1 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $s$wa
                                    $s$wa =
                                      \ sc sc1 sc2 ->
                                        case <=# sc1 0 of _ {
                                          False ->
                                            $s$wa
                                              ((writeIntArray# ipv3 sc2 ipv (sc `cast` ...))
                                               `cast` ...)
                                              (-# sc1 1)
                                              (+# sc2 1);
                                          True -> (# sc, I# sc2 #)
                                        }; } in
                                  let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv2 `cast` ...) ipv1 0 } in
                                  let { I# dt4 ~ _ <- ipv6 } in
                                  let { (# ipv4, ipv7 #) ~ _
                                  <- unsafeFreezeByteArray# ipv3 (ipv5 `cast` ...)
                                  } in
                                  (# ipv4 `cast` ..., (Vector 0 dt4 ipv7) `cast` ... #) } in
                            case <=# ipv1 0 of _ {
                              False -> $j ipv1;
                              True -> $j 0
                            }))
                    lvl199)
                 `cast` ...
              } in
              let { Vector ipv7 ipv8 ipv9 ~ _
              <- (runSTRep
                    (\ @ s s1 ->
                       let { (di, n) ~ _
                       <- scanD
                            $fDTInt
                            lvl197
                            theGang
                            $fNumInt_$c+
                            lvl7
                            ((DInt ipv1 ipv2 ipv3) `cast` ...)
                       } in
                       let { DInt ipv7 ipv8 ipv9 ~ nt1 <- di `cast` ... } in
                       let { I# ipv10 ~ n1 <- n } in
                       case >=# ipv10 0 of _ {
                         False -> case lvl195 ipv10 of wild1 { };
                         True ->
                           let { (# ipv11, ipv12 #) ~ _
                           <- newByteArray# (*# ipv10 8) (s1 `cast` ...)
                           } in
                           let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                           let {
                             nt2
                             nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                           let { (# ipv14, ipv15 #) ~ _
                           <- ($wa1
                                 ww1
                                 ww2
                                 ww3
                                 (++
                                    $fShowComp2
                                    ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                 (WorkCopy n1)
                                 ((\ i s2 ->
                                     let { (# ipv14, ipv15 #) ~ _
                                     <- ((((myD lvl196 (nt2 `cast` ...)) `cast` ...) i) `cast` ...)
                                          s2
                                     } in
                                     let { (x, y) ~ _ <- ipv15 } in
                                     let { I# ipv16 ~ _ <- x } in
                                     let { Vector ipv13 ipv17 ipv18 ~ _ <- y `cast` ... } in
                                     (# copyByteArray#
                                          ipv18
                                          (*# ipv13 8)
                                          ipv12
                                          (*# ipv16 8)
                                          (*# ipv17 8)
                                          (ipv14 `cast` ...),
                                        () #)
                                     `cast` ...)
                                  `cast` ...)
                                 (ipv11 `cast` ...))
                              `cast` ...
                           } in
                           let { (# ipv13, ipv16 #) ~ _
                           <- unsafeFreezeByteArray# ipv12 (ipv14 `cast` ...)
                           } in
                           (# ipv13 `cast` ..., (Vector 0 ipv10 ipv16) `cast` ... #)
                       }))
                 `cast` ...
              } in
              let { DVector ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ~ nt2
              <- (imapD'
                    $fDTInt
                    $dDT1
                    lvl192
                    theGang
                    (\ _ x ->
                       let { I# ipv10 ~ _ <- x } in
                       runSTRep
                         (\ @ s s1 ->
                            let {
                              $j
                              $j =
                                \ x1 ->
                                  let { (# ipv11, ipv12 #) ~ _
                                  <- newByteArray# (*# x1 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $s$wa
                                    $s$wa =
                                      \ sc sc1 sc2 ->
                                        case <=# sc1 0 of _ {
                                          False ->
                                            $s$wa
                                              ((writeIntArray# ipv12 sc2 ipv (sc `cast` ...))
                                               `cast` ...)
                                              (-# sc1 1)
                                              (+# sc2 1);
                                          True -> (# sc, I# sc2 #)
                                        }; } in
                                  let { (# ipv13, ipv14 #) ~ _
                                  <- $s$wa (ipv11 `cast` ...) ipv10 0
                                  } in
                                  let { I# dt4 ~ _ <- ipv14 } in
                                  let { (# ipv15, ipv16 #) ~ _
                                  <- unsafeFreezeByteArray# ipv12 (ipv13 `cast` ...)
                                  } in
                                  (# ipv15 `cast` ..., (Vector 0 dt4 ipv16) `cast` ... #) } in
                            case <=# ipv10 0 of _ {
                              False -> $j ipv10;
                              True -> $j 0
                            }))
                    lvl194)
                 `cast` ...
              } in
              let { Vector ipv16 ipv17 ipv18 ~ _
              <- (runSTRep
                    (\ @ s s1 ->
                       let { (di, n) ~ _
                       <- scanD
                            $fDTInt
                            lvl191
                            theGang
                            $fNumInt_$c+
                            lvl7
                            ((DInt ipv10 ipv11 ipv12) `cast` ...)
                       } in
                       let { DInt ipv16 ipv17 ipv18 ~ nt3 <- di `cast` ... } in
                       let { I# ipv19 ~ n1 <- n } in
                       case >=# ipv19 0 of _ {
                         False -> case lvl189 ipv19 of wild1 { };
                         True ->
                           let { (# ipv20, ipv21 #) ~ _
                           <- newByteArray# (*# ipv19 8) (s1 `cast` ...)
                           } in
                           let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                           let {
                             nt4
                             nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                           let { (# ipv22, ipv23 #) ~ _
                           <- ($wa1
                                 ww1
                                 ww2
                                 ww3
                                 (++
                                    $fShowComp2
                                    ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                 (WorkCopy n1)
                                 ((\ i s2 ->
                                     let { (# ipv22, ipv23 #) ~ _
                                     <- ((((myD lvl190 (nt4 `cast` ...)) `cast` ...) i) `cast` ...)
                                          s2
                                     } in
                                     let { (x, y) ~ _ <- ipv23 } in
                                     let { I# ipv24 ~ _ <- x } in
                                     let { Vector ipv25 ipv26 ipv27 ~ _ <- y `cast` ... } in
                                     (# copyByteArray#
                                          ipv27
                                          (*# ipv25 8)
                                          ipv21
                                          (*# ipv24 8)
                                          (*# ipv26 8)
                                          (ipv22 `cast` ...),
                                        () #)
                                     `cast` ...)
                                  `cast` ...)
                                 (ipv20 `cast` ...))
                              `cast` ...
                           } in
                           let { (# ipv24, ipv25 #) ~ _
                           <- unsafeFreezeByteArray# ipv21 (ipv22 `cast` ...)
                           } in
                           (# ipv24 `cast` ..., (Vector 0 ipv19 ipv25) `cast` ... #)
                       }))
                 `cast` ...
              } in
              runSTRep
                (\ @ s s1 ->
                   let { (# ipv19, ipv20 #) ~ _
                   <- newByteArray# (*# (+# ipv8 ipv17) 8) (s1 `cast` ...)
                   } in
                   letrec {
                     $s$wa
                     $s$wa =
                       \ sc sc1 sc2 ->
                         case >=# sc1 ipv17 of _ {
                           False ->
                             let { __DEFAULT ~ wild <- indexIntArray# ipv18 (+# ipv16 sc1) } in
                             $s$wa
                               (+# sc 1)
                               (+# sc1 1)
                               ((writeIntArray# ipv20 sc wild (sc2 `cast` ...)) `cast` ...);
                           True -> (# sc2, I# sc #)
                         }; } in
                   letrec {
                     $s$wa1
                     $s$wa1 =
                       \ sc sc1 sc2 ->
                         case >=# sc2 ipv8 of _ {
                           False ->
                             let { __DEFAULT ~ wild <- indexIntArray# ipv9 (+# ipv7 sc2) } in
                             $s$wa1
                               ((writeIntArray# ipv20 sc1 wild (sc `cast` ...)) `cast` ...)
                               (+# sc1 1)
                               (+# sc2 1);
                           True -> $s$wa sc1 0 sc
                         }; } in
                   let { (# ipv21, ipv22 #) ~ _ <- $s$wa1 (ipv19 `cast` ...) 0 0 } in
                   let { I# dt4 ~ _ <- ipv22 } in
                   let { (# ipv23, ipv24 #) ~ _
                   <- unsafeFreezeByteArray# ipv20 (ipv21 `cast` ...)
                   } in
                   (# ipv23 `cast` ..., (Vector 0 dt4 ipv24) `cast` ... #))))
          `cast` ...),
       PArray
         2
         (let { PArray n xs ~ _ <- w1 } in
          let {
            pdatas
            pdatas =
              let { PInt arr ~ _ <- xs `cast` ... } in
              (PInts
                 (runSTRep
                    (\ @ s s1 ->
                       let { Vector ipv ipv1 ipv2 ~ _ <- arr `cast` ... } in
                       let { (# ipv3, ipv4 #) ~ _
                       <- newByteArray# (*# ipv1 8) (s1 `cast` ...)
                       } in
                       letrec {
                         $s$wa
                         $s$wa =
                           \ sc sc1 sc2 ->
                             case >=# sc1 ipv1 of _ {
                               False ->
                                 let { __DEFAULT ~ wild3 <- indexIntArray# ipv2 (+# ipv sc1) } in
                                 $s$wa
                                   ((writeIntArray# ipv4 sc2 wild3 (sc `cast` ...)) `cast` ...)
                                   (+# sc1 1)
                                   (+# sc2 1);
                               True -> (# sc, I# sc2 #)
                             }; } in
                       let { (# ipv5, ipv6 #) ~ _ <- $s$wa (ipv3 `cast` ...) 0 0 } in
                       let { I# dt4 ~ _ <- ipv6 } in
                       let { (# ipv7, ipv8 #) ~ _
                       <- unsafeFreezeByteArray# (ipv4 `cast` ...) ipv5
                       } in
                       let { (# ipv9, ipv10 #) ~ _ <- newByteArray# 8 ipv7 } in
                       let { (# ipv11, ipv12 #) ~ _
                       <- unsafeFreezeByteArray# ipv10 (writeIntArray# ipv10 0 0 ipv9)
                       } in
                       let { (# ipv13, ipv14 #) ~ _ <- newByteArray# 8 ipv11 } in
                       let { (# ipv15, ipv16 #) ~ _
                       <- unsafeFreezeByteArray# ipv14 (writeIntArray# ipv14 0 dt4 ipv13)
                       } in
                       let { (# ipv17, ipv18 #) ~ _
                       <- newArrayArray# 1 (ipv15 `cast` ...)
                       } in
                       let { __DEFAULT ~ s'#
                       <- writeByteArrayArray# ipv18 0 ipv8 ipv17
                       } in
                       let { (# ipv19, ipv20 #) ~ _
                       <- unsafeFreezeArrayArray# ipv18 s'#
                       } in
                       (# ipv19, Vectors 1 ipv12 ipv16 ipv20 #))))
              `cast` ... } in
          let {
            vsegd'
            vsegd' =
              let {
                ussegd
                ussegd =
                  let { Vector dt3 dt6 dt7 ~ _
                  <- (runSTRep
                        (\ @ s s1 ->
                           let { (# ipv, ipv1 #) ~ _ <- newByteArray# 8 (s1 `cast` ...) } in
                           let { (# ipv2, ipv3 #) ~ _
                           <- unsafeFreezeByteArray# ipv1 (writeIntArray# ipv1 0 n ipv)
                           } in
                           (# ipv2 `cast` ..., (Vector 0 1 ipv3) `cast` ... #)))
                     `cast` ...
                  } in
                  let { Vector dt9 dt10 dt11 ~ _ <- lvl202 `cast` ... } in
                  UPSSegd
                    True
                    dt12
                    dt13
                    dt3
                    dt6
                    dt7
                    dt9
                    dt10
                    dt11
                    n
                    (splitSSegdOnElemsD
                       theGang (USSegd True dt12 dt13 dt3 dt6 dt7 dt9 dt10 dt11 n)) } in
              let {
                ussegd1
                ussegd1 =
                  let { Vector dt3 dt6 dt7 ~ _
                  <- (runSTRep
                        (\ @ s s1 ->
                           let { (# ipv, ipv1 #) ~ _ <- newByteArray# 8 (s1 `cast` ...) } in
                           let { (# ipv2, ipv3 #) ~ _
                           <- unsafeFreezeByteArray# ipv1 (writeIntArray# ipv1 0 n ipv)
                           } in
                           (# ipv2 `cast` ..., (Vector 0 1 ipv3) `cast` ... #)))
                     `cast` ...
                  } in
                  let { Vector dt9 dt10 dt11 ~ _ <- lvl203 `cast` ... } in
                  UPSSegd
                    True
                    dt1
                    dt2
                    dt3
                    dt6
                    dt7
                    dt9
                    dt10
                    dt11
                    n
                    (splitSSegdOnElemsD
                       theGang (USSegd True dt1 dt2 dt3 dt6 dt7 dt9 dt10 dt11 n)) } in
              appendWith
                (UPVSegd
                   False vsegids2 vsegids2 ussegd ussegd (mkDist vsegids2 ussegd))
                ($fPRInt_$clengthdPR (pdatas `cast` ...))
                (UPVSegd
                   False vsegids1 vsegids1 ussegd1 ussegd1 (mkDist vsegids1 ussegd1))
                ($fPRInt_$clengthdPR (pdatas `cast` ...)) } in
          let {
            pdatas'
            pdatas' =
              let { PInts xs1 ~ _ <- pdatas `cast` ... } in
              (PInts
                 (let { Vectors dt dt3 dt4 dt5 ~ _ <- xs1 } in
                  runSTRep
                    (\ @ s s1 ->
                       let {
                         a11
                         a11 = sizeofByteArray# dt3 } in
                       let {
                         a12
                         a12 = sizeofByteArray# dt3 } in
                       let { (# ipv, ipv1 #) ~ _
                       <- newByteArray# (+# a12 a11) (s1 `cast` ...)
                       } in
                       let { (# ipv2, ipv3 #) ~ _
                       <- unsafeFreezeByteArray#
                            ipv1
                            (copyByteArray#
                               dt3 0 ipv1 a12 a11 (copyByteArray# dt3 0 ipv1 0 a12 ipv))
                       } in
                       let {
                         a13
                         a13 = sizeofByteArray# dt4 } in
                       let {
                         a14
                         a14 = sizeofByteArray# dt4 } in
                       let { (# ipv4, ipv5 #) ~ _ <- newByteArray# (+# a14 a13) ipv2 } in
                       let { (# ipv6, ipv7 #) ~ _
                       <- unsafeFreezeByteArray#
                            ipv5
                            (copyByteArray#
                               dt4 0 ipv5 a12 a13 (copyByteArray# dt4 0 ipv5 0 a14 ipv4))
                       } in
                       let {
                         a15
                         a15 = +# dt dt } in
                       let { (# ipv8, ipv9 #) ~ _
                       <- newArrayArray# a15 (ipv6 `cast` ...)
                       } in
                       let {
                         ipv10
                         ipv10 = MutableArrayArray ipv9 } in
                       let { (# ipv11, ipv12 #) ~ _
                       <- $wa ipv10 0 (ArrayArray dt5) 0 dt ipv8
                       } in
                       let { (# ipv13, ipv14 #) ~ _
                       <- $wa ipv10 dt (ArrayArray dt5) 0 dt ipv11
                       } in
                       let { (# ipv15, ipv16 #) ~ _
                       <- unsafeFreezeArrayArray# ipv9 ipv13
                       } in
                       (# ipv15, Vectors a15 ipv3 ipv7 ipv16 #))))
              `cast` ... } in
          (PNested
             vsegd'
             (pdatas' `cast` ...)
             (unsafeDemoteToUPSegd vsegd')
             (let { PInts arrs ~ _ <- pdatas' `cast` ... } in
              (PInt
                 (let { UPVSegd ipv ipv1 ipv2 ipv3 ipv4 ipv5 ~ _ <- vsegd' } in
                  let { Vectors ipv6 ipv7 ipv8 ipv9 ~ _ <- arrs } in
                  let { UPSSegd dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt14 ds1 ~ _
                  <- ipv3
                  } in
                  let { Vector ipv10 ipv11 ipv12 ~ _ <- ipv1 `cast` ... } in
                  let { DProd ipv13 ipv14 ~ nt1 <- ipv5 `cast` ... } in
                  let { DVector ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ~ nt2
                  <- (imapD'
                        lvl207
                        $dDT1
                        lvl208
                        theGang
                        (\ _ x ->
                           let { (x1, y) ~ _ <- x } in
                           let { (x2, y1) ~ _ <- x1 } in
                           let { USegd dt dt15 dt16 dt17 dt18 dt19 dt20 ~ _ <- x2 } in
                           let { I# ipv15 ~ _ <- y1 } in
                           let { I# ipv16 ~ _ <- y } in
                           let { ByteArray ipv26 ~ _ <- lvl209 } in
                           let { Vector ipv27 ipv28 ipv29 ~ _ <- dt5 `cast` ... } in
                           let { Vector ipv30 ipv31 ipv32 ~ _ <- dt4 `cast` ... } in
                           letrec {
                             $s$wfoldlM'_loop
                             $s$wfoldlM'_loop =
                               \ sc sc1 ->
                                 case >=# sc dt15 of _ {
                                   False ->
                                     let { __DEFAULT ~ wild7 <- indexIntArray# dt16 (+# dt sc) } in
                                     $s$wfoldlM'_loop (+# sc 1) (+# sc1 wild7);
                                   True -> sc1
                                 }; } in
                           let { __DEFAULT ~ ww <- $s$wfoldlM'_loop 0 0 } in
                           runSTRep
                             (\ @ s s1 ->
                                let { (# ipv17, ipv18 #) ~ _
                                <- newByteArray# (*# ww 8) (s1 `cast` ...)
                                } in
                                letrec {
                                  $s$wa
                                  $s$wa =
                                    \ sc sc1 sc2 sc3 sc4 sc5 ->
                                      case >=# sc1 sc2 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild7 <- indexIntArray# sc3 sc1 } in
                                          $s$wa
                                            ((writeIntArray# ipv18 sc5 wild7 (sc `cast` ...))
                                             `cast` ...)
                                            (+# sc1 1)
                                            sc2
                                            sc3
                                            sc4
                                            (+# sc5 1);
                                        True ->
                                          case >=# (+# sc4 1) dt15 of _ {
                                            False ->
                                              let {
                                                a11
                                                a11 = +# sc4 1 } in
                                              let { __DEFAULT ~ wild8
                                              <- indexIntArray# ipv12 (+# ipv10 (+# a11 ipv15))
                                              } in
                                              let { __DEFAULT ~ wild9
                                              <- indexIntArray# ipv29 (+# ipv27 wild8)
                                              } in
                                              let {
                                                $j
                                                $j =
                                                  \ ww1 ->
                                                    let { __DEFAULT ~ wild10
                                                    <- indexIntArray# ipv7 wild9
                                                    } in
                                                    let { __DEFAULT ~ wild11
                                                    <- indexIntArray# ipv32 (+# ipv30 wild8)
                                                    } in
                                                    let { __DEFAULT ~ wild12
                                                    <- indexIntArray# dt16 (+# dt a11)
                                                    } in
                                                    let { __DEFAULT ~ wild13
                                                    <- indexByteArrayArray# ipv9 wild9
                                                    } in
                                                    $s$wa
                                                      sc
                                                      (+# (+# wild10 wild11) ww1)
                                                      (+# (+# (+# wild10 wild11) ww1) wild12)
                                                      wild13
                                                      a11
                                                      sc5 } in
                                              case a11 of _ {
                                                __DEFAULT -> $j 0;
                                                0 -> $j ipv16
                                              };
                                            True -> (# sc, I# sc5 #)
                                          }
                                      }; } in
                                let { (# ipv19, ipv20 #) ~ _
                                <- $s$wa (ipv17 `cast` ...) 0 0 ipv26 (-1) 0
                                } in
                                let { I# dt22 ~ _ <- ipv20 } in
                                let { (# ipv21, ipv22 #) ~ _
                                <- unsafeFreezeByteArray# ipv18 (ipv19 `cast` ...)
                                } in
                                (# ipv21 `cast` ..., (Vector 0 dt22 ipv22) `cast` ... #)))
                        (nt1 `cast` ...))
                     `cast` ...
                  } in
                  runSTRep
                    (\ @ s s1 ->
                       let { (di, n1) ~ _
                       <- scanD
                            $fDTInt
                            lvl206
                            theGang
                            $fNumInt_$c+
                            lvl7
                            ((DInt ipv15 ipv16 ipv17) `cast` ...)
                       } in
                       let { DInt ipv21 ipv22 ipv23 ~ nt3 <- di `cast` ... } in
                       let { I# ipv24 ~ n2 <- n1 } in
                       case >=# ipv24 0 of _ {
                         False -> case lvl204 ipv24 of wild5 { };
                         True ->
                           let { (# ipv25, ipv26 #) ~ _
                           <- newByteArray# (*# ipv24 8) (s1 `cast` ...)
                           } in
                           let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                           let {
                             nt4
                             nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                           let { (# ipv27, ipv28 #) ~ _
                           <- ($wa1
                                 ww1
                                 ww2
                                 ww3
                                 (++
                                    $fShowComp2
                                    ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n2) ([])))
                                 (WorkCopy n2)
                                 ((\ i s2 ->
                                     let { (# ipv27, ipv28 #) ~ _
                                     <- ((((myD lvl205 (nt4 `cast` ...)) `cast` ...) i) `cast` ...)
                                          s2
                                     } in
                                     let { (x, y) ~ _ <- ipv28 } in
                                     let { I# ipv29 ~ _ <- x } in
                                     let { Vector ipv30 ipv31 ipv32 ~ _ <- y `cast` ... } in
                                     (# copyByteArray#
                                          ipv32
                                          (*# ipv30 8)
                                          ipv26
                                          (*# ipv29 8)
                                          (*# ipv31 8)
                                          (ipv27 `cast` ...),
                                        () #)
                                     `cast` ...)
                                  `cast` ...)
                                 (ipv25 `cast` ...))
                              `cast` ...
                           } in
                           let { (# ipv29, ipv30 #) ~ _
                           <- unsafeFreezeByteArray# ipv26 (ipv27 `cast` ...)
                           } in
                           (# ipv29 `cast` ..., (Vector 0 ipv24 ipv30) `cast` ... #)
                       })))
              `cast` ...))
          `cast` ...) #)

$vsplitPoints6
$vsplitPoints6 =
  \ w w1 ->
    let { (# ww1, ww2 #) ~ _ <- $wvsplitPoints w w1 } in (ww1, ww2)

$vsplitPoints5
$vsplitPoints5 = $vsplitPoints6

lvl210
lvl210 = \ ds v x -> let { I# c ~ _ <- ds } in $wlsplitPoints c v x

$vsplitPoints8
$vsplitPoints8 = \ x -> Clo $fPAInt $vsplitPoints5 lvl210 x

$vsplitPoints7
$vsplitPoints7 = \ _ arg -> $vsplitPoints8 arg

a9
a9 = \ _ x -> AClo $fPAInt $vsplitPoints5 lvl210 x

$vsplitPoints2
$vsplitPoints2 = a9 `cast` ...

$vsplitPoints1
$vsplitPoints1 = \ lc _ arg -> $vsplitPoints2 lc arg

a10
a10 = \ ds _ x -> let { I# c ~ _ <- ds } in $vsplitPoints2 c x

$vsplitPoints
$vsplitPoints = Clo $fPAVoid $vsplitPoints7 a10 void



