[1 of 1] Compiling BlowupBH         ( BlowupBH.hs, BlowupBH.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 19,649, types: 23,10, coercions: 6,59}

$wsplitPoints
$wsplitPoints =
  \ w w1 ->
    (# +:+ (singletonP w) (singletonP w),
       +:+ (singletonP w1) (singletonP w1) #)

splitPoints
splitPoints =
  \ w w1 ->
    let { (# ww1, ww2 #) ~ _ <- $wsplitPoints w w1 } in (ww1, ww2)

lvl
lvl =
  unpackCString# "libraries/vector/Data/Vector/Generic/Mutable.hs"#

lvl1
lvl1 = I# 480

lvl2
lvl2 = unpackCString# "new"#

lvl3
lvl3 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

$dDT1
$dDT1 = $fDTVector $fUnboxInt

lvl4
lvl4 = $fDT(,) $fDTInt $dDT1

lvl5
lvl5 = unpackCString# "joinD_impl/count"#

lvl6
lvl6 = What lvl5

lvl7
lvl7 = I# 0

lvl8
lvl8 = unpackCString# "zipWithUP/map"#

lvl9
lvl9 = What lvl8

lvl10
lvl10 = WFMapGen lvl9 WSlice

lvl11
lvl11 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl12
lvl12 = $fDT(,) $fDTInt $dDT1

lvl13
lvl13 = What lvl5

lvl14
lvl14 = What lvl8

lvl15
lvl15 = WFMapGen lvl14 WSlice

lvl16
lvl16 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl17
lvl17 = $fDT(,) $fDTInt $dDT1

lvl18
lvl18 = What lvl5

lvl19
lvl19 = $fDT(,) $fDTUSegd $fDTInt

lvl20
lvl20 = $fDT(,) lvl19 $fDTInt

lvl21
lvl21 = unpackCString# "appendSUPV/append"#

lvl22
lvl22 = What lvl21

lvl23
lvl23 =
  unpackCString#
    "libraries/vector/Data/Vector/Fusion/Stream/Monadic.hs"#

lvl24
lvl24 = I# 1283

lvl25
lvl25 = unpackCString# "enumFromTo"#

lvl26
lvl26 = unpackCString# "vector too large"#

lvl27
lvl27 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl28
lvl28 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl29
lvl29 = $fDT(,) $fDTInt $dDT1

lvl30
lvl30 = What lvl5

lvl31
lvl31 = What lvl8

lvl32
lvl32 = WFMapGen lvl31 WSlice

lvl33
lvl33 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl34
lvl34 = $fDT(,) $fDTInt $dDT1

lvl35
lvl35 = What lvl5

lvl36
lvl36 = What lvl8

lvl37
lvl37 = WFMapGen lvl36 WSlice

lvl38
lvl38 =
  \ @ b @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl39
lvl39 = \ @ s -> $fPrimMonadST ($fMonadST)

lvl40
lvl40 = unpackCString# "libraries/vector/Data/Vector/Generic.hs"#

lvl41
lvl41 = I# 1829

lvl42
lvl42 = unpackCString# "copy"#

lvl43
lvl43 = unpackCString# "length mismatch"#

lvl44
lvl44 = \ @ s -> checkError lvl40 lvl41 Bounds lvl42 lvl43

lvl45
lvl45 = What lvl5

lvl46
lvl46 = unpackCString# "mapUP/map"#

lvl47
lvl47 = What lvl46

lvl48
lvl48 = WFMapGen lvl47 WSlice

$wgetsrc
$wgetsrc =
  \ @ b w ww w1 w2 ->
    let { D:Unbox ww2 ww3 ~ ww1 <- ww } in
    let { __DEFAULT ~ xs1 <- w1 } in
    let { Gang dt ds1 ds2 ~ wild <- theGang } in
    let { I# x ~ _ <- basicLength ww2 xs1 } in
    let { __DEFAULT ~ wild2 <- quotInt# x dt } in
    let {
      l
      l = I# wild2 } in
    let {
      a11
      a11 = +# wild2 1 } in
    let {
      lvl230
      lvl230 = I# a11 } in
    let {
      lvl231
      lvl231 = $p1Vector ww2 } in
    let {
      lvl232
      lvl232 = basicUnsafeSlice ww2 } in
    let {
      lvl233
      lvl233 = basicLength ww2 } in
    let {
      lvl234
      lvl234 = \ @ s -> basicUnsafeFreeze ww2 } in
    let {
      lvl235
      lvl235 = basicUnsafeIndexM ww2 } in
    let {
      lvl236
      lvl236 = + w } in
    let { __DEFAULT ~ wild3 <- remInt# x dt } in
    let { DVector ipv ipv1 ipv2 ipv3 ipv4 ipv5 ~ nt
    <- (generateD
          ($fDTVector ww1)
          lvl48
          wild
          (\ i ->
             let { D:MVector ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15
                             ww16 ~ _
             <- lvl231
             } in
             let { __DEFAULT ~ v2
             <- lvl232
                  (let { I# x1 ~ _ <- i } in
                   case <# x1 wild3 of _ {
                     False -> I# (+# (*# wild2 x1) wild3);
                     True -> I# (*# (+# wild2 1) x1)
                   })
                  (let { I# x1 ~ _ <- i } in
                   case <# x1 wild3 of _ {
                     False -> l;
                     True -> lvl230
                   })
                  xs1
             } in
             let { I# ipv ~ n <- lvl233 v2 } in
             runSTRep
               (\ @ s s1 ->
                  let { (# ipv3, ipv4 #) ~ _ <- ((ww8 (lvl39) n) `cast` ...) s1 } in
                  letrec {
                    $wa
                    $wa =
                      \ w3 ww17 ww18 w4 ->
                        let { __DEFAULT ~ _ <- w3 } in
                        case >=# ww18 ipv of _ {
                          False ->
                            let { Box x1 ~ _ <- lvl235 $fMonadBox v2 (I# ww18) } in
                            let { (# ipv6, ipv7 #) ~ _
                            <- ((ww11 (lvl39) ipv4 (I# ww17) (lvl236 x1 w2)) `cast` ...) w4
                            } in
                            $wa SPEC (+# ww17 1) (+# ww18 1) ipv6;
                          True -> (# w4, I# ww17 #)
                        }; } in
                  let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 0 ipv3 } in
                  ((lvl234 (lvl39) (ww6 lvl7 ipv6 ipv4)) `cast` ...) ipv5)))
       `cast` ...
    } in
    runSTRep
      (\ @ s s1 ->
         let { (di, n) ~ _
         <- scanD
              $fDTInt
              lvl45
              wild
              $fNumInt_$c+
              lvl7
              ((DInt ipv ipv1 ipv2) `cast` ...)
         } in
         let { DInt ipv6 ipv7 ipv8 ~ nt1 <- di `cast` ... } in
         let { I# ipv9 ~ n1 <- n } in
         case >=# ipv9 0 of _ {
           False -> case lvl38 ipv9 of wild6 { };
           True ->
             let { (# ipv10, ipv11 #) ~ _
             <- ((basicUnsafeNew ww3 (lvl39) n1) `cast` ...) s1
             } in
             let {
               nt2
               nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
             let {
               $dDT7
               $dDT7 = $fDTVector ww1 } in
             let {
               lvl237
               lvl237 = $fDT(,) $fDTInt $dDT7 } in
             let {
               lvl238
               lvl238 = \ @ s2 -> basicUnsafeSlice ww3 } in
             let { (# ipv14, ipv15 #) ~ _
             <- ($wa1
                   dt
                   ds1
                   ds2
                   (++
                      $fShowComp2
                      ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                   (WorkCopy n1)
                   ((\ i s2 ->
                       let { (# ipv14, ipv15 #) ~ _
                       <- ((((myD lvl237 (nt2 `cast` ...)) `cast` ...) i) `cast` ...) s2
                       } in
                       let { (x1, y) ~ _ <- ipv15 } in
                       let { I# ipv16 ~ tpl2 <- x1 } in
                       let { __DEFAULT ~ tpl1 <- y } in
                       let { D:Vector ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ~ _ <- ww2 } in
                       let {
                         a12
                         a12 = lvl238 tpl2 (ww8 tpl1) ipv11 } in
                       let { I# x2 ~ _ <- basicLength ww5 (a12 `cast` ...) } in
                       let { I# y1 ~ _ <- ww8 tpl1 } in
                       case ==# x2 y1 of _ {
                         False -> case lvl44 of wild10 { };
                         True ->
                           let { __DEFAULT ~ nt3 <- a12 } in
                           ((ww11 (lvl39) (nt3 `cast` ...) tpl1) `cast` ...) ipv14
                       })
                    `cast` ...)
                   (ipv10 `cast` ...))
                `cast` ...
             } in
             ((basicUnsafeFreeze ww2 (lvl39) (ipv11 `cast` ...)) `cast` ...)
               ipv14
         })

lvl49
lvl49 = \ @ b -> Left lvl7

$wccat
$wccat =
  \ @ b ww ww1 ww2 ->
    runSTRep
      (\ @ s s1 ->
         let { (# ipv, ipv1 #) ~ _
         <- newArray# 0 (uninitialised) (s1 `cast` ...)
         } in
         letrec {
           a11
           a11 =
             \ sPEC z1 s4 eta ->
               let { __DEFAULT ~ _ <- sPEC } in
               case s4 of _ {
                 Left t1 ->
                   let { I# x ~ _ <- t1 } in
                   case >=# x ww1 of _ {
                     False ->
                       let { (# ipv2 #) ~ _ <- indexArray# ww2 (+# ww x) } in
                       let { Vector dt dt3 dt4 ~ wild3 <- ipv2 } in
                       a11 SPEC z1 (Right ((wild3, lvl7, I# dt3), I# (+# x 1))) eta;
                     True -> (# eta, z1 #)
                   };
                 Right ds3 ->
                   let { (s3, t1) ~ _ <- ds3 } in
                   let { (v2, i, k) ~ _ <- s3 } in
                   let { I# x ~ _ <- i } in
                   let { I# y ~ wild5 <- k } in
                   case <# x y of _ {
                     False -> a11 SPEC z1 (Left t1) eta;
                     True ->
                       let { Vector dt dt3 dt4 ~ wild <- v2 } in
                       let { (v1, i1) ~ _ <- z1 } in
                       let { I# x1 ~ _ <- i1 } in
                       let { MVector dt5 dt6 dt7 ~ wild9 <- v1 `cast` ... } in
                       let { (# ipv2 #) ~ _ <- indexArray# dt4 (+# dt x) } in
                       case <# x1 dt6 of _ {
                         False ->
                           let {
                             $j
                             $j =
                               \ n# ->
                                 let { (# ipv3, ipv4 #) ~ _
                                 <- newArray# n# (uninitialised) (eta `cast` ...)
                                 } in
                                 let { __DEFAULT ~ ipv5
                                 <- (copyMutableArray# dt7 dt5 ipv4 0 dt6 ipv3) `cast` ...
                                 } in
                                 let { __DEFAULT ~ ipv6
                                 <- (writeArray# ipv4 x1 ipv2 (ipv5 `cast` ...)) `cast` ...
                                 } in
                                 a11
                                   SPEC
                                   ((MVector 0 n# ipv4) `cast` ..., I# (+# x1 1))
                                   (Right ((wild, I# (+# x 1), wild5), t1))
                                   ipv6 } in
                           case <=# dt6 1 of _ {
                             False -> $j (+# dt6 dt6);
                             True -> $j (+# dt6 1)
                           };
                         True ->
                           let { __DEFAULT ~ ipv3
                           <- (writeArray# dt7 (+# dt5 x1) ipv2 (eta `cast` ...)) `cast` ...
                           } in
                           a11
                             SPEC
                             (wild9 `cast` ..., I# (+# x1 1))
                             (Right ((wild, I# (+# x 1), wild5), t1))
                             ipv3
                       }
                   }
               }; } in
         let { (# ipv5, ipv6 #) ~ _
         <- a11
              SPEC ((MVector 0 0 ipv1) `cast` ..., lvl7) (lvl49) (ipv `cast` ...)
         } in
         let { (v', n) ~ _ <- ipv6 } in
         let { MVector dt dt3 dt4 ~ _ <- v' `cast` ... } in
         let { I# dt6 ~ _ <- n } in
         let { (# ipv2, ipv3 #) ~ _
         <- unsafeFreezeArray# dt4 (ipv5 `cast` ...)
         } in
         (# ipv2 `cast` ..., Vector dt dt6 ipv3 #))

lvl50
lvl50 = Right lvl7

lvl51
lvl51 = Left lvl7

a
a = $fDTVector_$cindexD $fUnboxInt

a1
a1 = $fDTVector_$cnewMD $fUnboxInt

a2
a2 = $fDTVector_$creadMD $fUnboxInt

a3
a3 = $fDTVector_$cwriteMD $fUnboxInt

a4
a4 = $fDTVector_$cunsafeFreezeMD $fUnboxInt

a5
a5 = \ @ b tpl tpl1 -> let { __DEFAULT ~ _ <- tpl } in tpl1

a6
a6 = $fDTVector_$csizeD $fUnboxInt

a7
a7 = $fDTVector_$csizeMD $fUnboxInt

a8
a8 = $fDTVector_$cmeasureD $fUnboxInt

$dDT5
$dDT5 = D:DT a a1 a2 a3 a4 a5 a6 a7 a8

lvl52
lvl52 = unpackCString# "foldUP/f"#

lvl53
lvl53 = What lvl52

lvl54
lvl54 = unpackCString# "foldUP/fold"#

lvl55
lvl55 = What lvl54

lvl56
lvl56 = WFMapGen lvl55 WSlice

lvl57
lvl57 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl58
lvl58 = $fDT(,) $fDTInt $dDT1

lvl59
lvl59 = What lvl5

lvl60
lvl60 = $fDT(,) $fDTInt $dDT5

lvl61
lvl61 = unpackCString# "scanUP/map"#

lvl62
lvl62 = What lvl61

lvl63
lvl63 =
  \ _ x ->
    let { (x1, y) ~ _ <- x } in
    let { I# ipv ~ _ <- x1 } in
    let { Vector ipv1 ipv2 ipv3 ~ _ <- y `cast` ... } in
    runSTRep
      (\ @ s s1 ->
         let { (# ipv4, ipv5 #) ~ _
         <- newByteArray# (*# ipv2 8) (s1 `cast` ...)
         } in
         letrec {
           $wa
           $wa =
             \ w ww ww1 w1 ->
               let { __DEFAULT ~ _ <- w } in
               case >=# ww1 ipv2 of _ {
                 False ->
                   let { __DEFAULT ~ wild2 <- indexIntArray# ipv3 (+# ipv1 ww1) } in
                   $wa
                     SPEC
                     (+# ww 1)
                     (+# ww1 1)
                     ((writeIntArray# ipv5 ww (+# ipv wild2) (w1 `cast` ...))
                      `cast` ...);
                 True -> (# w1, I# ww #)
               }; } in
         let { (# ipv6, ipv7 #) ~ _ <- $wa SPEC 0 0 (ipv4 `cast` ...) } in
         let { I# dt4 ~ _ <- ipv7 } in
         let { (# ipv8, ipv9 #) ~ _
         <- unsafeFreezeByteArray# ipv5 (ipv6 `cast` ...)
         } in
         (# ipv8 `cast` ..., (Vector 0 dt4 ipv9) `cast` ... #))

lvl64
lvl64 = unpackCString# "scanUP/scan"#

lvl65
lvl65 = What lvl64

lvl66
lvl66 = $fDT(,) $dDT5 $fDTInt

lvl67
lvl67 = unpackCString# "scanUP/scanRes"#

lvl68
lvl68 = What lvl67

lvl69
lvl69 = WFMapGen lvl68 WSlice

sb
sb = (lvl7, lvl7)

lvl70
lvl70 = Right sb

lvl71
lvl71 = Left False

lvl72
lvl72 = Left True

lvl73
lvl73 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl74
lvl74 = $fDT(,) $fDTInt $dDT1

lvl75
lvl75 = What lvl5

lvl76
lvl76 = $fDT(,) lvl19 $fDTInt

lvl77
lvl77 = What lvl21

lvl78
lvl78 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl79
lvl79 = $fDT(,) $fDTInt $dDT1

lvl80
lvl80 = What lvl5

lvl81
lvl81 = $fDT(,) lvl19 $fDTInt

lvl82
lvl82 = What lvl21

lvl83
lvl83 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl84
lvl84 = $fDT(,) $fDTInt $dDT1

lvl85
lvl85 = What lvl5

lvl86
lvl86 = $fDT(,) lvl19 $fDTInt

lvl87
lvl87 = What lvl21

lvl88
lvl88 = (lvl7, lvl7)

lvl89
lvl89 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl90
lvl90 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl91
lvl91 = $fDT(,) $fDTInt $dDT1

lvl92
lvl92 = What lvl5

lvl93
lvl93 = $fDT(,) lvl19 $fDTInt

lvl94
lvl94 = unpackCString# "extractsFromVectorsUPVSegdP"#

lvl95
lvl95 = What lvl94

lvl96
lvl96 =
  \ s ->
    let { __DEFAULT ~ s' <- noDuplicate# s } in
    let { (# ipv26, ipv27 #) ~ _
    <- newByteArray# 0 (s' `cast` ...)
    } in
    let { (# ipv28, ipv29 #) ~ _
    <- unsafeFreezeByteArray# ipv27 ipv26
    } in
    (# ipv28, ByteArray ipv29 #) `cast` ...

lvl97
lvl97 = unsafeDupablePerformIO (lvl96 `cast` ...)

lvl98
lvl98 = checkError lvl23 lvl24 Bounds lvl25 lvl26

$dDT2
$dDT2 = D:DT a a1 a2 a3 a4 a5 a6 a7 a8

lvl99
lvl99 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl100
lvl100 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl101
lvl101 = $fDT(,) $fDTInt $dDT1

lvl102
lvl102 = What lvl5

lvl103
lvl103 = $fDT(,) lvl19 $fDTInt

lvl104
lvl104 = What lvl94

lvl105
lvl105 = unsafeDupablePerformIO (lvl96 `cast` ...)

lvl106
lvl106 = What lvl52

lvl107
lvl107 = What lvl54

lvl108
lvl108 = WFMapGen lvl107 WSlice

lvl109
lvl109 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl110
lvl110 = $fDT(,) $fDTInt $dDT1

lvl111
lvl111 = What lvl5

lvl112
lvl112 = $fDT(,) $fDTInt $dDT2

lvl113
lvl113 = What lvl61

lvl114
lvl114 = What lvl64

lvl115
lvl115 = $fDT(,) $dDT2 $fDTInt

lvl116
lvl116 = What lvl67

lvl117
lvl117 = WFMapGen lvl116 WSlice

sb1
sb1 = (lvl7, lvl7)

lvl118
lvl118 = Right sb1

lvl119
lvl119 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl120
lvl120 = $fDT(,) $fDTInt $dDT1

lvl121
lvl121 = What lvl5

lvl122
lvl122 = unpackCString# "replicateUP/replicate"#

lvl123
lvl123 = What lvl122

lvl124
lvl124 =
  \ _ x ->
    let { I# ipv ~ _ <- x } in
    runSTRep
      (\ @ s s1 ->
         let {
           $j
           $j =
             \ x1 ->
               let { (# ipv1, ipv2 #) ~ _
               <- newByteArray# (*# x1 8) (s1 `cast` ...)
               } in
               letrec {
                 $wa
                 $wa =
                   \ w ww ww1 w1 ->
                     let { __DEFAULT ~ _ <- w } in
                     case <=# ww1 0 of _ {
                       False ->
                         $wa
                           SPEC
                           (+# ww 1)
                           (-# ww1 1)
                           ((writeIntArray# ipv2 ww 1 (w1 `cast` ...)) `cast` ...);
                       True -> (# w1, I# ww #)
                     }; } in
               let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 ipv (ipv1 `cast` ...) } in
               let { I# dt4 ~ _ <- ipv6 } in
               let { (# ipv3, ipv4 #) ~ _
               <- unsafeFreezeByteArray# ipv2 (ipv5 `cast` ...)
               } in
               (# ipv3 `cast` ..., (Vector 0 dt4 ipv4) `cast` ... #) } in
         case <=# ipv 0 of _ {
           False -> $j ipv;
           True -> $j 0
         })

lvl125
lvl125 =
  \ @ s s1 ->
    let { (# ipv, ipv1 #) ~ _
    <- newArray# 0 (uninitialised) (s1 `cast` ...)
    } in
    let { (# ipv2, ipv3 #) ~ _ <- unsafeFreezeArray# ipv1 ipv } in
    (# ipv2 `cast` ..., Vector 0 0 ipv3 #)

lvl126
lvl126 =
  let { Vector ipv ipv1 ipv2 ~ _ <- runSTRep lvl125 } in
  runSTRep
    (\ @ s s1 ->
       let { (# ipv3, ipv4 #) ~ _
       <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
       } in
       letrec {
         $wa
         $wa =
           \ w ww ww1 w1 ->
             let { __DEFAULT ~ _ <- w } in
             case >=# ww1 ipv1 of _ {
               False ->
                 let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv ww1) } in
                 $wa
                   SPEC
                   (+# ww 1)
                   (+# ww1 1)
                   ((writeArray#
                       ipv4
                       ww
                       (let { PNested vsegd xs segd flat ~ _ <- ipv5 `cast` ... } in
                        (PNested vsegd (xs `cast` ...) segd (flat `cast` ...)) `cast` ...)
                       (w1 `cast` ...))
                    `cast` ...);
               True -> (# w1, I# ww #)
             }; } in
       let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 0 (ipv3 `cast` ...) } in
       let { I# dt6 ~ _ <- ipv6 } in
       let { (# ipv7, ipv8 #) ~ _
       <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
       } in
       (# ipv7 `cast` ..., Vector 0 dt6 ipv8 #))

lvl127
lvl127 = PNesteds lvl126

lvl128
lvl128 = PNested empty $fPRInt_$cemptydPR empty $fPRInt_$cemptyPR

lvl129
lvl129 =
  PNested empty (lvl127 `cast` ...) empty (lvl128 `cast` ...)

$dDT3
$dDT3 = D:DT a a1 a2 a3 a4 a5 a6 a7 a8

lvl130
lvl130 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl131
lvl131 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl132
lvl132 = $fDT(,) $fDTInt $dDT1

lvl133
lvl133 = What lvl5

lvl134
lvl134 = $fDT(,) lvl19 $fDTInt

lvl135
lvl135 = What lvl94

lvl136
lvl136 = unsafeDupablePerformIO (lvl96 `cast` ...)

lvl137
lvl137 = What lvl52

lvl138
lvl138 = What lvl54

lvl139
lvl139 = WFMapGen lvl138 WSlice

lvl140
lvl140 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl141
lvl141 = $fDT(,) $fDTInt $dDT1

lvl142
lvl142 = What lvl5

lvl143
lvl143 = $fDT(,) $fDTInt $dDT3

lvl144
lvl144 = What lvl61

lvl145
lvl145 = What lvl64

lvl146
lvl146 = $fDT(,) $dDT3 $fDTInt

lvl147
lvl147 = What lvl67

lvl148
lvl148 = WFMapGen lvl147 WSlice

sb2
sb2 = (lvl7, lvl7)

lvl149
lvl149 = Right sb2

lvl150
lvl150 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl151
lvl151 = $fDT(,) $fDTInt $dDT1

lvl152
lvl152 = What lvl5

lvl153
lvl153 = What lvl122

lvl154
lvl154 =
  \ _ x ->
    let { I# ipv ~ _ <- x } in
    runSTRep
      (\ @ s s1 ->
         let {
           $j
           $j =
             \ x1 ->
               let { (# ipv1, ipv2 #) ~ _
               <- newByteArray# (*# x1 8) (s1 `cast` ...)
               } in
               letrec {
                 $wa
                 $wa =
                   \ w ww ww1 w1 ->
                     let { __DEFAULT ~ _ <- w } in
                     case <=# ww1 0 of _ {
                       False ->
                         $wa
                           SPEC
                           (+# ww 1)
                           (-# ww1 1)
                           ((writeIntArray# ipv2 ww 1 (w1 `cast` ...)) `cast` ...);
                       True -> (# w1, I# ww #)
                     }; } in
               let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 ipv (ipv1 `cast` ...) } in
               let { I# dt4 ~ _ <- ipv6 } in
               let { (# ipv3, ipv4 #) ~ _
               <- unsafeFreezeByteArray# ipv2 (ipv5 `cast` ...)
               } in
               (# ipv3 `cast` ..., (Vector 0 dt4 ipv4) `cast` ... #) } in
         case <=# ipv 0 of _ {
           False -> $j ipv;
           True -> $j 0
         })

lvl155
lvl155 =
  let { Vector ipv ipv1 ipv2 ~ _ <- runSTRep lvl125 } in
  runSTRep
    (\ @ s s1 ->
       let { (# ipv3, ipv4 #) ~ _
       <- newArray# ipv1 (uninitialised) (s1 `cast` ...)
       } in
       letrec {
         $wa
         $wa =
           \ w ww ww1 w1 ->
             let { __DEFAULT ~ _ <- w } in
             case >=# ww1 ipv1 of _ {
               False ->
                 let { (# ipv5 #) ~ _ <- indexArray# ipv2 (+# ipv ww1) } in
                 $wa
                   SPEC
                   (+# ww 1)
                   (+# ww1 1)
                   ((writeArray#
                       ipv4
                       ww
                       (let { PNested vsegd xs segd flat ~ _ <- ipv5 `cast` ... } in
                        (PNested vsegd (xs `cast` ...) segd (flat `cast` ...)) `cast` ...)
                       (w1 `cast` ...))
                    `cast` ...);
               True -> (# w1, I# ww #)
             }; } in
       let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 0 (ipv3 `cast` ...) } in
       let { I# dt6 ~ _ <- ipv6 } in
       let { (# ipv7, ipv8 #) ~ _
       <- unsafeFreezeArray# ipv4 (ipv5 `cast` ...)
       } in
       (# ipv7 `cast` ..., Vector 0 dt6 ipv8 #))

lvl156
lvl156 = PNesteds lvl155

$dDT4
$dDT4 = D:DT a a1 a2 a3 a4 a5 a6 a7 a8

lvl157
lvl157 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl158
lvl158 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl159
lvl159 = $fDT(,) $fDTInt $dDT1

lvl160
lvl160 = What lvl5

lvl161
lvl161 = unpackCString# "UPSegd.replicateWithP/replicateSU"#

lvl162
lvl162 = What lvl161

lvl163
lvl163 = (lvl7, lvl7, Nothing)

lvl164
lvl164 = What lvl52

lvl165
lvl165 = What lvl54

lvl166
lvl166 = WFMapGen lvl165 WSlice

lvl167
lvl167 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl168
lvl168 = $fDT(,) $fDTInt $dDT1

lvl169
lvl169 = What lvl5

lvl170
lvl170 = $fDT(,) $fDTInt $dDT4

lvl171
lvl171 = What lvl61

lvl172
lvl172 = What lvl64

lvl173
lvl173 = $fDT(,) $dDT4 $fDTInt

lvl174
lvl174 = What lvl67

lvl175
lvl175 = WFMapGen lvl174 WSlice

sb3
sb3 = (lvl7, lvl7)

lvl176
lvl176 = Right sb3

lvl177
lvl177 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl178
lvl178 = $fDT(,) $fDTInt $dDT1

lvl179
lvl179 = What lvl5

lvl180
lvl180 = What lvl122

lvl181
lvl181 =
  \ _ x ->
    let { I# ipv ~ _ <- x } in
    runSTRep
      (\ @ s s1 ->
         let {
           $j
           $j =
             \ x1 ->
               let { (# ipv1, ipv2 #) ~ _
               <- newByteArray# (*# x1 8) (s1 `cast` ...)
               } in
               letrec {
                 $wa
                 $wa =
                   \ w ww ww1 w1 ->
                     let { __DEFAULT ~ _ <- w } in
                     case <=# ww1 0 of _ {
                       False ->
                         $wa
                           SPEC
                           (+# ww 1)
                           (-# ww1 1)
                           ((writeIntArray# ipv2 ww 1 (w1 `cast` ...)) `cast` ...);
                       True -> (# w1, I# ww #)
                     }; } in
               let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 ipv (ipv1 `cast` ...) } in
               let { I# dt4 ~ _ <- ipv6 } in
               let { (# ipv3, ipv4 #) ~ _
               <- unsafeFreezeByteArray# ipv2 (ipv5 `cast` ...)
               } in
               (# ipv3 `cast` ..., (Vector 0 dt4 ipv4) `cast` ... #) } in
         case <=# ipv 0 of _ {
           False -> $j ipv;
           True -> $j 0
         })

$dDT6
$dDT6 = D:DT a a1 a2 a3 a4 a5 a6 a7 a8

lvl182
lvl182 = checkError lvl23 lvl24 Bounds lvl25 lvl26

lvl183
lvl183 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl184
lvl184 = $fDT(,) $fDTInt $dDT1

lvl185
lvl185 = What lvl5

lvl186
lvl186 = What lvl161

lvl187
lvl187 = (lvl7, lvl7, Nothing)

lvl188
lvl188 = What lvl52

lvl189
lvl189 = What lvl54

lvl190
lvl190 = WFMapGen lvl189 WSlice

lvl191
lvl191 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl192
lvl192 = $fDT(,) $fDTInt $dDT1

lvl193
lvl193 = What lvl5

lvl194
lvl194 = $fDT(,) $fDTInt $dDT6

lvl195
lvl195 = What lvl61

lvl196
lvl196 = What lvl64

lvl197
lvl197 = $fDT(,) $dDT6 $fDTInt

lvl198
lvl198 = What lvl67

lvl199
lvl199 = WFMapGen lvl198 WSlice

sb4
sb4 = (lvl7, lvl7)

lvl200
lvl200 = Right sb4

lvl201
lvl201 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl202
lvl202 = $fDT(,) $fDTInt $dDT1

lvl203
lvl203 = What lvl5

lvl204
lvl204 = What lvl122

lvl205
lvl205 =
  \ _ x ->
    let { I# ipv ~ _ <- x } in
    runSTRep
      (\ @ s s1 ->
         let {
           $j
           $j =
             \ x1 ->
               let { (# ipv1, ipv2 #) ~ _
               <- newByteArray# (*# x1 8) (s1 `cast` ...)
               } in
               letrec {
                 $wa
                 $wa =
                   \ w ww ww1 w1 ->
                     let { __DEFAULT ~ _ <- w } in
                     case <=# ww1 0 of _ {
                       False ->
                         $wa
                           SPEC
                           (+# ww 1)
                           (-# ww1 1)
                           ((writeIntArray# ipv2 ww 1 (w1 `cast` ...)) `cast` ...);
                       True -> (# w1, I# ww #)
                     }; } in
               let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 ipv (ipv1 `cast` ...) } in
               let { I# dt4 ~ _ <- ipv6 } in
               let { (# ipv3, ipv4 #) ~ _
               <- unsafeFreezeByteArray# ipv2 (ipv5 `cast` ...)
               } in
               (# ipv3 `cast` ..., (Vector 0 dt4 ipv4) `cast` ... #) } in
         case <=# ipv 0 of _ {
           False -> $j ipv;
           True -> $j 0
         })

$wlsplitPoints
$wlsplitPoints =
  \ w w1 w2 ->
    let {
      $w$j
      $w$j =
        \ w3 w4 w5 ->
          let {
            $w$j1
            $w$j1 =
              \ w6 ->
                let { PNested ipv4 ipv5 ipv6 ipv7 ~ _ <- w6 `cast` ... } in
                let {
                  segd'
                  segd' =
                    let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds1 ~ _ <- w5 } in
                    let { UPSegd dt9 dt10 dt11 dt14 dt15 dt16 dt17 ds2 ~ _ <- ipv6 } in
                    let {
                      $w$j2
                      $w$j2 =
                        \ w7 ->
                          let { Gang dt18 ds3 ds4 ~ wild2 <- theGang } in
                          let { __DEFAULT ~ wild3 <- quotInt# w7 dt18 } in
                          let { __DEFAULT ~ wild4 <- remInt# w7 dt18 } in
                          let { DVector ipv ipv1 ipv2 ipv3 ipv8 ipv9 ~ nt
                          <- (generateD
                                $dDT1
                                lvl15
                                wild2
                                (\ i ->
                                   let { I# x1 ~ _ <- i } in
                                   let {
                                     $j
                                     $j =
                                       \ dt19 ->
                                         let {
                                           $j1
                                           $j1 =
                                             \ y ->
                                               runSTRep
                                                 (\ @ s s1 ->
                                                    let { (# ipv, ipv1 #) ~ _
                                                    <- newByteArray# (*# dt19 8) (s1 `cast` ...)
                                                    } in
                                                    let {
                                                      a11
                                                      a11 = +# dt9 y } in
                                                    let {
                                                      a12
                                                      a12 = +# dt y } in
                                                    letrec {
                                                      $wa
                                                      $wa =
                                                        \ w8 ww ww1 w9 ->
                                                          let { __DEFAULT ~ _ <- w8 } in
                                                          case >=# ww1 dt19 of _ {
                                                            False ->
                                                              let { __DEFAULT ~ wild7
                                                              <- indexIntArray# dt4 (+# a12 ww1)
                                                              } in
                                                              let { __DEFAULT ~ wild8
                                                              <- indexIntArray# dt11 (+# a11 ww1)
                                                              } in
                                                              $wa
                                                                SPEC
                                                                (+# ww 1)
                                                                (+# ww1 1)
                                                                ((writeIntArray#
                                                                    ipv1
                                                                    ww
                                                                    (+# wild7 wild8)
                                                                    (w9 `cast` ...))
                                                                 `cast` ...);
                                                            True -> (# w9, I# ww #)
                                                          }; } in
                                                    let { (# ipv2, ipv3 #) ~ _
                                                    <- $wa SPEC 0 0 (ipv `cast` ...)
                                                    } in
                                                    let { I# dt21 ~ _ <- ipv3 } in
                                                    let { (# ipv8, ipv9 #) ~ _
                                                    <- unsafeFreezeByteArray# ipv1 (ipv2 `cast` ...)
                                                    } in
                                                    (# ipv8 `cast` ...,
                                                       (Vector 0 dt21 ipv9) `cast` ... #)) } in
                                         case <# x1 wild4 of _ {
                                           False -> $j1 (+# (*# wild3 x1) wild4);
                                           True -> $j1 (*# (+# wild3 1) x1)
                                         } } in
                                   case <# x1 wild4 of _ {
                                     False -> $j wild3;
                                     True -> $j (+# wild3 1)
                                   }))
                             `cast` ...
                          } in
                          let { Vector dt20 dt21 dt22 ~ _
                          <- (runSTRep
                                (\ @ s s1 ->
                                   let { (di, n) ~ _
                                   <- scanD
                                        $fDTInt
                                        lvl13
                                        wild2
                                        $fNumInt_$c+
                                        lvl7
                                        ((DInt ipv ipv1 ipv2) `cast` ...)
                                   } in
                                   let { DInt ipv10 ipv11 ipv12 ~ nt2 <- di `cast` ... } in
                                   let { I# ipv13 ~ n1 <- n } in
                                   case >=# ipv13 0 of _ {
                                     False -> case lvl11 ipv13 of wild7 { };
                                     True ->
                                       let { (# ipv14, ipv15 #) ~ _
                                       <- newByteArray# (*# ipv13 8) (s1 `cast` ...)
                                       } in
                                       let {
                                         nt3
                                         nt3 = DProd (nt2 `cast` ...) (nt `cast` ...) } in
                                       let { (# ipv16, ipv17 #) ~ _
                                       <- ($wa1
                                             dt18
                                             ds3
                                             ds4
                                             (++
                                                $fShowComp2
                                                ($fShowComp_$cshowsPrec
                                                   $fShowComp7 (WJoinCopy n1) ([])))
                                             (WorkCopy n1)
                                             ((\ i s2 ->
                                                 let { (# ipv16, ipv17 #) ~ _
                                                 <- ((((myD lvl12 (nt3 `cast` ...)) `cast` ...) i)
                                                     `cast` ...)
                                                      s2
                                                 } in
                                                 let { (x, y) ~ _ <- ipv17 } in
                                                 let { I# ipv18 ~ _ <- x } in
                                                 let { Vector ipv19 ipv20 ipv21 ~ _
                                                 <- y `cast` ...
                                                 } in
                                                 (# copyByteArray#
                                                      ipv21
                                                      (*# ipv19 8)
                                                      ipv15
                                                      (*# ipv18 8)
                                                      (*# ipv20 8)
                                                      (ipv16 `cast` ...),
                                                    () #)
                                                 `cast` ...)
                                              `cast` ...)
                                             (ipv14 `cast` ...))
                                          `cast` ...
                                       } in
                                       let { (# ipv18, ipv19 #) ~ _
                                       <- unsafeFreezeByteArray# ipv15 (ipv16 `cast` ...)
                                       } in
                                       (# ipv18 `cast` ..., (Vector 0 ipv13 ipv19) `cast` ... #)
                                   }))
                             `cast` ...
                          } in
                          let {
                            $w$j3
                            $w$j3 =
                              \ w8 ->
                                let { __DEFAULT ~ wild5 <- quotInt# w8 dt18 } in
                                let { __DEFAULT ~ wild6 <- remInt# w8 dt18 } in
                                let { DVector ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ~ nt2
                                <- (generateD
                                      $dDT1
                                      lvl10
                                      wild2
                                      (\ i ->
                                         let { I# x1 ~ _ <- i } in
                                         let {
                                           $j
                                           $j =
                                             \ dt23 ->
                                               let {
                                                 $j1
                                                 $j1 =
                                                   \ y ->
                                                     runSTRep
                                                       (\ @ s s1 ->
                                                          let { (# ipv10, ipv11 #) ~ _
                                                          <- newByteArray#
                                                               (*# dt23 8) (s1 `cast` ...)
                                                          } in
                                                          let {
                                                            a11
                                                            a11 = +# dt14 y } in
                                                          let {
                                                            a12
                                                            a12 = +# dt5 y } in
                                                          letrec {
                                                            $wa
                                                            $wa =
                                                              \ w9 ww ww1 w10 ->
                                                                let { __DEFAULT ~ _ <- w9 } in
                                                                case >=# ww1 dt23 of _ {
                                                                  False ->
                                                                    let { __DEFAULT ~ wild9
                                                                    <- indexIntArray#
                                                                         dt7 (+# a12 ww1)
                                                                    } in
                                                                    let { __DEFAULT ~ wild10
                                                                    <- indexIntArray#
                                                                         dt16 (+# a11 ww1)
                                                                    } in
                                                                    $wa
                                                                      SPEC
                                                                      (+# ww 1)
                                                                      (+# ww1 1)
                                                                      ((writeIntArray#
                                                                          ipv11
                                                                          ww
                                                                          (+# wild9 wild10)
                                                                          (w10 `cast` ...))
                                                                       `cast` ...);
                                                                  True -> (# w10, I# ww #)
                                                                }; } in
                                                          let { (# ipv12, ipv13 #) ~ _
                                                          <- $wa SPEC 0 0 (ipv10 `cast` ...)
                                                          } in
                                                          let { I# dt25 ~ _ <- ipv13 } in
                                                          let { (# ipv14, ipv15 #) ~ _
                                                          <- unsafeFreezeByteArray#
                                                               ipv11 (ipv12 `cast` ...)
                                                          } in
                                                          (# ipv14 `cast` ...,
                                                             (Vector 0 dt25 ipv15)
                                                             `cast` ... #)) } in
                                               case <# x1 wild6 of _ {
                                                 False -> $j1 (+# (*# wild5 x1) wild6);
                                                 True -> $j1 (*# (+# wild5 1) x1)
                                               } } in
                                         case <# x1 wild6 of _ {
                                           False -> $j wild5;
                                           True -> $j (+# wild5 1)
                                         }))
                                   `cast` ...
                                } in
                                let { Vector dt24 dt25 dt26 ~ _
                                <- (runSTRep
                                      (\ @ s s1 ->
                                         let { (di, n) ~ _
                                         <- scanD
                                              $fDTInt
                                              lvl6
                                              wild2
                                              $fNumInt_$c+
                                              lvl7
                                              ((DInt ipv10 ipv11 ipv12) `cast` ...)
                                         } in
                                         let { DInt ipv16 ipv17 ipv18 ~ nt3 <- di `cast` ... } in
                                         let { I# ipv19 ~ n1 <- n } in
                                         case >=# ipv19 0 of _ {
                                           False -> case lvl3 ipv19 of wild9 { };
                                           True ->
                                             let { (# ipv20, ipv21 #) ~ _
                                             <- newByteArray# (*# ipv19 8) (s1 `cast` ...)
                                             } in
                                             let {
                                               nt4
                                               nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                                             let { (# ipv22, ipv23 #) ~ _
                                             <- ($wa1
                                                   dt18
                                                   ds3
                                                   ds4
                                                   (++
                                                      $fShowComp2
                                                      ($fShowComp_$cshowsPrec
                                                         $fShowComp7 (WJoinCopy n1) ([])))
                                                   (WorkCopy n1)
                                                   ((\ i s2 ->
                                                       let { (# ipv22, ipv23 #) ~ _
                                                       <- ((((myD lvl4 (nt4 `cast` ...)) `cast` ...)
                                                              i)
                                                           `cast` ...)
                                                            s2
                                                       } in
                                                       let { (x, y) ~ _ <- ipv23 } in
                                                       let { I# ipv24 ~ _ <- x } in
                                                       let { Vector ipv25 ipv26 ipv27 ~ _
                                                       <- y `cast` ...
                                                       } in
                                                       (# copyByteArray#
                                                            ipv27
                                                            (*# ipv25 8)
                                                            ipv21
                                                            (*# ipv24 8)
                                                            (*# ipv26 8)
                                                            (ipv22 `cast` ...),
                                                          () #)
                                                       `cast` ...)
                                                    `cast` ...)
                                                   (ipv20 `cast` ...))
                                                `cast` ...
                                             } in
                                             let { (# ipv24, ipv25 #) ~ _
                                             <- unsafeFreezeByteArray# ipv21 (ipv22 `cast` ...)
                                             } in
                                             (# ipv24 `cast` ...,
                                                (Vector 0 ipv19 ipv25) `cast` ... #)
                                         }))
                                   `cast` ...
                                } in
                                let {
                                  dt27
                                  dt27 = +# dt8 dt17 } in
                                (# dt20,
                                   dt21,
                                   dt22,
                                   dt24,
                                   dt25,
                                   dt26,
                                   dt27,
                                   splitSegdOnElemsD
                                     wild2 (USegd dt20 dt21 dt22 dt24 dt25 dt26 dt27) #) } in
                          case <=# dt6 dt15 of _ {
                            False -> $w$j3 dt15;
                            True -> $w$j3 dt6
                          } } in
                    case <=# dt3 dt10 of _ {
                      False ->
                        let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                        <- $w$j2 dt10
                        } in
                        UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8;
                      True ->
                        let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                        <- $w$j2 dt3
                        } in
                        UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8
                    } } in
                let {
                  flat'
                  flat' =
                    let { PInts arr1 ~ _ <- w4 `cast` ... } in
                    let { PInts arr2 ~ _ <- ipv5 `cast` ... } in
                    (PInt
                       (let { UPVSegd ipv ipv1 ipv2 ipv3 ipv8 ipv9 ~ _ <- w3 } in
                        let { Vectors ipv10 ipv11 ipv12 ipv13 ~ _ <- arr1 } in
                        let { UPVSegd ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ~ _ <- ipv4 } in
                        let { Vectors ipv20 ipv21 ipv22 ipv23 ~ _ <- arr2 } in
                        let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds1 ~ _ <- segd' } in
                        let { DVector ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ~ nt
                        <- (imapD'
                              lvl20
                              $dDT1
                              lvl22
                              theGang
                              (\ _ x ->
                                 let { (x1, y) ~ _ <- x } in
                                 let { (x2, y1) ~ _ <- x1 } in
                                 let { USegd dt9 dt10 dt11 dt14 dt15 dt16 dt17 ~ _ <- x2 } in
                                 let { I# ipv24 ~ _ <- y1 } in
                                 let { I# ipv25 ~ _ <- y } in
                                 let { UPSSegd dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25 dt26 dt27
                                               ds2 ~ _
                                 <- ipv17
                                 } in
                                 let { Vector ipv26 ipv27 ipv28 ~ _ <- dt20 `cast` ... } in
                                 let { Vector ipv29 ipv30 ipv31 ~ _ <- dt19 `cast` ... } in
                                 let { UPSSegd dt28 dt29 dt30 dt31 dt32 dt33 dt34 dt35 dt36 dt37
                                               ds3 ~ _
                                 <- ipv3
                                 } in
                                 let { Vector ipv32 ipv33 ipv34 ~ _ <- dt30 `cast` ... } in
                                 let { Vector ipv35 ipv36 ipv37 ~ _ <- dt29 `cast` ... } in
                                 let { Vector ipv38 ipv39 ipv40 ~ _ <- ipv15 `cast` ... } in
                                 let { Vector ipv41 ipv42 ipv43 ~ _ <- ipv1 `cast` ... } in
                                 runSTRep
                                   (\ @ s s1 ->
                                      let { (# ipv44, ipv45 #) ~ _
                                      <- newByteArray# (*# dt17 8) (s1 `cast` ...)
                                      } in
                                      letrec {
                                        $wa
                                        $wa =
                                          \ w7 ww ww1 ww2 ww3 ww4 ww5 ww6 ww7 w8 ->
                                            let { __DEFAULT ~ _ <- w7 } in
                                            case ww5 of ds10 {
                                              __DEFAULT ->
                                                case ww1 of ds11 {
                                                  __DEFAULT ->
                                                    case ww4 of wild8 {
                                                      __DEFAULT ->
                                                        let { __DEFAULT ~ wild9
                                                        <- indexIntArray# ipv21 ww7
                                                        } in
                                                        let { __DEFAULT ~ wild10
                                                        <- indexByteArrayArray# ipv23 ww7
                                                        } in
                                                        let { __DEFAULT ~ wild11
                                                        <- indexIntArray#
                                                             wild10 (+# wild9 (+# ww6 ww3))
                                                        } in
                                                        $wa
                                                          SPEC
                                                          (+# ww 1)
                                                          ds11
                                                          ww2
                                                          (+# ww3 1)
                                                          (-# wild8 1)
                                                          (-# ds10 1)
                                                          ww6
                                                          ww7
                                                          ((writeIntArray#
                                                              ipv45 ww wild11 (w8 `cast` ...))
                                                           `cast` ...);
                                                      0 ->
                                                        let {
                                                          i1
                                                          i1 = +# ww2 1 } in
                                                        let { __DEFAULT ~ wild9
                                                        <- indexIntArray# ipv43 (+# ipv41 i1)
                                                        } in
                                                        let { __DEFAULT ~ wild10
                                                        <- indexIntArray# ipv34 (+# ipv32 wild9)
                                                        } in
                                                        let { __DEFAULT ~ wild11
                                                        <- indexIntArray# ipv37 (+# ipv35 wild9)
                                                        } in
                                                        let { __DEFAULT ~ wild12
                                                        <- indexIntArray# dt33 (+# dt31 wild9)
                                                        } in
                                                        $wa
                                                          SPEC
                                                          ww
                                                          0
                                                          i1
                                                          0
                                                          wild12
                                                          ds10
                                                          wild11
                                                          wild10
                                                          w8
                                                    };
                                                  0 ->
                                                    case ww4 of wild8 {
                                                      __DEFAULT ->
                                                        let { __DEFAULT ~ wild9
                                                        <- indexIntArray# ipv11 ww7
                                                        } in
                                                        let { __DEFAULT ~ wild10
                                                        <- indexByteArrayArray# ipv13 ww7
                                                        } in
                                                        let { __DEFAULT ~ wild11
                                                        <- indexIntArray#
                                                             wild10 (+# wild9 (+# ww6 ww3))
                                                        } in
                                                        $wa
                                                          SPEC
                                                          (+# ww 1)
                                                          0
                                                          ww2
                                                          (+# ww3 1)
                                                          (-# wild8 1)
                                                          (-# ds10 1)
                                                          ww6
                                                          ww7
                                                          ((writeIntArray#
                                                              ipv45 ww wild11 (w8 `cast` ...))
                                                           `cast` ...);
                                                      0 ->
                                                        let { __DEFAULT ~ wild9
                                                        <- indexIntArray# ipv40 (+# ipv38 ww2)
                                                        } in
                                                        let { __DEFAULT ~ wild10
                                                        <- indexIntArray# ipv28 (+# ipv26 wild9)
                                                        } in
                                                        let { __DEFAULT ~ wild11
                                                        <- indexIntArray# ipv31 (+# ipv29 wild9)
                                                        } in
                                                        let { __DEFAULT ~ wild12
                                                        <- indexIntArray# dt23 (+# dt21 wild9)
                                                        } in
                                                        $wa
                                                          SPEC
                                                          ww
                                                          1
                                                          ww2
                                                          0
                                                          wild12
                                                          ds10
                                                          wild11
                                                          wild10
                                                          w8
                                                    }
                                                };
                                              0 -> (# w8, I# ww #)
                                            }; } in
                                      case dt17 of wild8 {
                                        __DEFAULT ->
                                          let { __DEFAULT ~ wild9
                                          <- indexIntArray# ipv43 (+# ipv41 ipv24)
                                          } in
                                          let { __DEFAULT ~ wild10
                                          <- indexIntArray# dt33 (+# dt31 wild9)
                                          } in
                                          case <# ipv25 wild10 of _ {
                                            False ->
                                              let { __DEFAULT ~ wild12
                                              <- indexIntArray# ipv40 (+# ipv38 ipv24)
                                              } in
                                              let { __DEFAULT ~ wild13
                                              <- indexIntArray# ipv28 (+# ipv26 wild12)
                                              } in
                                              let { __DEFAULT ~ wild14
                                              <- indexIntArray# ipv31 (+# ipv29 wild12)
                                              } in
                                              let {
                                                i1
                                                i1 = -# ipv25 wild10 } in
                                              let { __DEFAULT ~ wild15
                                              <- indexIntArray# dt23 (+# dt21 wild12)
                                              } in
                                              let { (# ipv46, ipv47 #) ~ _
                                              <- $wa
                                                   SPEC
                                                   0
                                                   1
                                                   ipv24
                                                   i1
                                                   (-# wild15 i1)
                                                   wild8
                                                   wild14
                                                   wild13
                                                   (ipv44 `cast` ...)
                                              } in
                                              let { I# dt39 ~ _ <- ipv47 } in
                                              let { (# ipv48, ipv49 #) ~ _
                                              <- unsafeFreezeByteArray# ipv45 (ipv46 `cast` ...)
                                              } in
                                              (# ipv48 `cast` ...,
                                                 (Vector 0 dt39 ipv49) `cast` ... #);
                                            True ->
                                              let { __DEFAULT ~ wild12
                                              <- indexIntArray# ipv34 (+# ipv32 wild9)
                                              } in
                                              let { __DEFAULT ~ wild13
                                              <- indexIntArray# ipv37 (+# ipv35 wild9)
                                              } in
                                              let { (# ipv46, ipv47 #) ~ _
                                              <- $wa
                                                   SPEC
                                                   0
                                                   0
                                                   ipv24
                                                   ipv25
                                                   (-# wild10 ipv25)
                                                   wild8
                                                   wild13
                                                   wild12
                                                   (ipv44 `cast` ...)
                                              } in
                                              let { I# dt39 ~ _ <- ipv47 } in
                                              let { (# ipv48, ipv49 #) ~ _
                                              <- unsafeFreezeByteArray# ipv45 (ipv46 `cast` ...)
                                              } in
                                              (# ipv48 `cast` ...,
                                                 (Vector 0 dt39 ipv49) `cast` ... #)
                                          };
                                        0 ->
                                          let { (# ipv46, ipv47 #) ~ _
                                          <- $wa SPEC 0 0 0 0 0 0 0 0 (ipv44 `cast` ...)
                                          } in
                                          let { I# dt39 ~ _ <- ipv47 } in
                                          let { (# ipv48, ipv49 #) ~ _
                                          <- unsafeFreezeByteArray# ipv45 (ipv46 `cast` ...)
                                          } in
                                          (# ipv48 `cast` ..., (Vector 0 dt39 ipv49) `cast` ... #)
                                      }))
                              ds1)
                           `cast` ...
                        } in
                        runSTRep
                          (\ @ s s1 ->
                             let { (di, n) ~ _
                             <- scanD
                                  $fDTInt
                                  lvl18
                                  theGang
                                  $fNumInt_$c+
                                  lvl7
                                  ((DInt ipv24 ipv25 ipv26) `cast` ...)
                             } in
                             let { DInt ipv30 ipv31 ipv32 ~ nt2 <- di `cast` ... } in
                             let { I# ipv33 ~ n1 <- n } in
                             case >=# ipv33 0 of _ {
                               False -> case lvl16 ipv33 of wild5 { };
                               True ->
                                 let { (# ipv34, ipv35 #) ~ _
                                 <- newByteArray# (*# ipv33 8) (s1 `cast` ...)
                                 } in
                                 let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                                 let {
                                   nt3
                                   nt3 = DProd (nt2 `cast` ...) (nt `cast` ...) } in
                                 let { (# ipv36, ipv37 #) ~ _
                                 <- ($wa1
                                       ww1
                                       ww2
                                       ww3
                                       (++
                                          $fShowComp2
                                          ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                       (WorkCopy n1)
                                       ((\ i s2 ->
                                           let { (# ipv36, ipv37 #) ~ _
                                           <- ((((myD lvl17 (nt3 `cast` ...)) `cast` ...) i)
                                               `cast` ...)
                                                s2
                                           } in
                                           let { (x, y) ~ _ <- ipv37 } in
                                           let { I# ipv38 ~ _ <- x } in
                                           let { Vector ipv39 ipv40 ipv41 ~ _ <- y `cast` ... } in
                                           (# copyByteArray#
                                                ipv41
                                                (*# ipv39 8)
                                                ipv35
                                                (*# ipv38 8)
                                                (*# ipv40 8)
                                                (ipv36 `cast` ...),
                                              () #)
                                           `cast` ...)
                                        `cast` ...)
                                       (ipv34 `cast` ...))
                                    `cast` ...
                                 } in
                                 let { (# ipv38, ipv39 #) ~ _
                                 <- unsafeFreezeByteArray# ipv35 (ipv36 `cast` ...)
                                 } in
                                 (# ipv38 `cast` ..., (Vector 0 ipv33 ipv39) `cast` ... #)
                             })))
                    `cast` ... } in
                (PNested
                   (let {
                      upssegd
                      upssegd =
                        let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds1 ~ _ <- segd' } in
                        let {
                          dt9
                          dt9 =
                            runSTRep
                              (\ @ s s1 ->
                                 let {
                                   $j
                                   $j =
                                     \ x ->
                                       let { (# ipv, ipv1 #) ~ _
                                       <- newByteArray# (*# x 8) (s1 `cast` ...)
                                       } in
                                       letrec {
                                         $wa
                                         $wa =
                                           \ w7 ww ww1 w8 ->
                                             let { __DEFAULT ~ _ <- w7 } in
                                             case <=# ww1 0 of _ {
                                               False ->
                                                 $wa
                                                   SPEC
                                                   (+# ww 1)
                                                   (-# ww1 1)
                                                   ((writeIntArray# ipv1 ww 0 (w8 `cast` ...))
                                                    `cast` ...);
                                               True -> (# w8, I# ww #)
                                             }; } in
                                       let { (# ipv2, ipv3 #) ~ _
                                       <- $wa SPEC 0 dt3 (ipv `cast` ...)
                                       } in
                                       let { I# dt11 ~ _ <- ipv3 } in
                                       let { (# ipv8, ipv9 #) ~ _
                                       <- unsafeFreezeByteArray# ipv1 (ipv2 `cast` ...)
                                       } in
                                       (# ipv8 `cast` ..., (Vector 0 dt11 ipv9) `cast` ... #) } in
                                 case <=# dt3 0 of _ {
                                   False -> $j dt3;
                                   True -> $j 0
                                 }) } in
                        let {
                          a11
                          a11 = Vector dt5 dt6 dt7 } in
                        UPSSegd
                          True
                          (a11 `cast` ...)
                          dt9
                          dt
                          dt3
                          dt4
                          dt5
                          dt6
                          dt7
                          dt8
                          (splitSSegdOnElemsD
                             theGang
                             (USSegd True (a11 `cast` ...) dt9 dt dt3 dt4 dt5 dt6 dt7 dt8)) } in
                    let {
                      vsegids3
                      vsegids3 =
                        let { UPSSegd dt3 dt6 dt7 dt8 dt9 dt10 dt11 dt4 dt5 dt14 ds1 ~ _
                        <- upssegd
                        } in
                        runSTRep
                          (\ @ s s1 ->
                             let {
                               a11
                               a11 = -# dt9 1 } in
                             let {
                               $j
                               $j =
                                 \ x ->
                                   let { (# ipv, ipv1 #) ~ _
                                   <- newByteArray# (*# x 8) (s1 `cast` ...)
                                   } in
                                   letrec {
                                     $wa
                                     $wa =
                                       \ w7 ww ww1 w8 ->
                                         let { __DEFAULT ~ _ <- w7 } in
                                         case <=# ww1 a11 of _ {
                                           False -> (# w8, I# ww #);
                                           True ->
                                             $wa
                                               SPEC
                                               (+# ww 1)
                                               (+# ww1 1)
                                               ((writeIntArray# ipv1 ww ww1 (w8 `cast` ...))
                                                `cast` ...)
                                         }; } in
                                   let { (# ipv2, ipv3 #) ~ _ <- $wa SPEC 0 0 (ipv `cast` ...) } in
                                   let { I# dt16 ~ _ <- ipv3 } in
                                   let { (# ipv8, ipv9 #) ~ _
                                   <- unsafeFreezeByteArray# ipv1 (ipv2 `cast` ...)
                                   } in
                                   (# ipv8 `cast` ..., (Vector 0 dt16 ipv9) `cast` ... #) } in
                             case ># 0 a11 of _ {
                               False ->
                                 let {
                                   a12
                                   a12 = +# a11 1 } in
                                 case ># a12 0 of _ {
                                   False -> case lvl27 of wild3 { };
                                   True -> $j a12
                                 };
                               True -> $j 0
                             }) } in
                    UPVSegd
                      True vsegids3 vsegids3 upssegd upssegd (mkDist vsegids3 upssegd))
                   ($fPRInt_$csingletondPR (flat' `cast` ...))
                   segd'
                   (flat' `cast` ...))
                `cast` ... } in
          let { PNested ipv ipv1 ipv2 ipv3 ~ nt
          <- case w of wild2 {
               __DEFAULT ->
                 let { DVector ipv ipv1 ipv2 ipv3 ipv4 ipv5 ~ nt
                 <- (imapD'
                       $fDTInt $dDT1 lvl180 theGang lvl181 (splitLenD theGang (I# wild2)))
                    `cast` ...
                 } in
                 let { Vector dt3 dt4 dt5 ~ _
                 <- (runSTRep
                       (\ @ s s1 ->
                          let { (di, n) ~ _
                          <- scanD
                               $fDTInt
                               lvl179
                               theGang
                               $fNumInt_$c+
                               lvl7
                               ((DInt ipv ipv1 ipv2) `cast` ...)
                          } in
                          let { DInt ipv6 ipv7 ipv8 ~ nt1 <- di `cast` ... } in
                          let { I# ipv9 ~ n1 <- n } in
                          case >=# ipv9 0 of _ {
                            False -> case lvl177 ipv9 of wild3 { };
                            True ->
                              let { (# ipv10, ipv11 #) ~ _
                              <- newByteArray# (*# ipv9 8) (s1 `cast` ...)
                              } in
                              let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                              let {
                                nt2
                                nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                              let { (# ipv14, ipv15 #) ~ _
                              <- ($wa1
                                    ww1
                                    ww2
                                    ww3
                                    (++
                                       $fShowComp2
                                       ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                    (WorkCopy n1)
                                    ((\ i s2 ->
                                        let { (# ipv14, ipv15 #) ~ _
                                        <- ((((myD lvl178 (nt2 `cast` ...)) `cast` ...) i)
                                            `cast` ...)
                                             s2
                                        } in
                                        let { (x, y) ~ _ <- ipv15 } in
                                        let { I# ipv16 ~ _ <- x } in
                                        let { Vector ipv12 ipv13 ipv17 ~ _ <- y `cast` ... } in
                                        (# copyByteArray#
                                             ipv17
                                             (*# ipv12 8)
                                             ipv11
                                             (*# ipv16 8)
                                             (*# ipv13 8)
                                             (ipv14 `cast` ...),
                                           () #)
                                        `cast` ...)
                                     `cast` ...)
                                    (ipv10 `cast` ...))
                                 `cast` ...
                              } in
                              let { (# ipv12, ipv13 #) ~ _
                              <- unsafeFreezeByteArray# ipv11 (ipv14 `cast` ...)
                              } in
                              (# ipv12 `cast` ..., (Vector 0 ipv9 ipv13) `cast` ... #)
                          }))
                    `cast` ...
                 } in
                 let { Gang dt6 ds1 ds2 ~ wild <- theGang } in
                 let { __DEFAULT ~ wild1 <- quotInt# dt4 dt6 } in
                 let { __DEFAULT ~ wild3 <- remInt# dt4 dt6 } in
                 let { DProd dx dy ~ _
                 <- (generateD
                       lvl173
                       lvl175
                       wild
                       (\ i ->
                          let {
                            ys
                            ys =
                              let { I# x1 ~ _ <- i } in
                              let {
                                $j
                                $j =
                                  \ y ->
                                    let {
                                      $j1
                                      $j1 =
                                        \ dt7 ->
                                          runSTRep
                                            (\ @ s s1 ->
                                               let { (# ipv6, ipv7 #) ~ _
                                               <- newByteArray# (*# (+# 1 dt7) 8) (s1 `cast` ...)
                                               } in
                                               let {
                                                 a11
                                                 a11 = +# dt3 y } in
                                               letrec {
                                                 $wa
                                                 $wa =
                                                   \ w6 ww w7 w8 ->
                                                     let { __DEFAULT ~ _ <- w6 } in
                                                     case w7 of _ {
                                                       Left sa1 ->
                                                         case sa1 of _ {
                                                           False -> $wa SPEC ww lvl176 w8;
                                                           True ->
                                                             $wa
                                                               SPEC
                                                               (+# ww 1)
                                                               lvl71
                                                               ((writeIntArray#
                                                                   ipv7 ww 0 (w8 `cast` ...))
                                                                `cast` ...)
                                                         };
                                                       Right sb5 ->
                                                         let { (s2, x) ~ _ <- sb5 } in
                                                         let { I# x2 ~ _ <- s2 } in
                                                         case >=# x2 dt7 of _ {
                                                           False ->
                                                             let { I# x3 ~ _ <- x } in
                                                             let { __DEFAULT ~ wild10
                                                             <- indexIntArray# dt5 (+# a11 x2)
                                                             } in
                                                             let {
                                                               x#
                                                               x# = +# x3 wild10 } in
                                                             $wa
                                                               SPEC
                                                               (+# ww 1)
                                                               (Right (I# (+# x2 1), I# x#))
                                                               ((writeIntArray#
                                                                   ipv7 ww x# (w8 `cast` ...))
                                                                `cast` ...);
                                                           True -> (# w8, I# ww #)
                                                         }
                                                     }; } in
                                               let { (# ipv8, ipv9 #) ~ _
                                               <- $wa SPEC 0 lvl72 (ipv6 `cast` ...)
                                               } in
                                               let { I# dt9 ~ _ <- ipv9 } in
                                               let { (# ipv10, ipv11 #) ~ _
                                               <- unsafeFreezeByteArray# ipv7 (ipv8 `cast` ...)
                                               } in
                                               (# ipv10 `cast` ...,
                                                  (Vector 0 dt9 ipv11) `cast` ... #)) } in
                                    case <# x1 wild3 of _ {
                                      False -> $j1 wild1;
                                      True -> $j1 (+# wild1 1)
                                    } } in
                              case <# x1 wild3 of _ {
                                False -> $j (+# (*# wild1 x1) wild3);
                                True -> $j (*# (+# wild1 1) x1)
                              } } in
                          (let { Vector dt7 dt8 dt9 ~ _ <- ys `cast` ... } in
                           (Vector dt7 (-# dt8 1) dt9) `cast` ...,
                           let { Vector dt7 dt8 dt9 ~ _ <- ys `cast` ... } in
                           let { __DEFAULT ~ wild5
                           <- indexIntArray# dt9 (+# dt7 (-# dt8 1))
                           } in
                           I# wild5)))
                    `cast` ...
                 } in
                 let { (x1, ds3) ~ _
                 <- scanD $fDTInt lvl172 wild $fNumInt_$c+ lvl7 dy
                 } in
                 let { DInt ipv6 ipv7 ipv8 ~ nt1 <- x1 `cast` ... } in
                 let { DVector ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ~ nt2
                 <- (imapD'
                       lvl170
                       $dDT4
                       lvl171
                       wild
                       lvl63
                       ((DProd (nt1 `cast` ...) dx) `cast` ...))
                    `cast` ...
                 } in
                 let { Vector dt8 dt9 dt10 ~ dt7
                 <- (runSTRep
                       (\ @ s s1 ->
                          let { (di, n) ~ _
                          <- scanD
                               $fDTInt
                               lvl169
                               wild
                               $fNumInt_$c+
                               lvl7
                               ((DInt ipv9 ipv10 ipv11) `cast` ...)
                          } in
                          let { DInt ipv15 ipv16 ipv17 ~ nt3 <- di `cast` ... } in
                          let { I# ipv18 ~ n1 <- n } in
                          case >=# ipv18 0 of _ {
                            False -> case lvl167 ipv18 of wild8 { };
                            True ->
                              let { (# ipv19, ipv20 #) ~ _
                              <- newByteArray# (*# ipv18 8) (s1 `cast` ...)
                              } in
                              let {
                                nt4
                                nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                              let { (# ipv21, ipv22 #) ~ _
                              <- ($wa1
                                    dt6
                                    ds1
                                    ds2
                                    (++
                                       $fShowComp2
                                       ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                    (WorkCopy n1)
                                    ((\ i s2 ->
                                        let { (# ipv21, ipv22 #) ~ _
                                        <- ((((myD lvl168 (nt4 `cast` ...)) `cast` ...) i)
                                            `cast` ...)
                                             s2
                                        } in
                                        let { (x, y) ~ _ <- ipv22 } in
                                        let { I# ipv23 ~ _ <- x } in
                                        let { Vector ipv24 ipv25 ipv26 ~ _ <- y `cast` ... } in
                                        (# copyByteArray#
                                             ipv26
                                             (*# ipv24 8)
                                             ipv20
                                             (*# ipv23 8)
                                             (*# ipv25 8)
                                             (ipv21 `cast` ...),
                                           () #)
                                        `cast` ...)
                                     `cast` ...)
                                    (ipv19 `cast` ...))
                                 `cast` ...
                              } in
                              let { (# ipv23, ipv24 #) ~ _
                              <- unsafeFreezeByteArray# ipv20 (ipv21 `cast` ...)
                              } in
                              (# ipv23 `cast` ..., (Vector 0 ipv18 ipv24) `cast` ... #)
                          }))
                    `cast` ...
                 } in
                 let { I# dt14 ~ _
                 <- foldD
                      $fDTInt
                      lvl164
                      wild
                      $fNumInt_$c+
                      (generateD
                         $fDTInt
                         lvl166
                         wild
                         ((\ i ->
                             let { I# x2 ~ _ <- i } in
                             let {
                               $w$j2
                               $w$j2 =
                                 \ w6 ->
                                   let {
                                     $w$j3
                                     $w$j3 =
                                       \ w7 ->
                                         let {
                                           a11
                                           a11 = +# dt3 w6 } in
                                         letrec {
                                           $wfoldlM'_loop
                                           $wfoldlM'_loop =
                                             \ w8 ww ww1 ->
                                               let { __DEFAULT ~ _ <- w8 } in
                                               case >=# ww1 w7 of _ {
                                                 False ->
                                                   let { __DEFAULT ~ wild8
                                                   <- indexIntArray# dt5 (+# a11 ww1)
                                                   } in
                                                   $wfoldlM'_loop SPEC (+# ww wild8) (+# ww1 1);
                                                 True -> ww
                                               }; } in
                                         $wfoldlM'_loop SPEC 0 0 } in
                                   case <# x2 wild3 of _ {
                                     False -> $w$j3 wild1;
                                     True -> $w$j3 (+# wild1 1)
                                   } } in
                             case <# x2 wild3 of _ {
                               False ->
                                 let { __DEFAULT ~ ww <- $w$j2 (+# (*# wild1 x2) wild3) } in
                                 (I# ww) `cast` ...;
                               True ->
                                 let { __DEFAULT ~ ww <- $w$j2 (*# (+# wild1 1) x2) } in
                                 (I# ww) `cast` ...
                             })
                          `cast` ...))
                 } in
                 let { PInt arr ~ _ <- w1 `cast` ... } in
                 let {
                   ipv15
                   ipv15 =
                     splitSegdOnElemsD wild (USegd dt3 dt4 dt5 dt8 dt9 dt10 dt14) } in
                 let {
                   a11
                   a11 =
                     let { Vector ipv16 ipv17 ipv18 ~ _ <- arr `cast` ... } in
                     let { DVector ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ~ nt4
                     <- (imapD'
                           foldSegsWithP1
                           $dDT1
                           lvl162
                           wild
                           (\ _ x ->
                              let { (x2, y) ~ _ <- x } in
                              let { (x3, y1) ~ _ <- x2 } in
                              let { USegd dt15 dt16 dt17 dt18 dt19 dt20 dt21 ~ _ <- x3 } in
                              let { I# ipv19 ~ _ <- y1 } in
                              let { I# ipv20 ~ _ <- y } in
                              runSTRep
                                (\ @ s s1 ->
                                   let { (# ipv21, ipv22 #) ~ _
                                   <- newByteArray# (*# dt21 8) (s1 `cast` ...)
                                   } in
                                   let {
                                     a12
                                     a12 = +# ipv16 ipv19 } in
                                   letrec {
                                     $wa
                                     $wa =
                                       \ w6 ww ww1 ww2 ww3 w7 ->
                                         let { __DEFAULT ~ _ <- w6 } in
                                         case ww1 of ds6 {
                                           __DEFAULT ->
                                             case ww2 of wild10 {
                                               Nothing -> (# w7, I# ww #);
                                               Just x4 ->
                                                 let { I# x# ~ _ <- x4 } in
                                                 $wa
                                                   SPEC
                                                   (+# ww 1)
                                                   (-# ds6 1)
                                                   wild10
                                                   ww3
                                                   ((writeIntArray# ipv22 ww x# (w7 `cast` ...))
                                                    `cast` ...)
                                             };
                                           0 ->
                                             let { (sa1, sb5, ds5) ~ _ <- ww3 } in
                                             case ds5 of _ {
                                               Nothing ->
                                                 let { I# x4 ~ _ <- sa1 } in
                                                 case >=# x4 dt16 of _ {
                                                   False ->
                                                     $wa
                                                       SPEC
                                                       ww
                                                       0
                                                       (Nothing)
                                                       (I# (+# x4 1),
                                                        sb5,
                                                        Just
                                                          (let { __DEFAULT ~ wild14
                                                           <- indexIntArray# dt17 (+# dt15 x4)
                                                           } in
                                                           I# wild14))
                                                       w7;
                                                   True -> (# w7, I# ww #)
                                                 };
                                               Just x4 ->
                                                 let { I# x5 ~ _ <- sb5 } in
                                                 case >=# x5 dt16 of _ {
                                                   False ->
                                                     let { I# ww5 ~ _ <- x4 } in
                                                     $wa
                                                       SPEC
                                                       ww
                                                       ww5
                                                       (Just
                                                          (let { __DEFAULT ~ wild14
                                                           <- indexIntArray# ipv18 (+# a12 x5)
                                                           } in
                                                           I# wild14))
                                                       (sa1, I# (+# x5 1), Nothing)
                                                       w7;
                                                   True -> (# w7, I# ww #)
                                                 }
                                             }
                                         }; } in
                                   let { (# ipv23, ipv24 #) ~ _
                                   <- $wa SPEC 0 0 (Nothing) lvl163 (ipv21 `cast` ...)
                                   } in
                                   let { I# dt23 ~ _ <- ipv24 } in
                                   let { (# ipv25, ipv26 #) ~ _
                                   <- unsafeFreezeByteArray# ipv22 (ipv23 `cast` ...)
                                   } in
                                   (# ipv25 `cast` ..., (Vector 0 dt23 ipv26) `cast` ... #)))
                           ipv15)
                        `cast` ...
                     } in
                     runSTRep
                       (\ @ s s1 ->
                          let { (di, n) ~ _
                          <- scanD
                               $fDTInt
                               lvl160
                               wild
                               $fNumInt_$c+
                               lvl7
                               ((DInt ipv19 ipv20 ipv21) `cast` ...)
                          } in
                          let { DInt ipv25 ipv26 ipv27 ~ nt5 <- di `cast` ... } in
                          let { I# ipv28 ~ n1 <- n } in
                          case >=# ipv28 0 of _ {
                            False -> case lvl158 ipv28 of wild9 { };
                            True ->
                              let { (# ipv29, ipv30 #) ~ _
                              <- newByteArray# (*# ipv28 8) (s1 `cast` ...)
                              } in
                              let {
                                nt6
                                nt6 = DProd (nt5 `cast` ...) (nt4 `cast` ...) } in
                              let { (# ipv31, ipv32 #) ~ _
                              <- ($wa1
                                    dt6
                                    ds1
                                    ds2
                                    (++
                                       $fShowComp2
                                       ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                    (WorkCopy n1)
                                    ((\ i s2 ->
                                        let { (# ipv31, ipv32 #) ~ _
                                        <- ((((myD lvl159 (nt6 `cast` ...)) `cast` ...) i)
                                            `cast` ...)
                                             s2
                                        } in
                                        let { (x, y) ~ _ <- ipv32 } in
                                        let { I# ipv33 ~ _ <- x } in
                                        let { Vector ipv34 ipv35 ipv36 ~ _ <- y `cast` ... } in
                                        (# copyByteArray#
                                             ipv36
                                             (*# ipv34 8)
                                             ipv30
                                             (*# ipv33 8)
                                             (*# ipv35 8)
                                             (ipv31 `cast` ...),
                                           () #)
                                        `cast` ...)
                                     `cast` ...)
                                    (ipv29 `cast` ...))
                                 `cast` ...
                              } in
                              let { (# ipv33, ipv34 #) ~ _
                              <- unsafeFreezeByteArray# ipv30 (ipv31 `cast` ...)
                              } in
                              (# ipv33 `cast` ..., (Vector 0 ipv28 ipv34) `cast` ... #)
                          }) } in
                 ($w$j1
                    ((PNested
                        (let {
                           vsegids3
                           vsegids3 =
                             runSTRep
                               (\ @ s s1 ->
                                  let {
                                    a12
                                    a12 = -# dt4 1 } in
                                  let {
                                    $j
                                    $j =
                                      \ x ->
                                        let { (# ipv16, ipv17 #) ~ _
                                        <- newByteArray# (*# x 8) (s1 `cast` ...)
                                        } in
                                        letrec {
                                          $wa
                                          $wa =
                                            \ w6 ww ww1 w7 ->
                                              let { __DEFAULT ~ _ <- w6 } in
                                              case <=# ww1 a12 of _ {
                                                False -> (# w7, I# ww #);
                                                True ->
                                                  $wa
                                                    SPEC
                                                    (+# ww 1)
                                                    (+# ww1 1)
                                                    ((writeIntArray# ipv17 ww ww1 (w7 `cast` ...))
                                                     `cast` ...)
                                              }; } in
                                        let { (# ipv18, ipv19 #) ~ _
                                        <- $wa SPEC 0 0 (ipv16 `cast` ...)
                                        } in
                                        let { I# dt16 ~ _ <- ipv19 } in
                                        let { (# ipv20, ipv21 #) ~ _
                                        <- unsafeFreezeByteArray# ipv17 (ipv18 `cast` ...)
                                        } in
                                        (# ipv20 `cast` ...,
                                           (Vector 0 dt16 ipv21) `cast` ... #) } in
                                  case ># 0 a12 of _ {
                                    False ->
                                      let {
                                        a13
                                        a13 = +# a12 1 } in
                                      case ># a13 0 of _ {
                                        False -> case lvl157 of wild9 { };
                                        True -> $j a13
                                      };
                                    True -> $j 0
                                  }) } in
                         let {
                           dt15
                           dt15 =
                             runSTRep
                               (\ @ s s1 ->
                                  let {
                                    $j
                                    $j =
                                      \ x ->
                                        let { (# ipv16, ipv17 #) ~ _
                                        <- newByteArray# (*# x 8) (s1 `cast` ...)
                                        } in
                                        letrec {
                                          $wa
                                          $wa =
                                            \ w6 ww ww1 w7 ->
                                              let { __DEFAULT ~ _ <- w6 } in
                                              case <=# ww1 0 of _ {
                                                False ->
                                                  $wa
                                                    SPEC
                                                    (+# ww 1)
                                                    (-# ww1 1)
                                                    ((writeIntArray# ipv17 ww 0 (w7 `cast` ...))
                                                     `cast` ...);
                                                True -> (# w7, I# ww #)
                                              }; } in
                                        let { (# ipv18, ipv19 #) ~ _
                                        <- $wa SPEC 0 dt4 (ipv16 `cast` ...)
                                        } in
                                        let { I# dt17 ~ _ <- ipv19 } in
                                        let { (# ipv20, ipv21 #) ~ _
                                        <- unsafeFreezeByteArray# ipv17 (ipv18 `cast` ...)
                                        } in
                                        (# ipv20 `cast` ...,
                                           (Vector 0 dt17 ipv21) `cast` ... #) } in
                                  case <=# dt4 0 of _ {
                                    False -> $j dt4;
                                    True -> $j 0
                                  }) } in
                         let {
                           a12
                           a12 =
                             splitSSegdOnElemsD
                               wild
                               (USSegd
                                  True (dt7 `cast` ...) dt15 dt3 dt4 dt5 dt8 dt9 dt10 dt14) } in
                         let {
                           upssegd
                           upssegd =
                             UPSSegd
                               True (dt7 `cast` ...) dt15 dt3 dt4 dt5 dt8 dt9 dt10 dt14 a12 } in
                         UPVSegd
                           True
                           vsegids3
                           vsegids3
                           upssegd
                           upssegd
                           ($wmkDist vsegids3 dt3 dt5 dt10))
                        ((PInts
                            (runSTRep
                               (\ @ s s1 ->
                                  let { Vector ipv16 ipv17 ipv18 ~ _ <- a11 `cast` ... } in
                                  let { (# ipv19, ipv20 #) ~ _
                                  <- newByteArray# (*# ipv17 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $wa
                                    $wa =
                                      \ w6 ww ww1 w7 ->
                                        let { __DEFAULT ~ _ <- w6 } in
                                        case >=# ww1 ipv17 of _ {
                                          False ->
                                            let { __DEFAULT ~ wild8
                                            <- indexIntArray# ipv18 (+# ipv16 ww1)
                                            } in
                                            $wa
                                              SPEC
                                              (+# ww 1)
                                              (+# ww1 1)
                                              ((writeIntArray# ipv20 ww wild8 (w7 `cast` ...))
                                               `cast` ...);
                                          True -> (# w7, I# ww #)
                                        }; } in
                                  let { (# ipv21, ipv22 #) ~ _
                                  <- $wa SPEC 0 0 (ipv19 `cast` ...)
                                  } in
                                  let { I# dt16 ~ _ <- ipv22 } in
                                  let { (# ipv23, ipv24 #) ~ _
                                  <- unsafeFreezeByteArray# (ipv20 `cast` ...) ipv21
                                  } in
                                  let { (# ipv25, ipv26 #) ~ _ <- newByteArray# 8 ipv23 } in
                                  let { (# ipv27, ipv28 #) ~ _
                                  <- unsafeFreezeByteArray# ipv26 (writeIntArray# ipv26 0 0 ipv25)
                                  } in
                                  let { (# ipv29, ipv30 #) ~ _ <- newByteArray# 8 ipv27 } in
                                  let { (# ipv31, ipv32 #) ~ _
                                  <- unsafeFreezeByteArray#
                                       ipv30 (writeIntArray# ipv30 0 dt16 ipv29)
                                  } in
                                  let { (# ipv33, ipv34 #) ~ _
                                  <- newArrayArray# 1 (ipv31 `cast` ...)
                                  } in
                                  let { __DEFAULT ~ s'#
                                  <- writeByteArrayArray# ipv34 0 ipv24 ipv33
                                  } in
                                  let { (# ipv35, ipv36 #) ~ _
                                  <- unsafeFreezeArrayArray# ipv34 s'#
                                  } in
                                  (# ipv35, Vectors 1 ipv28 ipv32 ipv36 #))))
                         `cast` ...)
                        (UPSegd dt3 dt4 dt5 dt8 dt9 dt10 dt14 ipv15)
                        ((PInt a11) `cast` ...))
                     `cast` ...))
                 `cast` ...;
               0 -> ($w$j1 (lvl128 `cast` ...)) `cast` ...
             }
          } in
          let {
            $w$j2
            $w$j2 =
              \ w6 w7 w8 ->
                let {
                  $w$j3
                  $w$j3 =
                    \ w9 ->
                      let { PNested ipv4 ipv5 ipv6 ipv7 ~ _ <- w9 `cast` ... } in
                      (PTuple2
                         (nt `cast` ...)
                         (let {
                            segd'
                            segd' =
                              let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds1 ~ _ <- w8 } in
                              let { UPSegd dt9 dt10 dt11 dt14 dt15 dt16 dt17 ds2 ~ _ <- ipv6 } in
                              let {
                                $w$j4
                                $w$j4 =
                                  \ w10 ->
                                    let { Gang dt18 ds3 ds4 ~ wild2 <- theGang } in
                                    let { __DEFAULT ~ wild3 <- quotInt# w10 dt18 } in
                                    let { __DEFAULT ~ wild4 <- remInt# w10 dt18 } in
                                    let { DVector ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ~ nt2
                                    <- (generateD
                                          $dDT1
                                          lvl37
                                          wild2
                                          (\ i ->
                                             let { I# x1 ~ _ <- i } in
                                             let {
                                               $j
                                               $j =
                                                 \ dt19 ->
                                                   let {
                                                     $j1
                                                     $j1 =
                                                       \ y ->
                                                         runSTRep
                                                           (\ @ s s1 ->
                                                              let { (# ipv8, ipv9 #) ~ _
                                                              <- newByteArray#
                                                                   (*# dt19 8) (s1 `cast` ...)
                                                              } in
                                                              let {
                                                                a11
                                                                a11 = +# dt9 y } in
                                                              let {
                                                                a12
                                                                a12 = +# dt y } in
                                                              letrec {
                                                                $wa
                                                                $wa =
                                                                  \ w11 ww ww1 w12 ->
                                                                    let { __DEFAULT ~ _ <- w11 } in
                                                                    case >=# ww1 dt19 of _ {
                                                                      False ->
                                                                        let { __DEFAULT ~ wild7
                                                                        <- indexIntArray#
                                                                             dt4 (+# a12 ww1)
                                                                        } in
                                                                        let { __DEFAULT ~ wild8
                                                                        <- indexIntArray#
                                                                             dt11 (+# a11 ww1)
                                                                        } in
                                                                        $wa
                                                                          SPEC
                                                                          (+# ww 1)
                                                                          (+# ww1 1)
                                                                          ((writeIntArray#
                                                                              ipv9
                                                                              ww
                                                                              (+# wild7 wild8)
                                                                              (w12 `cast` ...))
                                                                           `cast` ...);
                                                                      True -> (# w12, I# ww #)
                                                                    }; } in
                                                              let { (# ipv10, ipv11 #) ~ _
                                                              <- $wa SPEC 0 0 (ipv8 `cast` ...)
                                                              } in
                                                              let { I# dt21 ~ _ <- ipv11 } in
                                                              let { (# ipv12, ipv13 #) ~ _
                                                              <- unsafeFreezeByteArray#
                                                                   ipv9 (ipv10 `cast` ...)
                                                              } in
                                                              (# ipv12 `cast` ...,
                                                                 (Vector 0 dt21 ipv13)
                                                                 `cast` ... #)) } in
                                                   case <# x1 wild4 of _ {
                                                     False -> $j1 (+# (*# wild3 x1) wild4);
                                                     True -> $j1 (*# (+# wild3 1) x1)
                                                   } } in
                                             case <# x1 wild4 of _ {
                                               False -> $j wild3;
                                               True -> $j (+# wild3 1)
                                             }))
                                       `cast` ...
                                    } in
                                    let { Vector dt20 dt21 dt22 ~ _
                                    <- (runSTRep
                                          (\ @ s s1 ->
                                             let { (di, n) ~ _
                                             <- scanD
                                                  $fDTInt
                                                  lvl35
                                                  wild2
                                                  $fNumInt_$c+
                                                  lvl7
                                                  ((DInt ipv8 ipv9 ipv10) `cast` ...)
                                             } in
                                             let { DInt ipv14 ipv15 ipv16 ~ nt3
                                             <- di `cast` ...
                                             } in
                                             let { I# ipv17 ~ n1 <- n } in
                                             case >=# ipv17 0 of _ {
                                               False -> case lvl33 ipv17 of wild7 { };
                                               True ->
                                                 let { (# ipv18, ipv19 #) ~ _
                                                 <- newByteArray# (*# ipv17 8) (s1 `cast` ...)
                                                 } in
                                                 let {
                                                   nt4
                                                   nt4 =
                                                     DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                                                 let { (# ipv20, ipv21 #) ~ _
                                                 <- ($wa1
                                                       dt18
                                                       ds3
                                                       ds4
                                                       (++
                                                          $fShowComp2
                                                          ($fShowComp_$cshowsPrec
                                                             $fShowComp7 (WJoinCopy n1) ([])))
                                                       (WorkCopy n1)
                                                       ((\ i s2 ->
                                                           let { (# ipv20, ipv21 #) ~ _
                                                           <- ((((myD lvl34 (nt4 `cast` ...))
                                                                 `cast` ...)
                                                                  i)
                                                               `cast` ...)
                                                                s2
                                                           } in
                                                           let { (x, y) ~ _ <- ipv21 } in
                                                           let { I# ipv22 ~ _ <- x } in
                                                           let { Vector ipv23 ipv24 ipv25 ~ _
                                                           <- y `cast` ...
                                                           } in
                                                           (# copyByteArray#
                                                                ipv25
                                                                (*# ipv23 8)
                                                                ipv19
                                                                (*# ipv22 8)
                                                                (*# ipv24 8)
                                                                (ipv20 `cast` ...),
                                                              () #)
                                                           `cast` ...)
                                                        `cast` ...)
                                                       (ipv18 `cast` ...))
                                                    `cast` ...
                                                 } in
                                                 let { (# ipv22, ipv23 #) ~ _
                                                 <- unsafeFreezeByteArray# ipv19 (ipv20 `cast` ...)
                                                 } in
                                                 (# ipv22 `cast` ...,
                                                    (Vector 0 ipv17 ipv23) `cast` ... #)
                                             }))
                                       `cast` ...
                                    } in
                                    let {
                                      $w$j5
                                      $w$j5 =
                                        \ w11 ->
                                          let { __DEFAULT ~ wild5 <- quotInt# w11 dt18 } in
                                          let { __DEFAULT ~ wild6 <- remInt# w11 dt18 } in
                                          let { DVector ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ~ nt3
                                          <- (generateD
                                                $dDT1
                                                lvl32
                                                wild2
                                                (\ i ->
                                                   let { I# x1 ~ _ <- i } in
                                                   let {
                                                     $j
                                                     $j =
                                                       \ dt23 ->
                                                         let {
                                                           $j1
                                                           $j1 =
                                                             \ y ->
                                                               runSTRep
                                                                 (\ @ s s1 ->
                                                                    let { (# ipv14, ipv15 #) ~ _
                                                                    <- newByteArray#
                                                                         (*# dt23 8) (s1 `cast` ...)
                                                                    } in
                                                                    let {
                                                                      a11
                                                                      a11 = +# dt14 y } in
                                                                    let {
                                                                      a12
                                                                      a12 = +# dt5 y } in
                                                                    letrec {
                                                                      $wa
                                                                      $wa =
                                                                        \ w12 ww ww1 w13 ->
                                                                          let { __DEFAULT ~ _
                                                                          <- w12
                                                                          } in
                                                                          case >=# ww1 dt23 of _ {
                                                                            False ->
                                                                              let { __DEFAULT ~ wild9
                                                                              <- indexIntArray#
                                                                                   dt7 (+# a12 ww1)
                                                                              } in
                                                                              let { __DEFAULT ~ wild10
                                                                              <- indexIntArray#
                                                                                   dt16 (+# a11 ww1)
                                                                              } in
                                                                              $wa
                                                                                SPEC
                                                                                (+# ww 1)
                                                                                (+# ww1 1)
                                                                                ((writeIntArray#
                                                                                    ipv15
                                                                                    ww
                                                                                    (+#
                                                                                       wild9 wild10)
                                                                                    (w13
                                                                                     `cast` ...))
                                                                                 `cast` ...);
                                                                            True -> (# w13, I# ww #)
                                                                          }; } in
                                                                    let { (# ipv16, ipv17 #) ~ _
                                                                    <- $wa
                                                                         SPEC 0 0 (ipv14 `cast` ...)
                                                                    } in
                                                                    let { I# dt25 ~ _ <- ipv17 } in
                                                                    let { (# ipv18, ipv19 #) ~ _
                                                                    <- unsafeFreezeByteArray#
                                                                         ipv15 (ipv16 `cast` ...)
                                                                    } in
                                                                    (# ipv18 `cast` ...,
                                                                       (Vector 0 dt25 ipv19)
                                                                       `cast` ... #)) } in
                                                         case <# x1 wild6 of _ {
                                                           False -> $j1 (+# (*# wild5 x1) wild6);
                                                           True -> $j1 (*# (+# wild5 1) x1)
                                                         } } in
                                                   case <# x1 wild6 of _ {
                                                     False -> $j wild5;
                                                     True -> $j (+# wild5 1)
                                                   }))
                                             `cast` ...
                                          } in
                                          let { Vector dt24 dt25 dt26 ~ _
                                          <- (runSTRep
                                                (\ @ s s1 ->
                                                   let { (di, n) ~ _
                                                   <- scanD
                                                        $fDTInt
                                                        lvl30
                                                        wild2
                                                        $fNumInt_$c+
                                                        lvl7
                                                        ((DInt ipv14 ipv15 ipv16) `cast` ...)
                                                   } in
                                                   let { DInt ipv20 ipv21 ipv22 ~ nt4
                                                   <- di `cast` ...
                                                   } in
                                                   let { I# ipv23 ~ n1 <- n } in
                                                   case >=# ipv23 0 of _ {
                                                     False -> case lvl28 ipv23 of wild9 { };
                                                     True ->
                                                       let { (# ipv24, ipv25 #) ~ _
                                                       <- newByteArray# (*# ipv23 8) (s1 `cast` ...)
                                                       } in
                                                       let {
                                                         nt5
                                                         nt5 =
                                                           DProd
                                                             (nt4 `cast` ...) (nt3 `cast` ...) } in
                                                       let { (# ipv26, ipv27 #) ~ _
                                                       <- ($wa1
                                                             dt18
                                                             ds3
                                                             ds4
                                                             (++
                                                                $fShowComp2
                                                                ($fShowComp_$cshowsPrec
                                                                   $fShowComp7 (WJoinCopy n1) ([])))
                                                             (WorkCopy n1)
                                                             ((\ i s2 ->
                                                                 let { (# ipv26, ipv27 #) ~ _
                                                                 <- ((((myD lvl29 (nt5 `cast` ...))
                                                                       `cast` ...)
                                                                        i)
                                                                     `cast` ...)
                                                                      s2
                                                                 } in
                                                                 let { (x, y) ~ _ <- ipv27 } in
                                                                 let { I# ipv28 ~ _ <- x } in
                                                                 let { Vector ipv29 ipv30 ipv31 ~ _
                                                                 <- y `cast` ...
                                                                 } in
                                                                 (# copyByteArray#
                                                                      ipv31
                                                                      (*# ipv29 8)
                                                                      ipv25
                                                                      (*# ipv28 8)
                                                                      (*# ipv30 8)
                                                                      (ipv26 `cast` ...),
                                                                    () #)
                                                                 `cast` ...)
                                                              `cast` ...)
                                                             (ipv24 `cast` ...))
                                                          `cast` ...
                                                       } in
                                                       let { (# ipv28, ipv29 #) ~ _
                                                       <- unsafeFreezeByteArray#
                                                            ipv25 (ipv26 `cast` ...)
                                                       } in
                                                       (# ipv28 `cast` ...,
                                                          (Vector 0 ipv23 ipv29) `cast` ... #)
                                                   }))
                                             `cast` ...
                                          } in
                                          let {
                                            dt27
                                            dt27 = +# dt8 dt17 } in
                                          (# dt20,
                                             dt21,
                                             dt22,
                                             dt24,
                                             dt25,
                                             dt26,
                                             dt27,
                                             splitSegdOnElemsD
                                               wild2
                                               (USegd dt20 dt21 dt22 dt24 dt25 dt26 dt27) #) } in
                                    case <=# dt6 dt15 of _ {
                                      False -> $w$j5 dt15;
                                      True -> $w$j5 dt6
                                    } } in
                              case <=# dt3 dt10 of _ {
                                False ->
                                  let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                                  <- $w$j4 dt10
                                  } in
                                  UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8;
                                True ->
                                  let { (# ww1, ww2, ww3, ww4, ww5, ww6, ww7, ww8 #) ~ _
                                  <- $w$j4 dt3
                                  } in
                                  UPSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8
                              } } in
                          let {
                            lvl230
                            lvl230 =
                              let { PNesteds vec ~ _ <- w7 `cast` ... } in
                              let { PNesteds vec1 ~ _ <- ipv5 `cast` ... } in
                              let {
                                yarr
                                yarr =
                                  let { Vector ipv8 ipv9 ipv10 ~ _ <- vec1 } in
                                  runSTRep
                                    (\ @ s s1 ->
                                       let { (# ipv11, ipv12 #) ~ _
                                       <- newArray# ipv9 (uninitialised) (s1 `cast` ...)
                                       } in
                                       letrec {
                                         $wa
                                         $wa =
                                           \ w10 ww ww1 w11 ->
                                             let { __DEFAULT ~ _ <- w10 } in
                                             case >=# ww1 ipv9 of _ {
                                               False ->
                                                 let { (# ipv13 #) ~ _
                                                 <- indexArray# ipv10 (+# ipv8 ww1)
                                                 } in
                                                 $wa
                                                   SPEC
                                                   (+# ww 1)
                                                   (+# ww1 1)
                                                   ((writeArray#
                                                       ipv12
                                                       ww
                                                       (let { PNested vsegd xs segd flat ~ _
                                                        <- ipv13 `cast` ...
                                                        } in
                                                        (PNested
                                                           vsegd
                                                           (xs `cast` ...)
                                                           segd
                                                           (flat `cast` ...))
                                                        `cast` ...)
                                                       (w11 `cast` ...))
                                                    `cast` ...);
                                               True -> (# w11, I# ww #)
                                             }; } in
                                       let { (# ipv13, ipv14 #) ~ _
                                       <- $wa SPEC 0 0 (ipv11 `cast` ...)
                                       } in
                                       let { I# dt6 ~ _ <- ipv14 } in
                                       let { (# ipv15, ipv16 #) ~ _
                                       <- unsafeFreezeArray# ipv12 (ipv13 `cast` ...)
                                       } in
                                       (# ipv15 `cast` ..., Vector 0 dt6 ipv16 #)) } in
                              let {
                                xarr
                                xarr =
                                  let { Vector ipv8 ipv9 ipv10 ~ _ <- vec } in
                                  runSTRep
                                    (\ @ s s1 ->
                                       let { (# ipv11, ipv12 #) ~ _
                                       <- newArray# ipv9 (uninitialised) (s1 `cast` ...)
                                       } in
                                       letrec {
                                         $wa
                                         $wa =
                                           \ w10 ww ww1 w11 ->
                                             let { __DEFAULT ~ _ <- w10 } in
                                             case >=# ww1 ipv9 of _ {
                                               False ->
                                                 let { (# ipv13 #) ~ _
                                                 <- indexArray# ipv10 (+# ipv8 ww1)
                                                 } in
                                                 $wa
                                                   SPEC
                                                   (+# ww 1)
                                                   (+# ww1 1)
                                                   ((writeArray#
                                                       ipv12
                                                       ww
                                                       (let { PNested vsegd xs segd flat ~ _
                                                        <- ipv13 `cast` ...
                                                        } in
                                                        (PNested
                                                           vsegd
                                                           (xs `cast` ...)
                                                           segd
                                                           (flat `cast` ...))
                                                        `cast` ...)
                                                       (w11 `cast` ...))
                                                    `cast` ...);
                                               True -> (# w11, I# ww #)
                                             }; } in
                                       let { (# ipv13, ipv14 #) ~ _
                                       <- $wa SPEC 0 0 (ipv11 `cast` ...)
                                       } in
                                       let { I# dt6 ~ _ <- ipv14 } in
                                       let { (# ipv15, ipv16 #) ~ _
                                       <- unsafeFreezeArray# ipv12 (ipv13 `cast` ...)
                                       } in
                                       (# ipv15 `cast` ..., Vector 0 dt6 ipv16 #)) } in
                              let {
                                ydata
                                ydata =
                                  let { Vector ipv8 ipv9 ipv10 ~ _ <- yarr } in
                                  runSTRep
                                    (\ @ s s1 ->
                                       let { (# ipv11, ipv12 #) ~ _
                                       <- newArray# ipv9 (uninitialised) (s1 `cast` ...)
                                       } in
                                       letrec {
                                         $wa
                                         $wa =
                                           \ w10 ww ww1 w11 ->
                                             let { __DEFAULT ~ _ <- w10 } in
                                             case >=# ww1 ipv9 of _ {
                                               False ->
                                                 $wa
                                                   SPEC
                                                   (+# ww 1)
                                                   (+# ww1 1)
                                                   ((writeArray#
                                                       ipv12
                                                       ww
                                                       (let { (# ipv13 #) ~ _
                                                        <- indexArray# ipv10 (+# ipv8 ww1)
                                                        } in
                                                        let { PNested ds3 ds4 ds5 ds6 ~ _
                                                        <- ipv13 `cast` ...
                                                        } in
                                                        ($fPRInt_$ctoVectordPR (ds4 `cast` ...))
                                                        `cast` ...)
                                                       (w11 `cast` ...))
                                                    `cast` ...);
                                               True -> (# w11, I# ww #)
                                             }; } in
                                       let { (# ipv13, ipv14 #) ~ _
                                       <- $wa SPEC 0 0 (ipv11 `cast` ...)
                                       } in
                                       let { I# dt6 ~ _ <- ipv14 } in
                                       let { (# ipv15, ipv16 #) ~ _
                                       <- unsafeFreezeArray# ipv12 (ipv13 `cast` ...)
                                       } in
                                       (# ipv15 `cast` ..., Vector 0 dt6 ipv16 #)) } in
                              let {
                                xdata
                                xdata =
                                  let { Vector ipv8 ipv9 ipv10 ~ _ <- xarr } in
                                  runSTRep
                                    (\ @ s s1 ->
                                       let { (# ipv11, ipv12 #) ~ _
                                       <- newArray# ipv9 (uninitialised) (s1 `cast` ...)
                                       } in
                                       letrec {
                                         $wa
                                         $wa =
                                           \ w10 ww ww1 w11 ->
                                             let { __DEFAULT ~ _ <- w10 } in
                                             case >=# ww1 ipv9 of _ {
                                               False ->
                                                 $wa
                                                   SPEC
                                                   (+# ww 1)
                                                   (+# ww1 1)
                                                   ((writeArray#
                                                       ipv12
                                                       ww
                                                       (let { (# ipv13 #) ~ _
                                                        <- indexArray# ipv10 (+# ipv8 ww1)
                                                        } in
                                                        let { PNested ds3 ds4 ds5 ds6 ~ _
                                                        <- ipv13 `cast` ...
                                                        } in
                                                        ($fPRInt_$ctoVectordPR (ds4 `cast` ...))
                                                        `cast` ...)
                                                       (w11 `cast` ...))
                                                    `cast` ...);
                                               True -> (# w11, I# ww #)
                                             }; } in
                                       let { (# ipv13, ipv14 #) ~ _
                                       <- $wa SPEC 0 0 (ipv11 `cast` ...)
                                       } in
                                       let { I# dt6 ~ _ <- ipv14 } in
                                       let { (# ipv15, ipv16 #) ~ _
                                       <- unsafeFreezeArray# ipv12 (ipv13 `cast` ...)
                                       } in
                                       (# ipv15 `cast` ..., Vector 0 dt6 ipv16 #)) } in
                              let {
                                segd'1
                                segd'1 =
                                  let { UPVSegd ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ~ _ <- w6 } in
                                  let { Vector ipv14 ipv15 ipv16 ~ _ <- xarr } in
                                  let { Vector ww1 ww2 ww3 ~ _
                                  <- runSTRep
                                       (\ @ s s1 ->
                                          let { (# ipv17, ipv18 #) ~ _
                                          <- newArray# ipv15 (uninitialised) (s1 `cast` ...)
                                          } in
                                          letrec {
                                            $wa
                                            $wa =
                                              \ w10 ww ww1 w11 ->
                                                let { __DEFAULT ~ _ <- w10 } in
                                                case >=# ww1 ipv15 of _ {
                                                  False ->
                                                    let { (# ipv19 #) ~ _
                                                    <- indexArray# ipv16 (+# ipv14 ww1)
                                                    } in
                                                    $wa
                                                      SPEC
                                                      (+# ww 1)
                                                      (+# ww1 1)
                                                      ((writeArray#
                                                          ipv18
                                                          ww
                                                          (let { PNested ds3 ds4 segd ds5 ~ _
                                                           <- ipv19 `cast` ...
                                                           } in
                                                           let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8
                                                                        ds6 ~ _
                                                           <- segd
                                                           } in
                                                           (Vector dt dt3 dt4) `cast` ...)
                                                          (w11 `cast` ...))
                                                       `cast` ...);
                                                  True -> (# w11, I# ww #)
                                                }; } in
                                          let { (# ipv19, ipv20 #) ~ _
                                          <- $wa SPEC 0 0 (ipv17 `cast` ...)
                                          } in
                                          let { I# dt6 ~ _ <- ipv20 } in
                                          let { (# ipv21, ipv22 #) ~ _
                                          <- unsafeFreezeArray# ipv18 (ipv19 `cast` ...)
                                          } in
                                          (# ipv21 `cast` ..., Vector 0 dt6 ipv22 #))
                                  } in
                                  let { Vectors ipv17 ipv18 ipv19 ipv20 ~ _
                                  <- runSTRep
                                       ((\ @ s ->
                                           let { Vector ww5 ww6 ww7 ~ _
                                           <- runSTRep
                                                (\ @ s1 s2 ->
                                                   let { (# ipv17, ipv18 #) ~ _
                                                   <- newArray# ww2 (uninitialised) (s2 `cast` ...)
                                                   } in
                                                   letrec {
                                                     $wa
                                                     $wa =
                                                       \ w10 ww4 ww5 w11 ->
                                                         let { __DEFAULT ~ _ <- w10 } in
                                                         case >=# ww5 ww2 of _ {
                                                           False ->
                                                             $wa
                                                               SPEC
                                                               (+# ww4 1)
                                                               (+# ww5 1)
                                                               ((writeArray#
                                                                   ipv18
                                                                   ww4
                                                                   (runSTRep
                                                                      (\ @ s3 s4 ->
                                                                         let { (# ipv19 #) ~ _
                                                                         <- indexArray#
                                                                              ww3 (+# ww1 ww5)
                                                                         } in
                                                                         let { Vector ipv20 ipv21
                                                                                      ipv22 ~ _
                                                                         <- ipv19 `cast` ...
                                                                         } in
                                                                         let { (# ipv23, ipv24 #) ~ _
                                                                         <- newByteArray#
                                                                              (*# ipv21 8)
                                                                              (s4 `cast` ...)
                                                                         } in
                                                                         letrec {
                                                                           $wa1
                                                                           $wa1 =
                                                                             \ w12 ww6 ww7 w13 ->
                                                                               let { __DEFAULT ~ _
                                                                               <- w12
                                                                               } in
                                                                               case >=# ww7 ipv21
                                                                               of _ {
                                                                                 False ->
                                                                                   let { __DEFAULT ~ wild4
                                                                                   <- indexIntArray#
                                                                                        ipv22
                                                                                        (+#
                                                                                           ipv20
                                                                                           ww7)
                                                                                   } in
                                                                                   $wa1
                                                                                     SPEC
                                                                                     (+# ww6 1)
                                                                                     (+# ww7 1)
                                                                                     ((writeIntArray#
                                                                                         ipv24
                                                                                         ww6
                                                                                         wild4
                                                                                         (w13
                                                                                          `cast` ...))
                                                                                      `cast` ...);
                                                                                 True ->
                                                                                   (# w13, I# ww6 #)
                                                                               }; } in
                                                                         let { (# ipv25, ipv26 #) ~ _
                                                                         <- $wa1
                                                                              SPEC
                                                                              0
                                                                              0
                                                                              (ipv23 `cast` ...)
                                                                         } in
                                                                         let { I# dt4 ~ dt3
                                                                         <- ipv26
                                                                         } in
                                                                         let { (# ipv27, ipv28 #) ~ _
                                                                         <- unsafeFreezeByteArray#
                                                                              (ipv24 `cast` ...)
                                                                              ipv25
                                                                         } in
                                                                         (# ipv27 `cast` ...,
                                                                            (ByteArray ipv28,
                                                                             lvl7,
                                                                             dt3) #)))
                                                                   (w11 `cast` ...))
                                                                `cast` ...);
                                                           True -> (# w11, I# ww4 #)
                                                         }; } in
                                                   let { (# ipv19, ipv20 #) ~ _
                                                   <- $wa SPEC 0 0 (ipv17 `cast` ...)
                                                   } in
                                                   let { I# dt6 ~ _ <- ipv20 } in
                                                   let { (# ipv21, ipv22 #) ~ _
                                                   <- unsafeFreezeArray# ipv18 (ipv19 `cast` ...)
                                                   } in
                                                   (# ipv21 `cast` ..., Vector 0 dt6 ipv22 #))
                                           } in
                                           (\ s1 ->
                                              let { (# ipv17, ipv18 #) ~ _
                                              <- newArrayArray# ww2 s1
                                              } in
                                              letrec {
                                                $wa
                                                $wa =
                                                  \ w10 ww8 ww9 ww10 w11 ->
                                                    let { __DEFAULT ~ _ <- w10 } in
                                                    case ww10 of _ {
                                                      Nothing ->
                                                        let { (x1, n1) ~ _ <- ww8 } in
                                                        let { I# x ~ _ <- n1 } in
                                                        case ># x 0 of _ {
                                                          False -> (# w11, () #);
                                                          True ->
                                                            $wa
                                                              SPEC
                                                              (let { I# x2 ~ _ <- x1 } in
                                                               I# (+# x2 1),
                                                               I# (-# x 1))
                                                              ww9
                                                              (Just x1)
                                                              w11
                                                        };
                                                      Just x ->
                                                        let { I# x1 ~ _ <- ww9 } in
                                                        case >=# x1 ww2 of _ {
                                                          False ->
                                                            let { I# i# ~ _ <- x } in
                                                            let { (ba, ds, ds2) ~ _
                                                            <- runSTRep
                                                                 (\ @ s2 s3 ->
                                                                    let { (# ipv19 #) ~ _
                                                                    <- indexArray# ww3 (+# ww1 x1)
                                                                    } in
                                                                    let { Vector ipv20 ipv21
                                                                                 ipv22 ~ _
                                                                    <- ipv19 `cast` ...
                                                                    } in
                                                                    let { (# ipv23, ipv24 #) ~ _
                                                                    <- newByteArray#
                                                                         (*# ipv21 8)
                                                                         (s3 `cast` ...)
                                                                    } in
                                                                    letrec {
                                                                      $wa1
                                                                      $wa1 =
                                                                        \ w12 ww11 ww12 w13 ->
                                                                          let { __DEFAULT ~ _
                                                                          <- w12
                                                                          } in
                                                                          case >=# ww12 ipv21 of _ {
                                                                            False ->
                                                                              let { __DEFAULT ~ wild7
                                                                              <- indexIntArray#
                                                                                   ipv22
                                                                                   (+# ipv20 ww12)
                                                                              } in
                                                                              $wa1
                                                                                SPEC
                                                                                (+# ww11 1)
                                                                                (+# ww12 1)
                                                                                ((writeIntArray#
                                                                                    ipv24
                                                                                    ww11
                                                                                    wild7
                                                                                    (w13
                                                                                     `cast` ...))
                                                                                 `cast` ...);
                                                                            True ->
                                                                              (# w13, I# ww11 #)
                                                                          }; } in
                                                                    let { (# ipv25, ipv26 #) ~ _
                                                                    <- $wa1
                                                                         SPEC 0 0 (ipv23 `cast` ...)
                                                                    } in
                                                                    let { I# dt4 ~ dt3 <- ipv26 } in
                                                                    let { (# ipv27, ipv28 #) ~ _
                                                                    <- unsafeFreezeByteArray#
                                                                         (ipv24 `cast` ...) ipv25
                                                                    } in
                                                                    (# ipv27 `cast` ...,
                                                                       (ByteArray ipv28,
                                                                        lvl7,
                                                                        dt3) #))
                                                            } in
                                                            let { ByteArray ba# ~ _ <- ba } in
                                                            let { __DEFAULT ~ s'#
                                                            <- writeByteArrayArray# ipv18 i# ba# w11
                                                            } in
                                                            $wa
                                                              SPEC ww8 (I# (+# x1 1)) (Nothing) s'#;
                                                          True -> (# w11, () #)
                                                        }
                                                    }; } in
                                              let { (# ipv19, ipv20 #) ~ _
                                              <- $wa SPEC (lvl7, I# ww2) lvl7 (Nothing) ipv17
                                              } in
                                              let { (# ipv21, ipv22 #) ~ _
                                              <- unsafeFreezeArrayArray# ipv18 ipv19
                                              } in
                                              (# ipv21,
                                                 let { (baStarts, ds3, ds4) ~ _
                                                 <- runSTRep
                                                      (\ @ s2 s3 ->
                                                         let { (# ipv23, ipv24 #) ~ _
                                                         <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                                         } in
                                                         letrec {
                                                           $wa1
                                                           $wa1 =
                                                             \ w10 ww8 ww9 w11 ->
                                                               let { __DEFAULT ~ _ <- w10 } in
                                                               case >=# ww9 ww6 of _ {
                                                                 False ->
                                                                   let { (# ipv25 #) ~ _
                                                                   <- indexArray# ww7 (+# ww5 ww9)
                                                                   } in
                                                                   let { (a28, b1, c1) ~ _
                                                                   <- ipv25
                                                                   } in
                                                                   let { I# x# ~ _ <- b1 } in
                                                                   $wa1
                                                                     SPEC
                                                                     (+# ww8 1)
                                                                     (+# ww9 1)
                                                                     ((writeIntArray#
                                                                         ipv24
                                                                         ww8
                                                                         x#
                                                                         (w11 `cast` ...))
                                                                      `cast` ...);
                                                                 True -> (# w11, I# ww8 #)
                                                               }; } in
                                                         let { (# ipv25, ipv26 #) ~ _
                                                         <- $wa1 SPEC 0 0 (ipv23 `cast` ...)
                                                         } in
                                                         let { I# dt4 ~ dt3 <- ipv26 } in
                                                         let { (# ipv27, ipv28 #) ~ _
                                                         <- unsafeFreezeByteArray#
                                                              (ipv24 `cast` ...) ipv25
                                                         } in
                                                         (# ipv27 `cast` ...,
                                                            (ByteArray ipv28, lvl7, dt3) #))
                                                 } in
                                                 let { ByteArray dt3 ~ _ <- baStarts } in
                                                 let { (baLens, ds5, ds6) ~ _
                                                 <- runSTRep
                                                      (\ @ s2 s3 ->
                                                         let { (# ipv23, ipv24 #) ~ _
                                                         <- newByteArray# (*# ww6 8) (s3 `cast` ...)
                                                         } in
                                                         letrec {
                                                           $wa1
                                                           $wa1 =
                                                             \ w10 ww8 ww9 w11 ->
                                                               let { __DEFAULT ~ _ <- w10 } in
                                                               case >=# ww9 ww6 of _ {
                                                                 False ->
                                                                   let { (# ipv25 #) ~ _
                                                                   <- indexArray# ww7 (+# ww5 ww9)
                                                                   } in
                                                                   let { (a28, b1, c1) ~ _
                                                                   <- ipv25
                                                                   } in
                                                                   let { I# x# ~ _ <- c1 } in
                                                                   $wa1
                                                                     SPEC
                                                                     (+# ww8 1)
                                                                     (+# ww9 1)
                                                                     ((writeIntArray#
                                                                         ipv24
                                                                         ww8
                                                                         x#
                                                                         (w11 `cast` ...))
                                                                      `cast` ...);
                                                                 True -> (# w11, I# ww8 #)
                                                               }; } in
                                                         let { (# ipv25, ipv26 #) ~ _
                                                         <- $wa1 SPEC 0 0 (ipv23 `cast` ...)
                                                         } in
                                                         let { I# dt5 ~ dt4 <- ipv26 } in
                                                         let { (# ipv27, ipv28 #) ~ _
                                                         <- unsafeFreezeByteArray#
                                                              (ipv24 `cast` ...) ipv25
                                                         } in
                                                         (# ipv27 `cast` ...,
                                                            (ByteArray ipv28, lvl7, dt4) #))
                                                 } in
                                                 let { ByteArray dt5 ~ _ <- baLens } in
                                                 Vectors ww2 dt3 dt5 ipv22 #))
                                           `cast` ...)
                                        `cast` ...)
                                  } in
                                  let { UPVSegd ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ~ _ <- ipv4 } in
                                  let { Vector ipv27 ipv28 ipv29 ~ _ <- yarr } in
                                  let { Vector ww5 ww6 ww7 ~ _
                                  <- runSTRep
                                       (\ @ s s1 ->
                                          let { (# ipv30, ipv31 #) ~ _
                                          <- newArray# ipv28 (uninitialised) (s1 `cast` ...)
                                          } in
                                          letrec {
                                            $wa
                                            $wa =
                                              \ w10 ww4 ww5 w11 ->
                                                let { __DEFAULT ~ _ <- w10 } in
                                                case >=# ww5 ipv28 of _ {
                                                  False ->
                                                    let { (# ipv32 #) ~ _
                                                    <- indexArray# ipv29 (+# ipv27 ww5)
                                                    } in
                                                    $wa
                                                      SPEC
                                                      (+# ww4 1)
                                                      (+# ww5 1)
                                                      ((writeArray#
                                                          ipv31
                                                          ww4
                                                          (let { PNested ds3 ds4 segd ds5 ~ _
                                                           <- ipv32 `cast` ...
                                                           } in
                                                           let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8
                                                                        ds6 ~ _
                                                           <- segd
                                                           } in
                                                           (Vector dt dt3 dt4) `cast` ...)
                                                          (w11 `cast` ...))
                                                       `cast` ...);
                                                  True -> (# w11, I# ww4 #)
                                                }; } in
                                          let { (# ipv32, ipv33 #) ~ _
                                          <- $wa SPEC 0 0 (ipv30 `cast` ...)
                                          } in
                                          let { I# dt6 ~ _ <- ipv33 } in
                                          let { (# ipv34, ipv35 #) ~ _
                                          <- unsafeFreezeArray# ipv31 (ipv32 `cast` ...)
                                          } in
                                          (# ipv34 `cast` ..., Vector 0 dt6 ipv35 #))
                                  } in
                                  let { Vectors ipv30 ipv31 ipv32 ipv33 ~ _
                                  <- runSTRep
                                       ((\ @ s ->
                                           let { Vector ww9 ww10 ww11 ~ _
                                           <- runSTRep
                                                (\ @ s1 s2 ->
                                                   let { (# ipv30, ipv31 #) ~ _
                                                   <- newArray# ww6 (uninitialised) (s2 `cast` ...)
                                                   } in
                                                   letrec {
                                                     $wa
                                                     $wa =
                                                       \ w10 ww8 ww9 w11 ->
                                                         let { __DEFAULT ~ _ <- w10 } in
                                                         case >=# ww9 ww6 of _ {
                                                           False ->
                                                             $wa
                                                               SPEC
                                                               (+# ww8 1)
                                                               (+# ww9 1)
                                                               ((writeArray#
                                                                   ipv31
                                                                   ww8
                                                                   (runSTRep
                                                                      (\ @ s3 s4 ->
                                                                         let { (# ipv32 #) ~ _
                                                                         <- indexArray#
                                                                              ww7 (+# ww5 ww9)
                                                                         } in
                                                                         let { Vector ipv33 ipv34
                                                                                      ipv35 ~ _
                                                                         <- ipv32 `cast` ...
                                                                         } in
                                                                         let { (# ipv36, ipv37 #) ~ _
                                                                         <- newByteArray#
                                                                              (*# ipv34 8)
                                                                              (s4 `cast` ...)
                                                                         } in
                                                                         letrec {
                                                                           $wa1
                                                                           $wa1 =
                                                                             \ w12 ww10 ww11 w13 ->
                                                                               let { __DEFAULT ~ _
                                                                               <- w12
                                                                               } in
                                                                               case >=# ww11 ipv34
                                                                               of _ {
                                                                                 False ->
                                                                                   let { __DEFAULT ~ wild4
                                                                                   <- indexIntArray#
                                                                                        ipv35
                                                                                        (+#
                                                                                           ipv33
                                                                                           ww11)
                                                                                   } in
                                                                                   $wa1
                                                                                     SPEC
                                                                                     (+# ww10 1)
                                                                                     (+# ww11 1)
                                                                                     ((writeIntArray#
                                                                                         ipv37
                                                                                         ww10
                                                                                         wild4
                                                                                         (w13
                                                                                          `cast` ...))
                                                                                      `cast` ...);
                                                                                 True ->
                                                                                   (# w13,
                                                                                      I# ww10 #)
                                                                               }; } in
                                                                         let { (# ipv38, ipv39 #) ~ _
                                                                         <- $wa1
                                                                              SPEC
                                                                              0
                                                                              0
                                                                              (ipv36 `cast` ...)
                                                                         } in
                                                                         let { I# dt4 ~ dt3
                                                                         <- ipv39
                                                                         } in
                                                                         let { (# ipv40, ipv41 #) ~ _
                                                                         <- unsafeFreezeByteArray#
                                                                              (ipv37 `cast` ...)
                                                                              ipv38
                                                                         } in
                                                                         (# ipv40 `cast` ...,
                                                                            (ByteArray ipv41,
                                                                             lvl7,
                                                                             dt3) #)))
                                                                   (w11 `cast` ...))
                                                                `cast` ...);
                                                           True -> (# w11, I# ww8 #)
                                                         }; } in
                                                   let { (# ipv32, ipv33 #) ~ _
                                                   <- $wa SPEC 0 0 (ipv30 `cast` ...)
                                                   } in
                                                   let { I# dt6 ~ _ <- ipv33 } in
                                                   let { (# ipv34, ipv35 #) ~ _
                                                   <- unsafeFreezeArray# ipv31 (ipv32 `cast` ...)
                                                   } in
                                                   (# ipv34 `cast` ..., Vector 0 dt6 ipv35 #))
                                           } in
                                           (\ s1 ->
                                              let { (# ipv30, ipv31 #) ~ _
                                              <- newArrayArray# ww6 s1
                                              } in
                                              letrec {
                                                $wa
                                                $wa =
                                                  \ w10 ww12 ww13 ww14 w11 ->
                                                    let { __DEFAULT ~ _ <- w10 } in
                                                    case ww14 of _ {
                                                      Nothing ->
                                                        let { (x1, n1) ~ _ <- ww12 } in
                                                        let { I# x ~ _ <- n1 } in
                                                        case ># x 0 of _ {
                                                          False -> (# w11, () #);
                                                          True ->
                                                            $wa
                                                              SPEC
                                                              (let { I# x2 ~ _ <- x1 } in
                                                               I# (+# x2 1),
                                                               I# (-# x 1))
                                                              ww13
                                                              (Just x1)
                                                              w11
                                                        };
                                                      Just x ->
                                                        let { I# x1 ~ _ <- ww13 } in
                                                        case >=# x1 ww6 of _ {
                                                          False ->
                                                            let { I# i# ~ _ <- x } in
                                                            let { (ba, ds, ds2) ~ _
                                                            <- runSTRep
                                                                 (\ @ s2 s3 ->
                                                                    let { (# ipv32 #) ~ _
                                                                    <- indexArray# ww7 (+# ww5 x1)
                                                                    } in
                                                                    let { Vector ipv33 ipv34
                                                                                 ipv35 ~ _
                                                                    <- ipv32 `cast` ...
                                                                    } in
                                                                    let { (# ipv36, ipv37 #) ~ _
                                                                    <- newByteArray#
                                                                         (*# ipv34 8)
                                                                         (s3 `cast` ...)
                                                                    } in
                                                                    letrec {
                                                                      $wa1
                                                                      $wa1 =
                                                                        \ w12 ww15 ww16 w13 ->
                                                                          let { __DEFAULT ~ _
                                                                          <- w12
                                                                          } in
                                                                          case >=# ww16 ipv34 of _ {
                                                                            False ->
                                                                              let { __DEFAULT ~ wild7
                                                                              <- indexIntArray#
                                                                                   ipv35
                                                                                   (+# ipv33 ww16)
                                                                              } in
                                                                              $wa1
                                                                                SPEC
                                                                                (+# ww15 1)
                                                                                (+# ww16 1)
                                                                                ((writeIntArray#
                                                                                    ipv37
                                                                                    ww15
                                                                                    wild7
                                                                                    (w13
                                                                                     `cast` ...))
                                                                                 `cast` ...);
                                                                            True ->
                                                                              (# w13, I# ww15 #)
                                                                          }; } in
                                                                    let { (# ipv38, ipv39 #) ~ _
                                                                    <- $wa1
                                                                         SPEC 0 0 (ipv36 `cast` ...)
                                                                    } in
                                                                    let { I# dt4 ~ dt3 <- ipv39 } in
                                                                    let { (# ipv40, ipv41 #) ~ _
                                                                    <- unsafeFreezeByteArray#
                                                                         (ipv37 `cast` ...) ipv38
                                                                    } in
                                                                    (# ipv40 `cast` ...,
                                                                       (ByteArray ipv41,
                                                                        lvl7,
                                                                        dt3) #))
                                                            } in
                                                            let { ByteArray ba# ~ _ <- ba } in
                                                            let { __DEFAULT ~ s'#
                                                            <- writeByteArrayArray# ipv31 i# ba# w11
                                                            } in
                                                            $wa
                                                              SPEC
                                                              ww12
                                                              (I# (+# x1 1))
                                                              (Nothing)
                                                              s'#;
                                                          True -> (# w11, () #)
                                                        }
                                                    }; } in
                                              let { (# ipv32, ipv33 #) ~ _
                                              <- $wa SPEC (lvl7, I# ww6) lvl7 (Nothing) ipv30
                                              } in
                                              let { (# ipv34, ipv35 #) ~ _
                                              <- unsafeFreezeArrayArray# ipv31 ipv32
                                              } in
                                              (# ipv34,
                                                 let { (baStarts, ds3, ds4) ~ _
                                                 <- runSTRep
                                                      (\ @ s2 s3 ->
                                                         let { (# ipv36, ipv37 #) ~ _
                                                         <- newByteArray#
                                                              (*# ww10 8) (s3 `cast` ...)
                                                         } in
                                                         letrec {
                                                           $wa1
                                                           $wa1 =
                                                             \ w10 ww12 ww13 w11 ->
                                                               let { __DEFAULT ~ _ <- w10 } in
                                                               case >=# ww13 ww10 of _ {
                                                                 False ->
                                                                   let { (# ipv38 #) ~ _
                                                                   <- indexArray# ww11 (+# ww9 ww13)
                                                                   } in
                                                                   let { (a28, b1, c1) ~ _
                                                                   <- ipv38
                                                                   } in
                                                                   let { I# x# ~ _ <- b1 } in
                                                                   $wa1
                                                                     SPEC
                                                                     (+# ww12 1)
                                                                     (+# ww13 1)
                                                                     ((writeIntArray#
                                                                         ipv37
                                                                         ww12
                                                                         x#
                                                                         (w11 `cast` ...))
                                                                      `cast` ...);
                                                                 True -> (# w11, I# ww12 #)
                                                               }; } in
                                                         let { (# ipv38, ipv39 #) ~ _
                                                         <- $wa1 SPEC 0 0 (ipv36 `cast` ...)
                                                         } in
                                                         let { I# dt4 ~ dt3 <- ipv39 } in
                                                         let { (# ipv40, ipv41 #) ~ _
                                                         <- unsafeFreezeByteArray#
                                                              (ipv37 `cast` ...) ipv38
                                                         } in
                                                         (# ipv40 `cast` ...,
                                                            (ByteArray ipv41, lvl7, dt3) #))
                                                 } in
                                                 let { ByteArray dt3 ~ _ <- baStarts } in
                                                 let { (baLens, ds5, ds6) ~ _
                                                 <- runSTRep
                                                      (\ @ s2 s3 ->
                                                         let { (# ipv36, ipv37 #) ~ _
                                                         <- newByteArray#
                                                              (*# ww10 8) (s3 `cast` ...)
                                                         } in
                                                         letrec {
                                                           $wa1
                                                           $wa1 =
                                                             \ w10 ww12 ww13 w11 ->
                                                               let { __DEFAULT ~ _ <- w10 } in
                                                               case >=# ww13 ww10 of _ {
                                                                 False ->
                                                                   let { (# ipv38 #) ~ _
                                                                   <- indexArray# ww11 (+# ww9 ww13)
                                                                   } in
                                                                   let { (a28, b1, c1) ~ _
                                                                   <- ipv38
                                                                   } in
                                                                   let { I# x# ~ _ <- c1 } in
                                                                   $wa1
                                                                     SPEC
                                                                     (+# ww12 1)
                                                                     (+# ww13 1)
                                                                     ((writeIntArray#
                                                                         ipv37
                                                                         ww12
                                                                         x#
                                                                         (w11 `cast` ...))
                                                                      `cast` ...);
                                                                 True -> (# w11, I# ww12 #)
                                                               }; } in
                                                         let { (# ipv38, ipv39 #) ~ _
                                                         <- $wa1 SPEC 0 0 (ipv36 `cast` ...)
                                                         } in
                                                         let { I# dt5 ~ dt4 <- ipv39 } in
                                                         let { (# ipv40, ipv41 #) ~ _
                                                         <- unsafeFreezeByteArray#
                                                              (ipv37 `cast` ...) ipv38
                                                         } in
                                                         (# ipv40 `cast` ...,
                                                            (ByteArray ipv41, lvl7, dt4) #))
                                                 } in
                                                 let { ByteArray dt5 ~ _ <- baLens } in
                                                 Vectors ww6 dt3 dt5 ipv35 #))
                                           `cast` ...)
                                        `cast` ...)
                                  } in
                                  let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds1 ~ _ <- segd' } in
                                  let { DVector ipv34 ipv35 ipv36 ipv37 ipv38 ipv39 ~ nt2
                                  <- (imapD'
                                        lvl76
                                        $dDT1
                                        lvl77
                                        theGang
                                        (\ _ x ->
                                           let { (x1, y) ~ _ <- x } in
                                           let { (x2, y1) ~ _ <- x1 } in
                                           let { USegd dt9 dt10 dt11 dt14 dt15 dt16 dt17 ~ _
                                           <- x2
                                           } in
                                           let { I# ipv34 ~ _ <- y1 } in
                                           let { I# ipv35 ~ _ <- y } in
                                           let { UPSSegd dt18 dt19 dt20 dt21 dt22 dt23 dt24 dt25
                                                         dt26 dt27 ds2 ~ _
                                           <- ipv24
                                           } in
                                           let { Vector ipv36 ipv37 ipv38 ~ _
                                           <- dt20 `cast` ...
                                           } in
                                           let { Vector ipv39 ipv40 ipv41 ~ _
                                           <- dt19 `cast` ...
                                           } in
                                           let { UPSSegd dt28 dt29 dt30 dt31 dt32 dt33 dt34 dt35
                                                         dt36 dt37 ds3 ~ _
                                           <- ipv11
                                           } in
                                           let { Vector ipv42 ipv43 ipv44 ~ _
                                           <- dt30 `cast` ...
                                           } in
                                           let { Vector ipv45 ipv46 ipv47 ~ _
                                           <- dt29 `cast` ...
                                           } in
                                           let { Vector ipv48 ipv49 ipv50 ~ _
                                           <- ipv22 `cast` ...
                                           } in
                                           let { Vector ipv51 ipv52 ipv53 ~ _
                                           <- ipv9 `cast` ...
                                           } in
                                           runSTRep
                                             (\ @ s s1 ->
                                                let { (# ipv54, ipv55 #) ~ _
                                                <- newByteArray# (*# dt17 8) (s1 `cast` ...)
                                                } in
                                                letrec {
                                                  $wa
                                                  $wa =
                                                    \ w10
                                                      ww8
                                                      ww9
                                                      ww10
                                                      ww11
                                                      ww12
                                                      ww13
                                                      ww14
                                                      ww15
                                                      w11 ->
                                                      let { __DEFAULT ~ _ <- w10 } in
                                                      case ww13 of ds10 {
                                                        __DEFAULT ->
                                                          case ww9 of ds11 {
                                                            __DEFAULT ->
                                                              case ww12 of wild8 {
                                                                __DEFAULT ->
                                                                  let { __DEFAULT ~ wild9
                                                                  <- indexIntArray# ipv31 ww15
                                                                  } in
                                                                  let { __DEFAULT ~ wild10
                                                                  <- indexByteArrayArray# ipv33 ww15
                                                                  } in
                                                                  let { __DEFAULT ~ wild11
                                                                  <- indexIntArray#
                                                                       wild10
                                                                       (+# wild9 (+# ww14 ww11))
                                                                  } in
                                                                  $wa
                                                                    SPEC
                                                                    (+# ww8 1)
                                                                    ds11
                                                                    ww10
                                                                    (+# ww11 1)
                                                                    (-# wild8 1)
                                                                    (-# ds10 1)
                                                                    ww14
                                                                    ww15
                                                                    ((writeIntArray#
                                                                        ipv55
                                                                        ww8
                                                                        wild11
                                                                        (w11 `cast` ...))
                                                                     `cast` ...);
                                                                0 ->
                                                                  let {
                                                                    i1
                                                                    i1 = +# ww10 1 } in
                                                                  let { __DEFAULT ~ wild9
                                                                  <- indexIntArray#
                                                                       ipv53 (+# ipv51 i1)
                                                                  } in
                                                                  let { __DEFAULT ~ wild10
                                                                  <- indexIntArray#
                                                                       ipv44 (+# ipv42 wild9)
                                                                  } in
                                                                  let { __DEFAULT ~ wild11
                                                                  <- indexIntArray#
                                                                       ipv47 (+# ipv45 wild9)
                                                                  } in
                                                                  let { __DEFAULT ~ wild12
                                                                  <- indexIntArray#
                                                                       dt33 (+# dt31 wild9)
                                                                  } in
                                                                  $wa
                                                                    SPEC
                                                                    ww8
                                                                    0
                                                                    i1
                                                                    0
                                                                    wild12
                                                                    ds10
                                                                    wild11
                                                                    wild10
                                                                    w11
                                                              };
                                                            0 ->
                                                              case ww12 of wild8 {
                                                                __DEFAULT ->
                                                                  let { __DEFAULT ~ wild9
                                                                  <- indexIntArray# ipv18 ww15
                                                                  } in
                                                                  let { __DEFAULT ~ wild10
                                                                  <- indexByteArrayArray# ipv20 ww15
                                                                  } in
                                                                  let { __DEFAULT ~ wild11
                                                                  <- indexIntArray#
                                                                       wild10
                                                                       (+# wild9 (+# ww14 ww11))
                                                                  } in
                                                                  $wa
                                                                    SPEC
                                                                    (+# ww8 1)
                                                                    0
                                                                    ww10
                                                                    (+# ww11 1)
                                                                    (-# wild8 1)
                                                                    (-# ds10 1)
                                                                    ww14
                                                                    ww15
                                                                    ((writeIntArray#
                                                                        ipv55
                                                                        ww8
                                                                        wild11
                                                                        (w11 `cast` ...))
                                                                     `cast` ...);
                                                                0 ->
                                                                  let { __DEFAULT ~ wild9
                                                                  <- indexIntArray#
                                                                       ipv50 (+# ipv48 ww10)
                                                                  } in
                                                                  let { __DEFAULT ~ wild10
                                                                  <- indexIntArray#
                                                                       ipv38 (+# ipv36 wild9)
                                                                  } in
                                                                  let { __DEFAULT ~ wild11
                                                                  <- indexIntArray#
                                                                       ipv41 (+# ipv39 wild9)
                                                                  } in
                                                                  let { __DEFAULT ~ wild12
                                                                  <- indexIntArray#
                                                                       dt23 (+# dt21 wild9)
                                                                  } in
                                                                  $wa
                                                                    SPEC
                                                                    ww8
                                                                    1
                                                                    ww10
                                                                    0
                                                                    wild12
                                                                    ds10
                                                                    wild11
                                                                    wild10
                                                                    w11
                                                              }
                                                          };
                                                        0 -> (# w11, I# ww8 #)
                                                      }; } in
                                                case dt17 of wild8 {
                                                  __DEFAULT ->
                                                    let { __DEFAULT ~ wild9
                                                    <- indexIntArray# ipv53 (+# ipv51 ipv34)
                                                    } in
                                                    let { __DEFAULT ~ wild10
                                                    <- indexIntArray# dt33 (+# dt31 wild9)
                                                    } in
                                                    case <# ipv35 wild10 of _ {
                                                      False ->
                                                        let { __DEFAULT ~ wild12
                                                        <- indexIntArray# ipv50 (+# ipv48 ipv34)
                                                        } in
                                                        let { __DEFAULT ~ wild13
                                                        <- indexIntArray# ipv38 (+# ipv36 wild12)
                                                        } in
                                                        let { __DEFAULT ~ wild14
                                                        <- indexIntArray# ipv41 (+# ipv39 wild12)
                                                        } in
                                                        let {
                                                          i1
                                                          i1 = -# ipv35 wild10 } in
                                                        let { __DEFAULT ~ wild15
                                                        <- indexIntArray# dt23 (+# dt21 wild12)
                                                        } in
                                                        let { (# ipv56, ipv57 #) ~ _
                                                        <- $wa
                                                             SPEC
                                                             0
                                                             1
                                                             ipv34
                                                             i1
                                                             (-# wild15 i1)
                                                             wild8
                                                             wild14
                                                             wild13
                                                             (ipv54 `cast` ...)
                                                        } in
                                                        let { I# dt39 ~ _ <- ipv57 } in
                                                        let { (# ipv58, ipv59 #) ~ _
                                                        <- unsafeFreezeByteArray#
                                                             ipv55 (ipv56 `cast` ...)
                                                        } in
                                                        (# ipv58 `cast` ...,
                                                           (Vector 0 dt39 ipv59) `cast` ... #);
                                                      True ->
                                                        let { __DEFAULT ~ wild12
                                                        <- indexIntArray# ipv44 (+# ipv42 wild9)
                                                        } in
                                                        let { __DEFAULT ~ wild13
                                                        <- indexIntArray# ipv47 (+# ipv45 wild9)
                                                        } in
                                                        let { (# ipv56, ipv57 #) ~ _
                                                        <- $wa
                                                             SPEC
                                                             0
                                                             0
                                                             ipv34
                                                             ipv35
                                                             (-# wild10 ipv35)
                                                             wild8
                                                             wild13
                                                             wild12
                                                             (ipv54 `cast` ...)
                                                        } in
                                                        let { I# dt39 ~ _ <- ipv57 } in
                                                        let { (# ipv58, ipv59 #) ~ _
                                                        <- unsafeFreezeByteArray#
                                                             ipv55 (ipv56 `cast` ...)
                                                        } in
                                                        (# ipv58 `cast` ...,
                                                           (Vector 0 dt39 ipv59) `cast` ... #)
                                                    };
                                                  0 ->
                                                    let { (# ipv56, ipv57 #) ~ _
                                                    <- $wa SPEC 0 0 0 0 0 0 0 0 (ipv54 `cast` ...)
                                                    } in
                                                    let { I# dt39 ~ _ <- ipv57 } in
                                                    let { (# ipv58, ipv59 #) ~ _
                                                    <- unsafeFreezeByteArray#
                                                         ipv55 (ipv56 `cast` ...)
                                                    } in
                                                    (# ipv58 `cast` ...,
                                                       (Vector 0 dt39 ipv59) `cast` ... #)
                                                }))
                                        ds1)
                                     `cast` ...
                                  } in
                                  let { Vector dt10 dt11 dt14 ~ _
                                  <- (runSTRep
                                        (\ @ s s1 ->
                                           let { (di, n) ~ _
                                           <- scanD
                                                $fDTInt
                                                lvl75
                                                theGang
                                                $fNumInt_$c+
                                                lvl7
                                                ((DInt ipv34 ipv35 ipv36) `cast` ...)
                                           } in
                                           let { DInt ipv40 ipv41 ipv42 ~ nt3 <- di `cast` ... } in
                                           let { I# ipv43 ~ n1 <- n } in
                                           case >=# ipv43 0 of _ {
                                             False -> case lvl73 ipv43 of wild5 { };
                                             True ->
                                               let { (# ipv44, ipv45 #) ~ _
                                               <- newByteArray# (*# ipv43 8) (s1 `cast` ...)
                                               } in
                                               let { Gang ww9 ww10 ww11 ~ _ <- theGang } in
                                               let {
                                                 nt4
                                                 nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                                               let { (# ipv46, ipv47 #) ~ _
                                               <- ($wa1
                                                     ww9
                                                     ww10
                                                     ww11
                                                     (++
                                                        $fShowComp2
                                                        ($fShowComp_$cshowsPrec
                                                           $fShowComp7 (WJoinCopy n1) ([])))
                                                     (WorkCopy n1)
                                                     ((\ i s2 ->
                                                         let { (# ipv46, ipv47 #) ~ _
                                                         <- ((((myD lvl74 (nt4 `cast` ...))
                                                               `cast` ...)
                                                                i)
                                                             `cast` ...)
                                                              s2
                                                         } in
                                                         let { (x, y) ~ _ <- ipv47 } in
                                                         let { I# ipv48 ~ _ <- x } in
                                                         let { Vector ipv49 ipv50 ipv51 ~ _
                                                         <- y `cast` ...
                                                         } in
                                                         (# copyByteArray#
                                                              ipv51
                                                              (*# ipv49 8)
                                                              ipv45
                                                              (*# ipv48 8)
                                                              (*# ipv50 8)
                                                              (ipv46 `cast` ...),
                                                            () #)
                                                         `cast` ...)
                                                      `cast` ...)
                                                     (ipv44 `cast` ...))
                                                  `cast` ...
                                               } in
                                               let { (# ipv48, ipv49 #) ~ _
                                               <- unsafeFreezeByteArray# ipv45 (ipv46 `cast` ...)
                                               } in
                                               (# ipv48 `cast` ...,
                                                  (Vector 0 ipv43 ipv49) `cast` ... #)
                                           }))
                                     `cast` ...
                                  } in
                                  let { Gang dt15 ds2 ds3 ~ wild3 <- theGang } in
                                  let { __DEFAULT ~ wild4 <- quotInt# dt11 dt15 } in
                                  let { __DEFAULT ~ wild5 <- remInt# dt11 dt15 } in
                                  let { DProd dx dy ~ _
                                  <- (generateD
                                        lvl66
                                        lvl69
                                        wild3
                                        (\ i ->
                                           let {
                                             ys
                                             ys =
                                               let { I# x1 ~ _ <- i } in
                                               let {
                                                 $j
                                                 $j =
                                                   \ y ->
                                                     let {
                                                       $j1
                                                       $j1 =
                                                         \ dt16 ->
                                                           runSTRep
                                                             (\ @ s s1 ->
                                                                let { (# ipv40, ipv41 #) ~ _
                                                                <- newByteArray#
                                                                     (*# (+# 1 dt16) 8)
                                                                     (s1 `cast` ...)
                                                                } in
                                                                let {
                                                                  a11
                                                                  a11 = +# dt10 y } in
                                                                letrec {
                                                                  $wa
                                                                  $wa =
                                                                    \ w10 ww8 w11 w12 ->
                                                                      let { __DEFAULT ~ _
                                                                      <- w10
                                                                      } in
                                                                      case w11 of _ {
                                                                        Left sa1 ->
                                                                          case sa1 of _ {
                                                                            False ->
                                                                              $wa
                                                                                SPEC ww8 lvl70 w12;
                                                                            True ->
                                                                              $wa
                                                                                SPEC
                                                                                (+# ww8 1)
                                                                                lvl71
                                                                                ((writeIntArray#
                                                                                    ipv41
                                                                                    ww8
                                                                                    0
                                                                                    (w12
                                                                                     `cast` ...))
                                                                                 `cast` ...)
                                                                          };
                                                                        Right sb5 ->
                                                                          let { (s2, x) ~ _
                                                                          <- sb5
                                                                          } in
                                                                          let { I# x2 ~ _ <- s2 } in
                                                                          case >=# x2 dt16 of _ {
                                                                            False ->
                                                                              let { I# x3 ~ _
                                                                              <- x
                                                                              } in
                                                                              let { __DEFAULT ~ wild12
                                                                              <- indexIntArray#
                                                                                   dt14 (+# a11 x2)
                                                                              } in
                                                                              let {
                                                                                x#
                                                                                x# =
                                                                                  +# x3 wild12 } in
                                                                              $wa
                                                                                SPEC
                                                                                (+# ww8 1)
                                                                                (Right
                                                                                   (I# (+# x2 1),
                                                                                    I# x#))
                                                                                ((writeIntArray#
                                                                                    ipv41
                                                                                    ww8
                                                                                    x#
                                                                                    (w12
                                                                                     `cast` ...))
                                                                                 `cast` ...);
                                                                            True ->
                                                                              (# w12, I# ww8 #)
                                                                          }
                                                                      }; } in
                                                                let { (# ipv42, ipv43 #) ~ _
                                                                <- $wa
                                                                     SPEC 0 lvl72 (ipv40 `cast` ...)
                                                                } in
                                                                let { I# dt18 ~ _ <- ipv43 } in
                                                                let { (# ipv44, ipv45 #) ~ _
                                                                <- unsafeFreezeByteArray#
                                                                     ipv41 (ipv42 `cast` ...)
                                                                } in
                                                                (# ipv44 `cast` ...,
                                                                   (Vector 0 dt18 ipv45)
                                                                   `cast` ... #)) } in
                                                     case <# x1 wild5 of _ {
                                                       False -> $j1 wild4;
                                                       True -> $j1 (+# wild4 1)
                                                     } } in
                                               case <# x1 wild5 of _ {
                                                 False -> $j (+# (*# wild4 x1) wild5);
                                                 True -> $j (*# (+# wild4 1) x1)
                                               } } in
                                           (let { Vector dt16 dt17 dt18 ~ _ <- ys `cast` ... } in
                                            (Vector dt16 (-# dt17 1) dt18) `cast` ...,
                                            let { Vector dt16 dt17 dt18 ~ _ <- ys `cast` ... } in
                                            let { __DEFAULT ~ wild7
                                            <- indexIntArray# dt18 (+# dt16 (-# dt17 1))
                                            } in
                                            I# wild7)))
                                     `cast` ...
                                  } in
                                  let { (x1, ds4) ~ _
                                  <- scanD $fDTInt lvl65 wild3 $fNumInt_$c+ lvl7 dy
                                  } in
                                  let { DInt ipv40 ipv41 ipv42 ~ nt3 <- x1 `cast` ... } in
                                  let { DVector ipv43 ipv44 ipv45 ipv46 ipv47 ipv48 ~ nt4
                                  <- (imapD'
                                        lvl60
                                        $dDT5
                                        lvl62
                                        wild3
                                        lvl63
                                        ((DProd (nt3 `cast` ...) dx) `cast` ...))
                                     `cast` ...
                                  } in
                                  let { Vector dt17 dt18 dt19 ~ _
                                  <- (runSTRep
                                        (\ @ s s1 ->
                                           let { (di, n) ~ _
                                           <- scanD
                                                $fDTInt
                                                lvl59
                                                wild3
                                                $fNumInt_$c+
                                                lvl7
                                                ((DInt ipv43 ipv44 ipv45) `cast` ...)
                                           } in
                                           let { DInt ipv49 ipv50 ipv51 ~ nt5 <- di `cast` ... } in
                                           let { I# ipv52 ~ n1 <- n } in
                                           case >=# ipv52 0 of _ {
                                             False -> case lvl57 ipv52 of wild10 { };
                                             True ->
                                               let { (# ipv53, ipv54 #) ~ _
                                               <- newByteArray# (*# ipv52 8) (s1 `cast` ...)
                                               } in
                                               let {
                                                 nt6
                                                 nt6 = DProd (nt5 `cast` ...) (nt4 `cast` ...) } in
                                               let { (# ipv55, ipv56 #) ~ _
                                               <- ($wa1
                                                     dt15
                                                     ds2
                                                     ds3
                                                     (++
                                                        $fShowComp2
                                                        ($fShowComp_$cshowsPrec
                                                           $fShowComp7 (WJoinCopy n1) ([])))
                                                     (WorkCopy n1)
                                                     ((\ i s2 ->
                                                         let { (# ipv55, ipv56 #) ~ _
                                                         <- ((((myD lvl58 (nt6 `cast` ...))
                                                               `cast` ...)
                                                                i)
                                                             `cast` ...)
                                                              s2
                                                         } in
                                                         let { (x, y) ~ _ <- ipv56 } in
                                                         let { I# ipv57 ~ _ <- x } in
                                                         let { Vector ipv58 ipv59 ipv60 ~ _
                                                         <- y `cast` ...
                                                         } in
                                                         (# copyByteArray#
                                                              ipv60
                                                              (*# ipv58 8)
                                                              ipv54
                                                              (*# ipv57 8)
                                                              (*# ipv59 8)
                                                              (ipv55 `cast` ...),
                                                            () #)
                                                         `cast` ...)
                                                      `cast` ...)
                                                     (ipv53 `cast` ...))
                                                  `cast` ...
                                               } in
                                               let { (# ipv57, ipv58 #) ~ _
                                               <- unsafeFreezeByteArray# ipv54 (ipv55 `cast` ...)
                                               } in
                                               (# ipv57 `cast` ...,
                                                  (Vector 0 ipv52 ipv58) `cast` ... #)
                                           }))
                                     `cast` ...
                                  } in
                                  let { I# dt21 ~ _
                                  <- foldD
                                       $fDTInt
                                       lvl53
                                       wild3
                                       $fNumInt_$c+
                                       (generateD
                                          $fDTInt
                                          lvl56
                                          wild3
                                          ((\ i ->
                                              let { I# x2 ~ _ <- i } in
                                              let {
                                                $w$j4
                                                $w$j4 =
                                                  \ w10 ->
                                                    let {
                                                      $w$j5
                                                      $w$j5 =
                                                        \ w11 ->
                                                          let {
                                                            a11
                                                            a11 = +# dt10 w10 } in
                                                          letrec {
                                                            $wfoldlM'_loop
                                                            $wfoldlM'_loop =
                                                              \ w12 ww8 ww9 ->
                                                                let { __DEFAULT ~ _ <- w12 } in
                                                                case >=# ww9 w11 of _ {
                                                                  False ->
                                                                    let { __DEFAULT ~ wild10
                                                                    <- indexIntArray#
                                                                         dt14 (+# a11 ww9)
                                                                    } in
                                                                    $wfoldlM'_loop
                                                                      SPEC
                                                                      (+# ww8 wild10)
                                                                      (+# ww9 1);
                                                                  True -> ww8
                                                                }; } in
                                                          $wfoldlM'_loop SPEC 0 0 } in
                                                    case <# x2 wild5 of _ {
                                                      False -> $w$j5 wild4;
                                                      True -> $w$j5 (+# wild4 1)
                                                    } } in
                                              case <# x2 wild5 of _ {
                                                False ->
                                                  let { __DEFAULT ~ ww8
                                                  <- $w$j4 (+# (*# wild4 x2) wild5)
                                                  } in
                                                  (I# ww8) `cast` ...;
                                                True ->
                                                  let { __DEFAULT ~ ww8
                                                  <- $w$j4 (*# (+# wild4 1) x2)
                                                  } in
                                                  (I# ww8) `cast` ...
                                              })
                                           `cast` ...))
                                  } in
                                  UPSegd
                                    dt10
                                    dt11
                                    dt14
                                    dt17
                                    dt18
                                    dt19
                                    dt21
                                    (splitSegdOnElemsD
                                       wild3 (USegd dt10 dt11 dt14 dt17 dt18 dt19 dt21)) } in
                              let {
                                a19
                                a19 =
                                  let { UPSegd dt3 dt4 dt5 dt6 dt7 dt8 dt9 ds1 ~ _ <- segd'1 } in
                                  let {
                                    a18
                                    a18 =
                                      let { UPVSegd ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ~ _ <- w6 } in
                                      let { Vector ipv14 ipv15 ipv16 ~ _ <- xarr } in
                                      let { Vector ww1 ww2 ww3 ~ _
                                      <- runSTRep
                                           (\ @ s s1 ->
                                              let { (# ipv17, ipv18 #) ~ _
                                              <- newArray# ipv15 (uninitialised) (s1 `cast` ...)
                                              } in
                                              letrec {
                                                $wa
                                                $wa =
                                                  \ w10 ww ww1 w11 ->
                                                    let { __DEFAULT ~ _ <- w10 } in
                                                    case >=# ww1 ipv15 of _ {
                                                      False ->
                                                        let { (# ipv19 #) ~ _
                                                        <- indexArray# ipv16 (+# ipv14 ww1)
                                                        } in
                                                        $wa
                                                          SPEC
                                                          (+# ww 1)
                                                          (+# ww1 1)
                                                          ((writeArray#
                                                              ipv18
                                                              ww
                                                              (let { PNested ds4 ds5 ds6 ds7 ~ _
                                                               <- ipv19 `cast` ...
                                                               } in
                                                               let { UPVSegd ds8 ds9 ds10 ds11 ds12
                                                                             ds13 ~ _
                                                               <- ds4
                                                               } in
                                                               let { UPSSegd dt10 dt11 dt14 dt15
                                                                             dt16 dt17 dt18 dt19
                                                                             dt20 dt21 ds14 ~ _
                                                               <- ds12
                                                               } in
                                                               dt14)
                                                              (w11 `cast` ...))
                                                           `cast` ...);
                                                      True -> (# w11, I# ww #)
                                                    }; } in
                                              let { (# ipv19, ipv20 #) ~ _
                                              <- $wa SPEC 0 0 (ipv17 `cast` ...)
                                              } in
                                              let { I# dt11 ~ _ <- ipv20 } in
                                              let { (# ipv21, ipv22 #) ~ _
                                              <- unsafeFreezeArray# ipv18 (ipv19 `cast` ...)
                                              } in
                                              (# ipv21 `cast` ..., Vector 0 dt11 ipv22 #))
                                      } in
                                      let { Vectors dt dt10 dt11 dt14 ~ _
                                      <- runSTRep
                                           ((\ @ s ->
                                               let { Vector ww5 ww6 ww7 ~ _
                                               <- runSTRep
                                                    (\ @ s1 s2 ->
                                                       let { (# ipv17, ipv18 #) ~ _
                                                       <- newArray#
                                                            ww2 (uninitialised) (s2 `cast` ...)
                                                       } in
                                                       letrec {
                                                         $wa
                                                         $wa =
                                                           \ w10 ww4 ww5 w11 ->
                                                             let { __DEFAULT ~ _ <- w10 } in
                                                             case >=# ww5 ww2 of _ {
                                                               False ->
                                                                 $wa
                                                                   SPEC
                                                                   (+# ww4 1)
                                                                   (+# ww5 1)
                                                                   ((writeArray#
                                                                       ipv18
                                                                       ww4
                                                                       (runSTRep
                                                                          (\ @ s3 s4 ->
                                                                             let { (# ipv19 #) ~ _
                                                                             <- indexArray#
                                                                                  ww3 (+# ww1 ww5)
                                                                             } in
                                                                             let { Vector ipv20
                                                                                          ipv21
                                                                                          ipv22 ~ _
                                                                             <- ipv19 `cast` ...
                                                                             } in
                                                                             let { (# ipv23, ipv24 #) ~ _
                                                                             <- newByteArray#
                                                                                  (*# ipv21 8)
                                                                                  (s4 `cast` ...)
                                                                             } in
                                                                             letrec {
                                                                               $wa1
                                                                               $wa1 =
                                                                                 \ w12
                                                                                   ww6
                                                                                   ww7
                                                                                   w13 ->
                                                                                   let { __DEFAULT ~ _
                                                                                   <- w12
                                                                                   } in
                                                                                   case >=#
                                                                                          ww7 ipv21
                                                                                   of _ {
                                                                                     False ->
                                                                                       let { __DEFAULT ~ wild5
                                                                                       <- indexIntArray#
                                                                                            ipv22
                                                                                            (+#
                                                                                               ipv20
                                                                                               ww7)
                                                                                       } in
                                                                                       $wa1
                                                                                         SPEC
                                                                                         (+# ww6 1)
                                                                                         (+# ww7 1)
                                                                                         ((writeIntArray#
                                                                                             ipv24
                                                                                             ww6
                                                                                             wild5
                                                                                             (w13
                                                                                              `cast` ...))
                                                                                          `cast` ...);
                                                                                     True ->
                                                                                       (# w13,
                                                                                          I# ww6 #)
                                                                                   }; } in
                                                                             let { (# ipv25, ipv26 #) ~ _
                                                                             <- $wa1
                                                                                  SPEC
                                                                                  0
                                                                                  0
                                                                                  (ipv23 `cast` ...)
                                                                             } in
                                                                             let { I# dt11 ~ dt10
                                                                             <- ipv26
                                                                             } in
                                                                             let { (# ipv27, ipv28 #) ~ _
                                                                             <- unsafeFreezeByteArray#
                                                                                  (ipv24 `cast` ...)
                                                                                  ipv25
                                                                             } in
                                                                             (# ipv27 `cast` ...,
                                                                                (ByteArray ipv28,
                                                                                 lvl7,
                                                                                 dt10) #)))
                                                                       (w11 `cast` ...))
                                                                    `cast` ...);
                                                               True -> (# w11, I# ww4 #)
                                                             }; } in
                                                       let { (# ipv19, ipv20 #) ~ _
                                                       <- $wa SPEC 0 0 (ipv17 `cast` ...)
                                                       } in
                                                       let { I# dt11 ~ _ <- ipv20 } in
                                                       let { (# ipv21, ipv22 #) ~ _
                                                       <- unsafeFreezeArray#
                                                            ipv18 (ipv19 `cast` ...)
                                                       } in
                                                       (# ipv21 `cast` ..., Vector 0 dt11 ipv22 #))
                                               } in
                                               (\ s1 ->
                                                  let { (# ipv17, ipv18 #) ~ _
                                                  <- newArrayArray# ww2 s1
                                                  } in
                                                  letrec {
                                                    $wa
                                                    $wa =
                                                      \ w10 ww8 ww9 ww10 w11 ->
                                                        let { __DEFAULT ~ _ <- w10 } in
                                                        case ww10 of _ {
                                                          Nothing ->
                                                            let { (x1, n1) ~ _ <- ww8 } in
                                                            let { I# x ~ _ <- n1 } in
                                                            case ># x 0 of _ {
                                                              False -> (# w11, () #);
                                                              True ->
                                                                $wa
                                                                  SPEC
                                                                  (let { I# x2 ~ _ <- x1 } in
                                                                   I# (+# x2 1),
                                                                   I# (-# x 1))
                                                                  ww9
                                                                  (Just x1)
                                                                  w11
                                                            };
                                                          Just x ->
                                                            let { I# x1 ~ _ <- ww9 } in
                                                            case >=# x1 ww2 of _ {
                                                              False ->
                                                                let { I# i# ~ _ <- x } in
                                                                let { (ba, ds, ds3) ~ _
                                                                <- runSTRep
                                                                     (\ @ s2 s3 ->
                                                                        let { (# ipv19 #) ~ _
                                                                        <- indexArray#
                                                                             ww3 (+# ww1 x1)
                                                                        } in
                                                                        let { Vector ipv20 ipv21
                                                                                     ipv22 ~ _
                                                                        <- ipv19 `cast` ...
                                                                        } in
                                                                        let { (# ipv23, ipv24 #) ~ _
                                                                        <- newByteArray#
                                                                             (*# ipv21 8)
                                                                             (s3 `cast` ...)
                                                                        } in
                                                                        letrec {
                                                                          $wa1
                                                                          $wa1 =
                                                                            \ w12 ww11 ww12 w13 ->
                                                                              let { __DEFAULT ~ _
                                                                              <- w12
                                                                              } in
                                                                              case >=# ww12 ipv21
                                                                              of _ {
                                                                                False ->
                                                                                  let { __DEFAULT ~ wild8
                                                                                  <- indexIntArray#
                                                                                       ipv22
                                                                                       (+#
                                                                                          ipv20
                                                                                          ww12)
                                                                                  } in
                                                                                  $wa1
                                                                                    SPEC
                                                                                    (+# ww11 1)
                                                                                    (+# ww12 1)
                                                                                    ((writeIntArray#
                                                                                        ipv24
                                                                                        ww11
                                                                                        wild8
                                                                                        (w13
                                                                                         `cast` ...))
                                                                                     `cast` ...);
                                                                                True ->
                                                                                  (# w13, I# ww11 #)
                                                                              }; } in
                                                                        let { (# ipv25, ipv26 #) ~ _
                                                                        <- $wa1
                                                                             SPEC
                                                                             0
                                                                             0
                                                                             (ipv23 `cast` ...)
                                                                        } in
                                                                        let { I# dt11 ~ dt10
                                                                        <- ipv26
                                                                        } in
                                                                        let { (# ipv27, ipv28 #) ~ _
                                                                        <- unsafeFreezeByteArray#
                                                                             (ipv24 `cast` ...)
                                                                             ipv25
                                                                        } in
                                                                        (# ipv27 `cast` ...,
                                                                           (ByteArray ipv28,
                                                                            lvl7,
                                                                            dt10) #))
                                                                } in
                                                                let { ByteArray ba# ~ _ <- ba } in
                                                                let { __DEFAULT ~ s'#
                                                                <- writeByteArrayArray#
                                                                     ipv18 i# ba# w11
                                                                } in
                                                                $wa
                                                                  SPEC
                                                                  ww8
                                                                  (I# (+# x1 1))
                                                                  (Nothing)
                                                                  s'#;
                                                              True -> (# w11, () #)
                                                            }
                                                        }; } in
                                                  let { (# ipv19, ipv20 #) ~ _
                                                  <- $wa SPEC (lvl7, I# ww2) lvl7 (Nothing) ipv17
                                                  } in
                                                  let { (# ipv21, ipv22 #) ~ _
                                                  <- unsafeFreezeArrayArray# ipv18 ipv19
                                                  } in
                                                  (# ipv21,
                                                     let { (baStarts, ds4, ds5) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv23, ipv24 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww6 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww8 ww9 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww9 ww6 of _ {
                                                                     False ->
                                                                       let { (# ipv25 #) ~ _
                                                                       <- indexArray#
                                                                            ww7 (+# ww5 ww9)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv25
                                                                       } in
                                                                       let { I# x# ~ _ <- b1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww8 1)
                                                                         (+# ww9 1)
                                                                         ((writeIntArray#
                                                                             ipv24
                                                                             ww8
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww8 #)
                                                                   }; } in
                                                             let { (# ipv25, ipv26 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv23 `cast` ...)
                                                             } in
                                                             let { I# dt11 ~ dt10 <- ipv26 } in
                                                             let { (# ipv27, ipv28 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv24 `cast` ...) ipv25
                                                             } in
                                                             (# ipv27 `cast` ...,
                                                                (ByteArray ipv28, lvl7, dt10) #))
                                                     } in
                                                     let { ByteArray dt10 ~ _ <- baStarts } in
                                                     let { (baLens, ds6, ds7) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv23, ipv24 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww6 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww8 ww9 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww9 ww6 of _ {
                                                                     False ->
                                                                       let { (# ipv25 #) ~ _
                                                                       <- indexArray#
                                                                            ww7 (+# ww5 ww9)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv25
                                                                       } in
                                                                       let { I# x# ~ _ <- c1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww8 1)
                                                                         (+# ww9 1)
                                                                         ((writeIntArray#
                                                                             ipv24
                                                                             ww8
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww8 #)
                                                                   }; } in
                                                             let { (# ipv25, ipv26 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv23 `cast` ...)
                                                             } in
                                                             let { I# dt14 ~ dt11 <- ipv26 } in
                                                             let { (# ipv27, ipv28 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv24 `cast` ...) ipv25
                                                             } in
                                                             (# ipv27 `cast` ...,
                                                                (ByteArray ipv28, lvl7, dt11) #))
                                                     } in
                                                     let { ByteArray dt14 ~ _ <- baLens } in
                                                     Vectors ww2 dt10 dt14 ipv22 #))
                                               `cast` ...)
                                            `cast` ...)
                                      } in
                                      let { Vector ipv17 ipv18 ipv19 ~ _ <- xdata } in
                                      let { Vector ipv20 ipv21 ipv22 ~ _
                                      <- runSTRep
                                           (\ @ s s1 ->
                                              let { (# ipv20, ipv21 #) ~ _
                                              <- newArray# ipv18 (uninitialised) (s1 `cast` ...)
                                              } in
                                              letrec {
                                                $wa
                                                $wa =
                                                  \ w10 ww4 ww5 w11 ->
                                                    let { __DEFAULT ~ _ <- w10 } in
                                                    case >=# ww5 ipv18 of _ {
                                                      False ->
                                                        let { (# ipv22 #) ~ _
                                                        <- indexArray# ipv19 (+# ipv17 ww5)
                                                        } in
                                                        $wa
                                                          SPEC
                                                          (+# ww4 1)
                                                          (+# ww5 1)
                                                          ((writeArray#
                                                              ipv21
                                                              ww4
                                                              (let { Vector dt15 dt16 dt17 ~ _
                                                               <- ipv22
                                                               } in
                                                               I# dt16)
                                                              (w11 `cast` ...))
                                                           `cast` ...);
                                                      True -> (# w11, I# ww4 #)
                                                    }; } in
                                              let { (# ipv22, ipv23 #) ~ _
                                              <- $wa SPEC 0 0 (ipv20 `cast` ...)
                                              } in
                                              let { I# dt16 ~ _ <- ipv23 } in
                                              let { (# ipv24, ipv25 #) ~ _
                                              <- unsafeFreezeArray# ipv21 (ipv22 `cast` ...)
                                              } in
                                              (# ipv24 `cast` ..., Vector 0 dt16 ipv25 #))
                                      } in
                                      let { Vector ww5 ww6 ww7 ~ _
                                      <- runSTRep
                                           (\ @ s s1 ->
                                              let {
                                                $w$j4
                                                $w$j4 =
                                                  \ w10 ->
                                                    let {
                                                      $j
                                                      $j =
                                                        \ n# ->
                                                          let { (# ipv23, ipv24 #) ~ _
                                                          <- newArray#
                                                               n# (uninitialised) (s1 `cast` ...)
                                                          } in
                                                          letrec {
                                                            $wa
                                                            $wa =
                                                              \ w11 ww4 ww5 ww6 ww7 w12 ->
                                                                let { __DEFAULT ~ _ <- w11 } in
                                                                case ww7 of _ {
                                                                  Nothing ->
                                                                    let { (x1, n1) ~ _ <- ww5 } in
                                                                    let { I# x ~ _ <- n1 } in
                                                                    case ># x 0 of _ {
                                                                      False -> (# w12, I# ww4 #);
                                                                      True ->
                                                                        $wa
                                                                          SPEC
                                                                          ww4
                                                                          (let { I# x2 ~ _
                                                                           <- x1
                                                                           } in
                                                                           I# (+# x2 1),
                                                                           I# (-# x 1))
                                                                          ww6
                                                                          (Just
                                                                             (let { Vector ipv25
                                                                                           ipv26
                                                                                           ipv27 ~ _
                                                                              <- runSTRep
                                                                                   (\ @ s2 s3 ->
                                                                                      let { I# i# ~ _
                                                                                      <- x1
                                                                                      } in
                                                                                      let { __DEFAULT ~ wild9
                                                                                      <- indexByteArrayArray#
                                                                                           dt14 i#
                                                                                      } in
                                                                                      let { (# ipv25, ipv26 #) ~ _
                                                                                      <- unsafeFreezeByteArray#
                                                                                           (wild9
                                                                                            `cast` ...)
                                                                                           (s3
                                                                                            `cast` ...)
                                                                                      } in
                                                                                      let { __DEFAULT ~ wild10
                                                                                      <- indexIntArray#
                                                                                           dt10 i#
                                                                                      } in
                                                                                      let { __DEFAULT ~ wild11
                                                                                      <- indexIntArray#
                                                                                           dt11 i#
                                                                                      } in
                                                                                      (# ipv25
                                                                                         `cast` ...,
                                                                                         Vector
                                                                                           wild10
                                                                                           wild11
                                                                                           ipv26 #))
                                                                              } in
                                                                              runSTRep
                                                                                (\ @ s2 s3 ->
                                                                                   let { (# ipv28, ipv29 #) ~ _
                                                                                   <- newByteArray#
                                                                                        (*# ipv26 8)
                                                                                        (s3
                                                                                         `cast` ...)
                                                                                   } in
                                                                                   letrec {
                                                                                     $wa1
                                                                                     $wa1 =
                                                                                       \ w13
                                                                                         ww8
                                                                                         ww9
                                                                                         w14 ->
                                                                                         let { __DEFAULT ~ _
                                                                                         <- w13
                                                                                         } in
                                                                                         case >=#
                                                                                                ww9
                                                                                                ipv26
                                                                                         of _ {
                                                                                           False ->
                                                                                             let { __DEFAULT ~ wild9
                                                                                             <- indexIntArray#
                                                                                                  ipv27
                                                                                                  (+#
                                                                                                     ipv25
                                                                                                     ww9)
                                                                                             } in
                                                                                             $wa1
                                                                                               SPEC
                                                                                               (+#
                                                                                                  ww8
                                                                                                  1)
                                                                                               (+#
                                                                                                  ww9
                                                                                                  1)
                                                                                               ((writeIntArray#
                                                                                                   ipv29
                                                                                                   ww8
                                                                                                   wild9
                                                                                                   (w14
                                                                                                    `cast` ...))
                                                                                                `cast` ...);
                                                                                           True ->
                                                                                             (# w14,
                                                                                                I#
                                                                                                  ww8 #)
                                                                                         }; } in
                                                                                   let { (# ipv30, ipv31 #) ~ _
                                                                                   <- $wa1
                                                                                        SPEC
                                                                                        0
                                                                                        0
                                                                                        (ipv28
                                                                                         `cast` ...)
                                                                                   } in
                                                                                   let { I# dt16 ~ _
                                                                                   <- ipv31
                                                                                   } in
                                                                                   let { (# ipv32, ipv33 #) ~ _
                                                                                   <- unsafeFreezeByteArray#
                                                                                        ipv29
                                                                                        (ipv30
                                                                                         `cast` ...)
                                                                                   } in
                                                                                   (# ipv32
                                                                                      `cast` ...,
                                                                                      (Vector
                                                                                         0
                                                                                         dt16
                                                                                         ipv33)
                                                                                      `cast` ... #))))
                                                                          w12
                                                                    };
                                                                  Just x ->
                                                                    let { (s2, x1) ~ _ <- ww6 } in
                                                                    let { I# x2 ~ _ <- s2 } in
                                                                    case >=# x2 ipv21 of _ {
                                                                      False ->
                                                                        let { (# ipv25 #) ~ _
                                                                        <- indexArray#
                                                                             ipv22 (+# ipv20 x2)
                                                                        } in
                                                                        $wa
                                                                          SPEC
                                                                          (+# ww4 1)
                                                                          ww5
                                                                          (I# (+# x2 1),
                                                                           let { I# x3 ~ _
                                                                           <- x1
                                                                           } in
                                                                           let { I# y ~ _
                                                                           <- ipv25
                                                                           } in
                                                                           I# (+# x3 y))
                                                                          (Nothing)
                                                                          ((writeArray#
                                                                              ipv24
                                                                              ww4
                                                                              ($wgetsrc
                                                                                 $fNumInt
                                                                                 $fUnboxInt
                                                                                 x
                                                                                 x1)
                                                                              (w12 `cast` ...))
                                                                           `cast` ...);
                                                                      True -> (# w12, I# ww4 #)
                                                                    }
                                                                }; } in
                                                          let { (# ipv25, ipv26 #) ~ _
                                                          <- $wa
                                                               SPEC
                                                               0
                                                               (lvl7, I# dt)
                                                               lvl88
                                                               (Nothing)
                                                               (ipv23 `cast` ...)
                                                          } in
                                                          let { I# dt16 ~ _ <- ipv26 } in
                                                          let { (# ipv27, ipv28 #) ~ _
                                                          <- unsafeFreezeArray#
                                                               ipv24 (ipv25 `cast` ...)
                                                          } in
                                                          (# ipv27 `cast` ...,
                                                             Vector 0 dt16 ipv28 #) } in
                                                    case <=# w10 ipv21 of _ {
                                                      False -> $j ipv21;
                                                      True -> $j w10
                                                    } } in
                                              case <=# dt 0 of _ {
                                                False -> $w$j4 dt;
                                                True -> $w$j4 0
                                              })
                                      } in
                                      let { Vectors ipv23 ipv24 ipv25 ipv26 ~ _
                                      <- runSTRep
                                           ((\ @ s ->
                                               let { Vector ww9 ww10 ww11 ~ _
                                               <- runSTRep
                                                    (\ @ s1 s2 ->
                                                       let { (# ipv23, ipv24 #) ~ _
                                                       <- newArray#
                                                            ww6 (uninitialised) (s2 `cast` ...)
                                                       } in
                                                       letrec {
                                                         $wa
                                                         $wa =
                                                           \ w10 ww8 ww9 w11 ->
                                                             let { __DEFAULT ~ _ <- w10 } in
                                                             case >=# ww9 ww6 of _ {
                                                               False ->
                                                                 $wa
                                                                   SPEC
                                                                   (+# ww8 1)
                                                                   (+# ww9 1)
                                                                   ((writeArray#
                                                                       ipv24
                                                                       ww8
                                                                       (runSTRep
                                                                          (\ @ s3 s4 ->
                                                                             let { (# ipv25 #) ~ _
                                                                             <- indexArray#
                                                                                  ww7 (+# ww5 ww9)
                                                                             } in
                                                                             let { Vector ipv26
                                                                                          ipv27
                                                                                          ipv28 ~ _
                                                                             <- ipv25 `cast` ...
                                                                             } in
                                                                             let { (# ipv29, ipv30 #) ~ _
                                                                             <- newByteArray#
                                                                                  (*# ipv27 8)
                                                                                  (s4 `cast` ...)
                                                                             } in
                                                                             letrec {
                                                                               $wa1
                                                                               $wa1 =
                                                                                 \ w12
                                                                                   ww10
                                                                                   ww11
                                                                                   w13 ->
                                                                                   let { __DEFAULT ~ _
                                                                                   <- w12
                                                                                   } in
                                                                                   case >=#
                                                                                          ww11 ipv27
                                                                                   of _ {
                                                                                     False ->
                                                                                       let { __DEFAULT ~ wild6
                                                                                       <- indexIntArray#
                                                                                            ipv28
                                                                                            (+#
                                                                                               ipv26
                                                                                               ww11)
                                                                                       } in
                                                                                       $wa1
                                                                                         SPEC
                                                                                         (+# ww10 1)
                                                                                         (+# ww11 1)
                                                                                         ((writeIntArray#
                                                                                             ipv30
                                                                                             ww10
                                                                                             wild6
                                                                                             (w13
                                                                                              `cast` ...))
                                                                                          `cast` ...);
                                                                                     True ->
                                                                                       (# w13,
                                                                                          I# ww10 #)
                                                                                   }; } in
                                                                             let { (# ipv31, ipv32 #) ~ _
                                                                             <- $wa1
                                                                                  SPEC
                                                                                  0
                                                                                  0
                                                                                  (ipv29 `cast` ...)
                                                                             } in
                                                                             let { I# dt16 ~ dt15
                                                                             <- ipv32
                                                                             } in
                                                                             let { (# ipv33, ipv34 #) ~ _
                                                                             <- unsafeFreezeByteArray#
                                                                                  (ipv30 `cast` ...)
                                                                                  ipv31
                                                                             } in
                                                                             (# ipv33 `cast` ...,
                                                                                (ByteArray ipv34,
                                                                                 lvl7,
                                                                                 dt15) #)))
                                                                       (w11 `cast` ...))
                                                                    `cast` ...);
                                                               True -> (# w11, I# ww8 #)
                                                             }; } in
                                                       let { (# ipv25, ipv26 #) ~ _
                                                       <- $wa SPEC 0 0 (ipv23 `cast` ...)
                                                       } in
                                                       let { I# dt16 ~ _ <- ipv26 } in
                                                       let { (# ipv27, ipv28 #) ~ _
                                                       <- unsafeFreezeArray#
                                                            ipv24 (ipv25 `cast` ...)
                                                       } in
                                                       (# ipv27 `cast` ..., Vector 0 dt16 ipv28 #))
                                               } in
                                               (\ s1 ->
                                                  let { (# ipv23, ipv24 #) ~ _
                                                  <- newArrayArray# ww6 s1
                                                  } in
                                                  letrec {
                                                    $wa
                                                    $wa =
                                                      \ w10 ww12 ww13 ww14 w11 ->
                                                        let { __DEFAULT ~ _ <- w10 } in
                                                        case ww14 of _ {
                                                          Nothing ->
                                                            let { (x1, n1) ~ _ <- ww12 } in
                                                            let { I# x ~ _ <- n1 } in
                                                            case ># x 0 of _ {
                                                              False -> (# w11, () #);
                                                              True ->
                                                                $wa
                                                                  SPEC
                                                                  (let { I# x2 ~ _ <- x1 } in
                                                                   I# (+# x2 1),
                                                                   I# (-# x 1))
                                                                  ww13
                                                                  (Just x1)
                                                                  w11
                                                            };
                                                          Just x ->
                                                            let { I# x1 ~ _ <- ww13 } in
                                                            case >=# x1 ww6 of _ {
                                                              False ->
                                                                let { I# i# ~ _ <- x } in
                                                                let { (ba, ds, ds3) ~ _
                                                                <- runSTRep
                                                                     (\ @ s2 s3 ->
                                                                        let { (# ipv25 #) ~ _
                                                                        <- indexArray#
                                                                             ww7 (+# ww5 x1)
                                                                        } in
                                                                        let { Vector ipv26 ipv27
                                                                                     ipv28 ~ _
                                                                        <- ipv25 `cast` ...
                                                                        } in
                                                                        let { (# ipv29, ipv30 #) ~ _
                                                                        <- newByteArray#
                                                                             (*# ipv27 8)
                                                                             (s3 `cast` ...)
                                                                        } in
                                                                        letrec {
                                                                          $wa1
                                                                          $wa1 =
                                                                            \ w12 ww15 ww16 w13 ->
                                                                              let { __DEFAULT ~ _
                                                                              <- w12
                                                                              } in
                                                                              case >=# ww16 ipv27
                                                                              of _ {
                                                                                False ->
                                                                                  let { __DEFAULT ~ wild9
                                                                                  <- indexIntArray#
                                                                                       ipv28
                                                                                       (+#
                                                                                          ipv26
                                                                                          ww16)
                                                                                  } in
                                                                                  $wa1
                                                                                    SPEC
                                                                                    (+# ww15 1)
                                                                                    (+# ww16 1)
                                                                                    ((writeIntArray#
                                                                                        ipv30
                                                                                        ww15
                                                                                        wild9
                                                                                        (w13
                                                                                         `cast` ...))
                                                                                     `cast` ...);
                                                                                True ->
                                                                                  (# w13, I# ww15 #)
                                                                              }; } in
                                                                        let { (# ipv31, ipv32 #) ~ _
                                                                        <- $wa1
                                                                             SPEC
                                                                             0
                                                                             0
                                                                             (ipv29 `cast` ...)
                                                                        } in
                                                                        let { I# dt16 ~ dt15
                                                                        <- ipv32
                                                                        } in
                                                                        let { (# ipv33, ipv34 #) ~ _
                                                                        <- unsafeFreezeByteArray#
                                                                             (ipv30 `cast` ...)
                                                                             ipv31
                                                                        } in
                                                                        (# ipv33 `cast` ...,
                                                                           (ByteArray ipv34,
                                                                            lvl7,
                                                                            dt15) #))
                                                                } in
                                                                let { ByteArray ba# ~ _ <- ba } in
                                                                let { __DEFAULT ~ s'#
                                                                <- writeByteArrayArray#
                                                                     ipv24 i# ba# w11
                                                                } in
                                                                $wa
                                                                  SPEC
                                                                  ww12
                                                                  (I# (+# x1 1))
                                                                  (Nothing)
                                                                  s'#;
                                                              True -> (# w11, () #)
                                                            }
                                                        }; } in
                                                  let { (# ipv25, ipv26 #) ~ _
                                                  <- $wa SPEC (lvl7, I# ww6) lvl7 (Nothing) ipv23
                                                  } in
                                                  let { (# ipv27, ipv28 #) ~ _
                                                  <- unsafeFreezeArrayArray# ipv24 ipv25
                                                  } in
                                                  (# ipv27,
                                                     let { (baStarts, ds4, ds5) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv29, ipv30 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww10 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww12 ww13 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww13 ww10 of _ {
                                                                     False ->
                                                                       let { (# ipv31 #) ~ _
                                                                       <- indexArray#
                                                                            ww11 (+# ww9 ww13)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv31
                                                                       } in
                                                                       let { I# x# ~ _ <- b1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww12 1)
                                                                         (+# ww13 1)
                                                                         ((writeIntArray#
                                                                             ipv30
                                                                             ww12
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww12 #)
                                                                   }; } in
                                                             let { (# ipv31, ipv32 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv29 `cast` ...)
                                                             } in
                                                             let { I# dt16 ~ dt15 <- ipv32 } in
                                                             let { (# ipv33, ipv34 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv30 `cast` ...) ipv31
                                                             } in
                                                             (# ipv33 `cast` ...,
                                                                (ByteArray ipv34, lvl7, dt15) #))
                                                     } in
                                                     let { ByteArray dt16 ~ _ <- baStarts } in
                                                     let { (baLens, ds6, ds7) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv29, ipv30 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww10 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww12 ww13 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww13 ww10 of _ {
                                                                     False ->
                                                                       let { (# ipv31 #) ~ _
                                                                       <- indexArray#
                                                                            ww11 (+# ww9 ww13)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv31
                                                                       } in
                                                                       let { I# x# ~ _ <- c1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww12 1)
                                                                         (+# ww13 1)
                                                                         ((writeIntArray#
                                                                             ipv30
                                                                             ww12
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww12 #)
                                                                   }; } in
                                                             let { (# ipv31, ipv32 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv29 `cast` ...)
                                                             } in
                                                             let { I# dt18 ~ dt17 <- ipv32 } in
                                                             let { (# ipv33, ipv34 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv30 `cast` ...) ipv31
                                                             } in
                                                             (# ipv33 `cast` ...,
                                                                (ByteArray ipv34, lvl7, dt17) #))
                                                     } in
                                                     let { ByteArray dt18 ~ _ <- baLens } in
                                                     Vectors ww6 dt16 dt18 ipv28 #))
                                               `cast` ...)
                                            `cast` ...)
                                      } in
                                      let { UPVSegd ipv27 ipv28 ipv29 ipv30 ipv31 ipv32 ~ _
                                      <- ipv4
                                      } in
                                      let { Vector ipv33 ipv34 ipv35 ~ _ <- yarr } in
                                      let { Vector ww9 ww10 ww11 ~ _
                                      <- runSTRep
                                           (\ @ s s1 ->
                                              let { (# ipv36, ipv37 #) ~ _
                                              <- newArray# ipv34 (uninitialised) (s1 `cast` ...)
                                              } in
                                              letrec {
                                                $wa
                                                $wa =
                                                  \ w10 ww8 ww9 w11 ->
                                                    let { __DEFAULT ~ _ <- w10 } in
                                                    case >=# ww9 ipv34 of _ {
                                                      False ->
                                                        let { (# ipv38 #) ~ _
                                                        <- indexArray# ipv35 (+# ipv33 ww9)
                                                        } in
                                                        $wa
                                                          SPEC
                                                          (+# ww8 1)
                                                          (+# ww9 1)
                                                          ((writeArray#
                                                              ipv37
                                                              ww8
                                                              (let { PNested ds4 ds5 ds6 ds7 ~ _
                                                               <- ipv38 `cast` ...
                                                               } in
                                                               let { UPVSegd ds8 ds9 ds10 ds11 ds12
                                                                             ds13 ~ _
                                                               <- ds4
                                                               } in
                                                               let { UPSSegd dt15 dt16 dt17 dt18
                                                                             dt19 dt20 dt21 dt22
                                                                             dt23 dt24 ds14 ~ _
                                                               <- ds12
                                                               } in
                                                               dt17)
                                                              (w11 `cast` ...))
                                                           `cast` ...);
                                                      True -> (# w11, I# ww8 #)
                                                    }; } in
                                              let { (# ipv38, ipv39 #) ~ _
                                              <- $wa SPEC 0 0 (ipv36 `cast` ...)
                                              } in
                                              let { I# dt16 ~ _ <- ipv39 } in
                                              let { (# ipv40, ipv41 #) ~ _
                                              <- unsafeFreezeArray# ipv37 (ipv38 `cast` ...)
                                              } in
                                              (# ipv40 `cast` ..., Vector 0 dt16 ipv41 #))
                                      } in
                                      let { Vectors dt15 dt16 dt17 dt18 ~ _
                                      <- runSTRep
                                           ((\ @ s ->
                                               let { Vector ww13 ww14 ww15 ~ _
                                               <- runSTRep
                                                    (\ @ s1 s2 ->
                                                       let { (# ipv36, ipv37 #) ~ _
                                                       <- newArray#
                                                            ww10 (uninitialised) (s2 `cast` ...)
                                                       } in
                                                       letrec {
                                                         $wa
                                                         $wa =
                                                           \ w10 ww12 ww13 w11 ->
                                                             let { __DEFAULT ~ _ <- w10 } in
                                                             case >=# ww13 ww10 of _ {
                                                               False ->
                                                                 $wa
                                                                   SPEC
                                                                   (+# ww12 1)
                                                                   (+# ww13 1)
                                                                   ((writeArray#
                                                                       ipv37
                                                                       ww12
                                                                       (runSTRep
                                                                          (\ @ s3 s4 ->
                                                                             let { (# ipv38 #) ~ _
                                                                             <- indexArray#
                                                                                  ww11 (+# ww9 ww13)
                                                                             } in
                                                                             let { Vector ipv39
                                                                                          ipv40
                                                                                          ipv41 ~ _
                                                                             <- ipv38 `cast` ...
                                                                             } in
                                                                             let { (# ipv42, ipv43 #) ~ _
                                                                             <- newByteArray#
                                                                                  (*# ipv40 8)
                                                                                  (s4 `cast` ...)
                                                                             } in
                                                                             letrec {
                                                                               $wa1
                                                                               $wa1 =
                                                                                 \ w12
                                                                                   ww14
                                                                                   ww15
                                                                                   w13 ->
                                                                                   let { __DEFAULT ~ _
                                                                                   <- w12
                                                                                   } in
                                                                                   case >=#
                                                                                          ww15 ipv40
                                                                                   of _ {
                                                                                     False ->
                                                                                       let { __DEFAULT ~ wild6
                                                                                       <- indexIntArray#
                                                                                            ipv41
                                                                                            (+#
                                                                                               ipv39
                                                                                               ww15)
                                                                                       } in
                                                                                       $wa1
                                                                                         SPEC
                                                                                         (+# ww14 1)
                                                                                         (+# ww15 1)
                                                                                         ((writeIntArray#
                                                                                             ipv43
                                                                                             ww14
                                                                                             wild6
                                                                                             (w13
                                                                                              `cast` ...))
                                                                                          `cast` ...);
                                                                                     True ->
                                                                                       (# w13,
                                                                                          I# ww14 #)
                                                                                   }; } in
                                                                             let { (# ipv44, ipv45 #) ~ _
                                                                             <- $wa1
                                                                                  SPEC
                                                                                  0
                                                                                  0
                                                                                  (ipv42 `cast` ...)
                                                                             } in
                                                                             let { I# dt16 ~ dt15
                                                                             <- ipv45
                                                                             } in
                                                                             let { (# ipv46, ipv47 #) ~ _
                                                                             <- unsafeFreezeByteArray#
                                                                                  (ipv43 `cast` ...)
                                                                                  ipv44
                                                                             } in
                                                                             (# ipv46 `cast` ...,
                                                                                (ByteArray ipv47,
                                                                                 lvl7,
                                                                                 dt15) #)))
                                                                       (w11 `cast` ...))
                                                                    `cast` ...);
                                                               True -> (# w11, I# ww12 #)
                                                             }; } in
                                                       let { (# ipv38, ipv39 #) ~ _
                                                       <- $wa SPEC 0 0 (ipv36 `cast` ...)
                                                       } in
                                                       let { I# dt16 ~ _ <- ipv39 } in
                                                       let { (# ipv40, ipv41 #) ~ _
                                                       <- unsafeFreezeArray#
                                                            ipv37 (ipv38 `cast` ...)
                                                       } in
                                                       (# ipv40 `cast` ..., Vector 0 dt16 ipv41 #))
                                               } in
                                               (\ s1 ->
                                                  let { (# ipv36, ipv37 #) ~ _
                                                  <- newArrayArray# ww10 s1
                                                  } in
                                                  letrec {
                                                    $wa
                                                    $wa =
                                                      \ w10 ww16 ww17 ww18 w11 ->
                                                        let { __DEFAULT ~ _ <- w10 } in
                                                        case ww18 of _ {
                                                          Nothing ->
                                                            let { (x1, n1) ~ _ <- ww16 } in
                                                            let { I# x ~ _ <- n1 } in
                                                            case ># x 0 of _ {
                                                              False -> (# w11, () #);
                                                              True ->
                                                                $wa
                                                                  SPEC
                                                                  (let { I# x2 ~ _ <- x1 } in
                                                                   I# (+# x2 1),
                                                                   I# (-# x 1))
                                                                  ww17
                                                                  (Just x1)
                                                                  w11
                                                            };
                                                          Just x ->
                                                            let { I# x1 ~ _ <- ww17 } in
                                                            case >=# x1 ww10 of _ {
                                                              False ->
                                                                let { I# i# ~ _ <- x } in
                                                                let { (ba, ds, ds3) ~ _
                                                                <- runSTRep
                                                                     (\ @ s2 s3 ->
                                                                        let { (# ipv38 #) ~ _
                                                                        <- indexArray#
                                                                             ww11 (+# ww9 x1)
                                                                        } in
                                                                        let { Vector ipv39 ipv40
                                                                                     ipv41 ~ _
                                                                        <- ipv38 `cast` ...
                                                                        } in
                                                                        let { (# ipv42, ipv43 #) ~ _
                                                                        <- newByteArray#
                                                                             (*# ipv40 8)
                                                                             (s3 `cast` ...)
                                                                        } in
                                                                        letrec {
                                                                          $wa1
                                                                          $wa1 =
                                                                            \ w12 ww19 ww20 w13 ->
                                                                              let { __DEFAULT ~ _
                                                                              <- w12
                                                                              } in
                                                                              case >=# ww20 ipv40
                                                                              of _ {
                                                                                False ->
                                                                                  let { __DEFAULT ~ wild9
                                                                                  <- indexIntArray#
                                                                                       ipv41
                                                                                       (+#
                                                                                          ipv39
                                                                                          ww20)
                                                                                  } in
                                                                                  $wa1
                                                                                    SPEC
                                                                                    (+# ww19 1)
                                                                                    (+# ww20 1)
                                                                                    ((writeIntArray#
                                                                                        ipv43
                                                                                        ww19
                                                                                        wild9
                                                                                        (w13
                                                                                         `cast` ...))
                                                                                     `cast` ...);
                                                                                True ->
                                                                                  (# w13, I# ww19 #)
                                                                              }; } in
                                                                        let { (# ipv44, ipv45 #) ~ _
                                                                        <- $wa1
                                                                             SPEC
                                                                             0
                                                                             0
                                                                             (ipv42 `cast` ...)
                                                                        } in
                                                                        let { I# dt16 ~ dt15
                                                                        <- ipv45
                                                                        } in
                                                                        let { (# ipv46, ipv47 #) ~ _
                                                                        <- unsafeFreezeByteArray#
                                                                             (ipv43 `cast` ...)
                                                                             ipv44
                                                                        } in
                                                                        (# ipv46 `cast` ...,
                                                                           (ByteArray ipv47,
                                                                            lvl7,
                                                                            dt15) #))
                                                                } in
                                                                let { ByteArray ba# ~ _ <- ba } in
                                                                let { __DEFAULT ~ s'#
                                                                <- writeByteArrayArray#
                                                                     ipv37 i# ba# w11
                                                                } in
                                                                $wa
                                                                  SPEC
                                                                  ww16
                                                                  (I# (+# x1 1))
                                                                  (Nothing)
                                                                  s'#;
                                                              True -> (# w11, () #)
                                                            }
                                                        }; } in
                                                  let { (# ipv38, ipv39 #) ~ _
                                                  <- $wa SPEC (lvl7, I# ww10) lvl7 (Nothing) ipv36
                                                  } in
                                                  let { (# ipv40, ipv41 #) ~ _
                                                  <- unsafeFreezeArrayArray# ipv37 ipv38
                                                  } in
                                                  (# ipv40,
                                                     let { (baStarts, ds4, ds5) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv42, ipv43 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww14 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww16 ww17 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww17 ww14 of _ {
                                                                     False ->
                                                                       let { (# ipv44 #) ~ _
                                                                       <- indexArray#
                                                                            ww15 (+# ww13 ww17)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv44
                                                                       } in
                                                                       let { I# x# ~ _ <- b1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww16 1)
                                                                         (+# ww17 1)
                                                                         ((writeIntArray#
                                                                             ipv43
                                                                             ww16
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww16 #)
                                                                   }; } in
                                                             let { (# ipv44, ipv45 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv42 `cast` ...)
                                                             } in
                                                             let { I# dt16 ~ dt15 <- ipv45 } in
                                                             let { (# ipv46, ipv47 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv43 `cast` ...) ipv44
                                                             } in
                                                             (# ipv46 `cast` ...,
                                                                (ByteArray ipv47, lvl7, dt15) #))
                                                     } in
                                                     let { ByteArray dt16 ~ _ <- baStarts } in
                                                     let { (baLens, ds6, ds7) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv42, ipv43 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww14 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww16 ww17 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww17 ww14 of _ {
                                                                     False ->
                                                                       let { (# ipv44 #) ~ _
                                                                       <- indexArray#
                                                                            ww15 (+# ww13 ww17)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv44
                                                                       } in
                                                                       let { I# x# ~ _ <- c1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww16 1)
                                                                         (+# ww17 1)
                                                                         ((writeIntArray#
                                                                             ipv43
                                                                             ww16
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww16 #)
                                                                   }; } in
                                                             let { (# ipv44, ipv45 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv42 `cast` ...)
                                                             } in
                                                             let { I# dt18 ~ dt17 <- ipv45 } in
                                                             let { (# ipv46, ipv47 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv43 `cast` ...) ipv44
                                                             } in
                                                             (# ipv46 `cast` ...,
                                                                (ByteArray ipv47, lvl7, dt17) #))
                                                     } in
                                                     let { ByteArray dt18 ~ _ <- baLens } in
                                                     Vectors ww10 dt16 dt18 ipv41 #))
                                               `cast` ...)
                                            `cast` ...)
                                      } in
                                      let { Vector ipv36 ipv37 ipv38 ~ _ <- ydata } in
                                      let { Vector ww13 ww14 ww15 ~ _
                                      <- runSTRep
                                           (\ @ s s1 ->
                                              let {
                                                $w$j4
                                                $w$j4 =
                                                  \ w10 ->
                                                    let {
                                                      $j
                                                      $j =
                                                        \ n# ->
                                                          let { (# ipv39, ipv40 #) ~ _
                                                          <- newArray#
                                                               n# (uninitialised) (s1 `cast` ...)
                                                          } in
                                                          letrec {
                                                            $wa
                                                            $wa =
                                                              \ w11 ww12 ww13 ww14 ww15 w12 ->
                                                                let { __DEFAULT ~ _ <- w11 } in
                                                                case ww15 of _ {
                                                                  Nothing ->
                                                                    let { (x1, n1) ~ _ <- ww13 } in
                                                                    let { I# x ~ _ <- n1 } in
                                                                    case ># x 0 of _ {
                                                                      False -> (# w12, I# ww12 #);
                                                                      True ->
                                                                        $wa
                                                                          SPEC
                                                                          ww12
                                                                          (let { I# x2 ~ _
                                                                           <- x1
                                                                           } in
                                                                           I# (+# x2 1),
                                                                           I# (-# x 1))
                                                                          ww14
                                                                          (Just
                                                                             (let { Vector ipv41
                                                                                           ipv42
                                                                                           ipv43 ~ _
                                                                              <- runSTRep
                                                                                   (\ @ s2 s3 ->
                                                                                      let { I# i# ~ _
                                                                                      <- x1
                                                                                      } in
                                                                                      let { __DEFAULT ~ wild10
                                                                                      <- indexByteArrayArray#
                                                                                           dt18 i#
                                                                                      } in
                                                                                      let { (# ipv41, ipv42 #) ~ _
                                                                                      <- unsafeFreezeByteArray#
                                                                                           (wild10
                                                                                            `cast` ...)
                                                                                           (s3
                                                                                            `cast` ...)
                                                                                      } in
                                                                                      let { __DEFAULT ~ wild11
                                                                                      <- indexIntArray#
                                                                                           dt16 i#
                                                                                      } in
                                                                                      let { __DEFAULT ~ wild12
                                                                                      <- indexIntArray#
                                                                                           dt17 i#
                                                                                      } in
                                                                                      (# ipv41
                                                                                         `cast` ...,
                                                                                         Vector
                                                                                           wild11
                                                                                           wild12
                                                                                           ipv42 #))
                                                                              } in
                                                                              runSTRep
                                                                                (\ @ s2 s3 ->
                                                                                   let { (# ipv44, ipv45 #) ~ _
                                                                                   <- newByteArray#
                                                                                        (*# ipv42 8)
                                                                                        (s3
                                                                                         `cast` ...)
                                                                                   } in
                                                                                   letrec {
                                                                                     $wa1
                                                                                     $wa1 =
                                                                                       \ w13
                                                                                         ww16
                                                                                         ww17
                                                                                         w14 ->
                                                                                         let { __DEFAULT ~ _
                                                                                         <- w13
                                                                                         } in
                                                                                         case >=#
                                                                                                ww17
                                                                                                ipv42
                                                                                         of _ {
                                                                                           False ->
                                                                                             let { __DEFAULT ~ wild10
                                                                                             <- indexIntArray#
                                                                                                  ipv43
                                                                                                  (+#
                                                                                                     ipv41
                                                                                                     ww17)
                                                                                             } in
                                                                                             $wa1
                                                                                               SPEC
                                                                                               (+#
                                                                                                  ww16
                                                                                                  1)
                                                                                               (+#
                                                                                                  ww17
                                                                                                  1)
                                                                                               ((writeIntArray#
                                                                                                   ipv45
                                                                                                   ww16
                                                                                                   wild10
                                                                                                   (w14
                                                                                                    `cast` ...))
                                                                                                `cast` ...);
                                                                                           True ->
                                                                                             (# w14,
                                                                                                I#
                                                                                                  ww16 #)
                                                                                         }; } in
                                                                                   let { (# ipv46, ipv47 #) ~ _
                                                                                   <- $wa1
                                                                                        SPEC
                                                                                        0
                                                                                        0
                                                                                        (ipv44
                                                                                         `cast` ...)
                                                                                   } in
                                                                                   let { I# dt20 ~ _
                                                                                   <- ipv47
                                                                                   } in
                                                                                   let { (# ipv48, ipv49 #) ~ _
                                                                                   <- unsafeFreezeByteArray#
                                                                                        ipv45
                                                                                        (ipv46
                                                                                         `cast` ...)
                                                                                   } in
                                                                                   (# ipv48
                                                                                      `cast` ...,
                                                                                      (Vector
                                                                                         0
                                                                                         dt20
                                                                                         ipv49)
                                                                                      `cast` ... #))))
                                                                          w12
                                                                    };
                                                                  Just x ->
                                                                    let { (s2, x1) ~ _ <- ww14 } in
                                                                    let { I# x2 ~ _ <- s2 } in
                                                                    case >=# x2 ipv37 of _ {
                                                                      False ->
                                                                        let { (# ipv41 #) ~ _
                                                                        <- indexArray#
                                                                             ipv38 (+# ipv36 x2)
                                                                        } in
                                                                        $wa
                                                                          SPEC
                                                                          (+# ww12 1)
                                                                          ww13
                                                                          (I# (+# x2 1),
                                                                           let { I# x3 ~ _
                                                                           <- x1
                                                                           } in
                                                                           let { Vector dt19 dt20
                                                                                        dt21 ~ _
                                                                           <- ipv41
                                                                           } in
                                                                           I# (+# x3 dt20))
                                                                          (Nothing)
                                                                          ((writeArray#
                                                                              ipv40
                                                                              ww12
                                                                              ($wgetsrc
                                                                                 $fNumInt
                                                                                 $fUnboxInt
                                                                                 x
                                                                                 x1)
                                                                              (w12 `cast` ...))
                                                                           `cast` ...);
                                                                      True -> (# w12, I# ww12 #)
                                                                    }
                                                                }; } in
                                                          let { (# ipv41, ipv42 #) ~ _
                                                          <- $wa
                                                               SPEC
                                                               0
                                                               (lvl7, I# dt15)
                                                               (lvl7,
                                                                letrec {
                                                                  $wfoldlM'_loop
                                                                  $wfoldlM'_loop =
                                                                    \ w11 ww12 ww13 ->
                                                                      let { __DEFAULT ~ _
                                                                      <- w11
                                                                      } in
                                                                      case >=# ww13 ipv21 of _ {
                                                                        False ->
                                                                          let { (# ipv41 #) ~ _
                                                                          <- indexArray#
                                                                               ipv22 (+# ipv20 ww13)
                                                                          } in
                                                                          let { I# y ~ _
                                                                          <- ipv41
                                                                          } in
                                                                          $wfoldlM'_loop
                                                                            SPEC
                                                                            (+# ww12 y)
                                                                            (+# ww13 1);
                                                                        True -> ww12
                                                                      }; } in
                                                                let { __DEFAULT ~ ww12
                                                                <- $wfoldlM'_loop SPEC 0 0
                                                                } in
                                                                I# ww12)
                                                               (Nothing)
                                                               (ipv39 `cast` ...)
                                                          } in
                                                          let { I# dt20 ~ _ <- ipv42 } in
                                                          let { (# ipv43, ipv44 #) ~ _
                                                          <- unsafeFreezeArray#
                                                               ipv40 (ipv41 `cast` ...)
                                                          } in
                                                          (# ipv43 `cast` ...,
                                                             Vector 0 dt20 ipv44 #) } in
                                                    case <=# w10 ipv37 of _ {
                                                      False -> $j ipv37;
                                                      True -> $j w10
                                                    } } in
                                              case <=# dt15 0 of _ {
                                                False -> $w$j4 dt15;
                                                True -> $w$j4 0
                                              })
                                      } in
                                      let { Vectors ipv39 ipv40 ipv41 ipv42 ~ _
                                      <- runSTRep
                                           ((\ @ s ->
                                               let { Vector ww17 ww18 ww19 ~ _
                                               <- runSTRep
                                                    (\ @ s1 s2 ->
                                                       let { (# ipv39, ipv40 #) ~ _
                                                       <- newArray#
                                                            ww14 (uninitialised) (s2 `cast` ...)
                                                       } in
                                                       letrec {
                                                         $wa
                                                         $wa =
                                                           \ w10 ww16 ww17 w11 ->
                                                             let { __DEFAULT ~ _ <- w10 } in
                                                             case >=# ww17 ww14 of _ {
                                                               False ->
                                                                 $wa
                                                                   SPEC
                                                                   (+# ww16 1)
                                                                   (+# ww17 1)
                                                                   ((writeArray#
                                                                       ipv40
                                                                       ww16
                                                                       (runSTRep
                                                                          (\ @ s3 s4 ->
                                                                             let { (# ipv41 #) ~ _
                                                                             <- indexArray#
                                                                                  ww15
                                                                                  (+# ww13 ww17)
                                                                             } in
                                                                             let { Vector ipv42
                                                                                          ipv43
                                                                                          ipv44 ~ _
                                                                             <- ipv41 `cast` ...
                                                                             } in
                                                                             let { (# ipv45, ipv46 #) ~ _
                                                                             <- newByteArray#
                                                                                  (*# ipv43 8)
                                                                                  (s4 `cast` ...)
                                                                             } in
                                                                             letrec {
                                                                               $wa1
                                                                               $wa1 =
                                                                                 \ w12
                                                                                   ww18
                                                                                   ww19
                                                                                   w13 ->
                                                                                   let { __DEFAULT ~ _
                                                                                   <- w12
                                                                                   } in
                                                                                   case >=#
                                                                                          ww19 ipv43
                                                                                   of _ {
                                                                                     False ->
                                                                                       let { __DEFAULT ~ wild7
                                                                                       <- indexIntArray#
                                                                                            ipv44
                                                                                            (+#
                                                                                               ipv42
                                                                                               ww19)
                                                                                       } in
                                                                                       $wa1
                                                                                         SPEC
                                                                                         (+# ww18 1)
                                                                                         (+# ww19 1)
                                                                                         ((writeIntArray#
                                                                                             ipv46
                                                                                             ww18
                                                                                             wild7
                                                                                             (w13
                                                                                              `cast` ...))
                                                                                          `cast` ...);
                                                                                     True ->
                                                                                       (# w13,
                                                                                          I# ww18 #)
                                                                                   }; } in
                                                                             let { (# ipv47, ipv48 #) ~ _
                                                                             <- $wa1
                                                                                  SPEC
                                                                                  0
                                                                                  0
                                                                                  (ipv45 `cast` ...)
                                                                             } in
                                                                             let { I# dt20 ~ dt19
                                                                             <- ipv48
                                                                             } in
                                                                             let { (# ipv49, ipv50 #) ~ _
                                                                             <- unsafeFreezeByteArray#
                                                                                  (ipv46 `cast` ...)
                                                                                  ipv47
                                                                             } in
                                                                             (# ipv49 `cast` ...,
                                                                                (ByteArray ipv50,
                                                                                 lvl7,
                                                                                 dt19) #)))
                                                                       (w11 `cast` ...))
                                                                    `cast` ...);
                                                               True -> (# w11, I# ww16 #)
                                                             }; } in
                                                       let { (# ipv41, ipv42 #) ~ _
                                                       <- $wa SPEC 0 0 (ipv39 `cast` ...)
                                                       } in
                                                       let { I# dt20 ~ _ <- ipv42 } in
                                                       let { (# ipv43, ipv44 #) ~ _
                                                       <- unsafeFreezeArray#
                                                            ipv40 (ipv41 `cast` ...)
                                                       } in
                                                       (# ipv43 `cast` ..., Vector 0 dt20 ipv44 #))
                                               } in
                                               (\ s1 ->
                                                  let { (# ipv39, ipv40 #) ~ _
                                                  <- newArrayArray# ww14 s1
                                                  } in
                                                  letrec {
                                                    $wa
                                                    $wa =
                                                      \ w10 ww20 ww21 ww22 w11 ->
                                                        let { __DEFAULT ~ _ <- w10 } in
                                                        case ww22 of _ {
                                                          Nothing ->
                                                            let { (x1, n1) ~ _ <- ww20 } in
                                                            let { I# x ~ _ <- n1 } in
                                                            case ># x 0 of _ {
                                                              False -> (# w11, () #);
                                                              True ->
                                                                $wa
                                                                  SPEC
                                                                  (let { I# x2 ~ _ <- x1 } in
                                                                   I# (+# x2 1),
                                                                   I# (-# x 1))
                                                                  ww21
                                                                  (Just x1)
                                                                  w11
                                                            };
                                                          Just x ->
                                                            let { I# x1 ~ _ <- ww21 } in
                                                            case >=# x1 ww14 of _ {
                                                              False ->
                                                                let { I# i# ~ _ <- x } in
                                                                let { (ba, ds, ds3) ~ _
                                                                <- runSTRep
                                                                     (\ @ s2 s3 ->
                                                                        let { (# ipv41 #) ~ _
                                                                        <- indexArray#
                                                                             ww15 (+# ww13 x1)
                                                                        } in
                                                                        let { Vector ipv42 ipv43
                                                                                     ipv44 ~ _
                                                                        <- ipv41 `cast` ...
                                                                        } in
                                                                        let { (# ipv45, ipv46 #) ~ _
                                                                        <- newByteArray#
                                                                             (*# ipv43 8)
                                                                             (s3 `cast` ...)
                                                                        } in
                                                                        letrec {
                                                                          $wa1
                                                                          $wa1 =
                                                                            \ w12 ww23 ww24 w13 ->
                                                                              let { __DEFAULT ~ _
                                                                              <- w12
                                                                              } in
                                                                              case >=# ww24 ipv43
                                                                              of _ {
                                                                                False ->
                                                                                  let { __DEFAULT ~ wild10
                                                                                  <- indexIntArray#
                                                                                       ipv44
                                                                                       (+#
                                                                                          ipv42
                                                                                          ww24)
                                                                                  } in
                                                                                  $wa1
                                                                                    SPEC
                                                                                    (+# ww23 1)
                                                                                    (+# ww24 1)
                                                                                    ((writeIntArray#
                                                                                        ipv46
                                                                                        ww23
                                                                                        wild10
                                                                                        (w13
                                                                                         `cast` ...))
                                                                                     `cast` ...);
                                                                                True ->
                                                                                  (# w13, I# ww23 #)
                                                                              }; } in
                                                                        let { (# ipv47, ipv48 #) ~ _
                                                                        <- $wa1
                                                                             SPEC
                                                                             0
                                                                             0
                                                                             (ipv45 `cast` ...)
                                                                        } in
                                                                        let { I# dt20 ~ dt19
                                                                        <- ipv48
                                                                        } in
                                                                        let { (# ipv49, ipv50 #) ~ _
                                                                        <- unsafeFreezeByteArray#
                                                                             (ipv46 `cast` ...)
                                                                             ipv47
                                                                        } in
                                                                        (# ipv49 `cast` ...,
                                                                           (ByteArray ipv50,
                                                                            lvl7,
                                                                            dt19) #))
                                                                } in
                                                                let { ByteArray ba# ~ _ <- ba } in
                                                                let { __DEFAULT ~ s'#
                                                                <- writeByteArrayArray#
                                                                     ipv40 i# ba# w11
                                                                } in
                                                                $wa
                                                                  SPEC
                                                                  ww20
                                                                  (I# (+# x1 1))
                                                                  (Nothing)
                                                                  s'#;
                                                              True -> (# w11, () #)
                                                            }
                                                        }; } in
                                                  let { (# ipv41, ipv42 #) ~ _
                                                  <- $wa SPEC (lvl7, I# ww14) lvl7 (Nothing) ipv39
                                                  } in
                                                  let { (# ipv43, ipv44 #) ~ _
                                                  <- unsafeFreezeArrayArray# ipv40 ipv41
                                                  } in
                                                  (# ipv43,
                                                     let { (baStarts, ds4, ds5) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv45, ipv46 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww18 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww20 ww21 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww21 ww18 of _ {
                                                                     False ->
                                                                       let { (# ipv47 #) ~ _
                                                                       <- indexArray#
                                                                            ww19 (+# ww17 ww21)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv47
                                                                       } in
                                                                       let { I# x# ~ _ <- b1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww20 1)
                                                                         (+# ww21 1)
                                                                         ((writeIntArray#
                                                                             ipv46
                                                                             ww20
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww20 #)
                                                                   }; } in
                                                             let { (# ipv47, ipv48 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv45 `cast` ...)
                                                             } in
                                                             let { I# dt20 ~ dt19 <- ipv48 } in
                                                             let { (# ipv49, ipv50 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv46 `cast` ...) ipv47
                                                             } in
                                                             (# ipv49 `cast` ...,
                                                                (ByteArray ipv50, lvl7, dt19) #))
                                                     } in
                                                     let { ByteArray dt20 ~ _ <- baStarts } in
                                                     let { (baLens, ds6, ds7) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv45, ipv46 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww18 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww20 ww21 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww21 ww18 of _ {
                                                                     False ->
                                                                       let { (# ipv47 #) ~ _
                                                                       <- indexArray#
                                                                            ww19 (+# ww17 ww21)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv47
                                                                       } in
                                                                       let { I# x# ~ _ <- c1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww20 1)
                                                                         (+# ww21 1)
                                                                         ((writeIntArray#
                                                                             ipv46
                                                                             ww20
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww20 #)
                                                                   }; } in
                                                             let { (# ipv47, ipv48 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv45 `cast` ...)
                                                             } in
                                                             let { I# dt22 ~ dt21 <- ipv48 } in
                                                             let { (# ipv49, ipv50 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv46 `cast` ...) ipv47
                                                             } in
                                                             (# ipv49 `cast` ...,
                                                                (ByteArray ipv50, lvl7, dt21) #))
                                                     } in
                                                     let { ByteArray dt22 ~ _ <- baLens } in
                                                     Vectors ww14 dt20 dt22 ipv44 #))
                                               `cast` ...)
                                            `cast` ...)
                                      } in
                                      let { UPSegd dt19 dt20 dt21 dt22 dt23 dt24 dt25 ds2 ~ _
                                      <- segd'
                                      } in
                                      let { DVector ipv43 ipv44 ipv45 ipv46 ipv47 ipv48 ~ nt2
                                      <- (imapD'
                                            lvl86
                                            $dDT1
                                            lvl87
                                            theGang
                                            (\ _ x ->
                                               let { (x1, y) ~ _ <- x } in
                                               let { (x2, y1) ~ _ <- x1 } in
                                               let { USegd dt26 dt27 dt28 dt29 dt30 dt31 dt32 ~ _
                                               <- x2
                                               } in
                                               let { I# ipv43 ~ _ <- y1 } in
                                               let { I# ipv44 ~ _ <- y } in
                                               let { UPSSegd dt33 dt34 dt35 dt36 dt37 dt38 dt39 dt40
                                                             dt41 dt42 ds3 ~ _
                                               <- ipv30
                                               } in
                                               let { Vector ipv45 ipv46 ipv47 ~ _
                                               <- dt35 `cast` ...
                                               } in
                                               let { Vector ipv48 ipv49 ipv50 ~ _
                                               <- dt34 `cast` ...
                                               } in
                                               let { UPSSegd dt43 dt44 dt45 dt46 dt47 dt48 dt49 dt50
                                                             dt51 dt52 ds4 ~ _
                                               <- ipv11
                                               } in
                                               let { Vector ipv51 ipv52 ipv53 ~ _
                                               <- dt45 `cast` ...
                                               } in
                                               let { Vector ipv54 ipv55 ipv56 ~ _
                                               <- dt44 `cast` ...
                                               } in
                                               let { Vector ipv57 ipv58 ipv59 ~ _
                                               <- ipv28 `cast` ...
                                               } in
                                               let { Vector ipv60 ipv61 ipv62 ~ _
                                               <- ipv9 `cast` ...
                                               } in
                                               runSTRep
                                                 (\ @ s s1 ->
                                                    let { (# ipv63, ipv64 #) ~ _
                                                    <- newByteArray# (*# dt32 8) (s1 `cast` ...)
                                                    } in
                                                    letrec {
                                                      $wa
                                                      $wa =
                                                        \ w10
                                                          ww16
                                                          ww17
                                                          ww18
                                                          ww19
                                                          ww20
                                                          ww21
                                                          ww22
                                                          ww23
                                                          w11 ->
                                                          let { __DEFAULT ~ _ <- w10 } in
                                                          case ww21 of ds10 {
                                                            __DEFAULT ->
                                                              case ww17 of ds11 {
                                                                __DEFAULT ->
                                                                  case ww20 of wild11 {
                                                                    __DEFAULT ->
                                                                      let { __DEFAULT ~ wild12
                                                                      <- indexIntArray# ipv40 ww23
                                                                      } in
                                                                      let { __DEFAULT ~ wild13
                                                                      <- indexByteArrayArray#
                                                                           ipv42 ww23
                                                                      } in
                                                                      let { __DEFAULT ~ wild14
                                                                      <- indexIntArray#
                                                                           wild13
                                                                           (+#
                                                                              wild12 (+# ww22 ww19))
                                                                      } in
                                                                      $wa
                                                                        SPEC
                                                                        (+# ww16 1)
                                                                        ds11
                                                                        ww18
                                                                        (+# ww19 1)
                                                                        (-# wild11 1)
                                                                        (-# ds10 1)
                                                                        ww22
                                                                        ww23
                                                                        ((writeIntArray#
                                                                            ipv64
                                                                            ww16
                                                                            wild14
                                                                            (w11 `cast` ...))
                                                                         `cast` ...);
                                                                    0 ->
                                                                      let {
                                                                        i1
                                                                        i1 = +# ww18 1 } in
                                                                      let { __DEFAULT ~ wild12
                                                                      <- indexIntArray#
                                                                           ipv62 (+# ipv60 i1)
                                                                      } in
                                                                      let { __DEFAULT ~ wild13
                                                                      <- indexIntArray#
                                                                           ipv53 (+# ipv51 wild12)
                                                                      } in
                                                                      let { __DEFAULT ~ wild14
                                                                      <- indexIntArray#
                                                                           ipv56 (+# ipv54 wild12)
                                                                      } in
                                                                      let { __DEFAULT ~ wild15
                                                                      <- indexIntArray#
                                                                           dt48 (+# dt46 wild12)
                                                                      } in
                                                                      $wa
                                                                        SPEC
                                                                        ww16
                                                                        0
                                                                        i1
                                                                        0
                                                                        wild15
                                                                        ds10
                                                                        wild14
                                                                        wild13
                                                                        w11
                                                                  };
                                                                0 ->
                                                                  case ww20 of wild11 {
                                                                    __DEFAULT ->
                                                                      let { __DEFAULT ~ wild12
                                                                      <- indexIntArray# ipv24 ww23
                                                                      } in
                                                                      let { __DEFAULT ~ wild13
                                                                      <- indexByteArrayArray#
                                                                           ipv26 ww23
                                                                      } in
                                                                      let { __DEFAULT ~ wild14
                                                                      <- indexIntArray#
                                                                           wild13
                                                                           (+#
                                                                              wild12 (+# ww22 ww19))
                                                                      } in
                                                                      $wa
                                                                        SPEC
                                                                        (+# ww16 1)
                                                                        0
                                                                        ww18
                                                                        (+# ww19 1)
                                                                        (-# wild11 1)
                                                                        (-# ds10 1)
                                                                        ww22
                                                                        ww23
                                                                        ((writeIntArray#
                                                                            ipv64
                                                                            ww16
                                                                            wild14
                                                                            (w11 `cast` ...))
                                                                         `cast` ...);
                                                                    0 ->
                                                                      let { __DEFAULT ~ wild12
                                                                      <- indexIntArray#
                                                                           ipv59 (+# ipv57 ww18)
                                                                      } in
                                                                      let { __DEFAULT ~ wild13
                                                                      <- indexIntArray#
                                                                           ipv47 (+# ipv45 wild12)
                                                                      } in
                                                                      let { __DEFAULT ~ wild14
                                                                      <- indexIntArray#
                                                                           ipv50 (+# ipv48 wild12)
                                                                      } in
                                                                      let { __DEFAULT ~ wild15
                                                                      <- indexIntArray#
                                                                           dt38 (+# dt36 wild12)
                                                                      } in
                                                                      $wa
                                                                        SPEC
                                                                        ww16
                                                                        1
                                                                        ww18
                                                                        0
                                                                        wild15
                                                                        ds10
                                                                        wild14
                                                                        wild13
                                                                        w11
                                                                  }
                                                              };
                                                            0 -> (# w11, I# ww16 #)
                                                          }; } in
                                                    case dt32 of wild11 {
                                                      __DEFAULT ->
                                                        let { __DEFAULT ~ wild12
                                                        <- indexIntArray# ipv62 (+# ipv60 ipv43)
                                                        } in
                                                        let { __DEFAULT ~ wild13
                                                        <- indexIntArray# dt48 (+# dt46 wild12)
                                                        } in
                                                        case <# ipv44 wild13 of _ {
                                                          False ->
                                                            let { __DEFAULT ~ wild15
                                                            <- indexIntArray# ipv59 (+# ipv57 ipv43)
                                                            } in
                                                            let { __DEFAULT ~ wild16
                                                            <- indexIntArray#
                                                                 ipv47 (+# ipv45 wild15)
                                                            } in
                                                            let { __DEFAULT ~ wild17
                                                            <- indexIntArray#
                                                                 ipv50 (+# ipv48 wild15)
                                                            } in
                                                            let {
                                                              i1
                                                              i1 = -# ipv44 wild13 } in
                                                            let { __DEFAULT ~ wild18
                                                            <- indexIntArray# dt38 (+# dt36 wild15)
                                                            } in
                                                            let { (# ipv65, ipv66 #) ~ _
                                                            <- $wa
                                                                 SPEC
                                                                 0
                                                                 1
                                                                 ipv43
                                                                 i1
                                                                 (-# wild18 i1)
                                                                 wild11
                                                                 wild17
                                                                 wild16
                                                                 (ipv63 `cast` ...)
                                                            } in
                                                            let { I# dt54 ~ _ <- ipv66 } in
                                                            let { (# ipv67, ipv68 #) ~ _
                                                            <- unsafeFreezeByteArray#
                                                                 ipv64 (ipv65 `cast` ...)
                                                            } in
                                                            (# ipv67 `cast` ...,
                                                               (Vector 0 dt54 ipv68) `cast` ... #);
                                                          True ->
                                                            let { __DEFAULT ~ wild15
                                                            <- indexIntArray#
                                                                 ipv53 (+# ipv51 wild12)
                                                            } in
                                                            let { __DEFAULT ~ wild16
                                                            <- indexIntArray#
                                                                 ipv56 (+# ipv54 wild12)
                                                            } in
                                                            let { (# ipv65, ipv66 #) ~ _
                                                            <- $wa
                                                                 SPEC
                                                                 0
                                                                 0
                                                                 ipv43
                                                                 ipv44
                                                                 (-# wild13 ipv44)
                                                                 wild11
                                                                 wild16
                                                                 wild15
                                                                 (ipv63 `cast` ...)
                                                            } in
                                                            let { I# dt54 ~ _ <- ipv66 } in
                                                            let { (# ipv67, ipv68 #) ~ _
                                                            <- unsafeFreezeByteArray#
                                                                 ipv64 (ipv65 `cast` ...)
                                                            } in
                                                            (# ipv67 `cast` ...,
                                                               (Vector 0 dt54 ipv68) `cast` ... #)
                                                        };
                                                      0 ->
                                                        let { (# ipv65, ipv66 #) ~ _
                                                        <- $wa
                                                             SPEC 0 0 0 0 0 0 0 0 (ipv63 `cast` ...)
                                                        } in
                                                        let { I# dt54 ~ _ <- ipv66 } in
                                                        let { (# ipv67, ipv68 #) ~ _
                                                        <- unsafeFreezeByteArray#
                                                             ipv64 (ipv65 `cast` ...)
                                                        } in
                                                        (# ipv67 `cast` ...,
                                                           (Vector 0 dt54 ipv68) `cast` ... #)
                                                    }))
                                            ds2)
                                         `cast` ...
                                      } in
                                      runSTRep
                                        (\ @ s s1 ->
                                           let { (di, n) ~ _
                                           <- scanD
                                                $fDTInt
                                                lvl85
                                                theGang
                                                $fNumInt_$c+
                                                lvl7
                                                ((DInt ipv43 ipv44 ipv45) `cast` ...)
                                           } in
                                           let { DInt ipv49 ipv50 ipv51 ~ nt3 <- di `cast` ... } in
                                           let { I# ipv52 ~ n1 <- n } in
                                           case >=# ipv52 0 of _ {
                                             False -> case lvl83 ipv52 of wild8 { };
                                             True ->
                                               let { (# ipv53, ipv54 #) ~ _
                                               <- newByteArray# (*# ipv52 8) (s1 `cast` ...)
                                               } in
                                               let { Gang ww17 ww18 ww19 ~ _ <- theGang } in
                                               let {
                                                 nt4
                                                 nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                                               let { (# ipv55, ipv56 #) ~ _
                                               <- ($wa1
                                                     ww17
                                                     ww18
                                                     ww19
                                                     (++
                                                        $fShowComp2
                                                        ($fShowComp_$cshowsPrec
                                                           $fShowComp7 (WJoinCopy n1) ([])))
                                                     (WorkCopy n1)
                                                     ((\ i s2 ->
                                                         let { (# ipv55, ipv56 #) ~ _
                                                         <- ((((myD lvl84 (nt4 `cast` ...))
                                                               `cast` ...)
                                                                i)
                                                             `cast` ...)
                                                              s2
                                                         } in
                                                         let { (x, y) ~ _ <- ipv56 } in
                                                         let { I# ipv57 ~ _ <- x } in
                                                         let { Vector ipv58 ipv59 ipv60 ~ _
                                                         <- y `cast` ...
                                                         } in
                                                         (# copyByteArray#
                                                              ipv60
                                                              (*# ipv58 8)
                                                              ipv54
                                                              (*# ipv57 8)
                                                              (*# ipv59 8)
                                                              (ipv55 `cast` ...),
                                                            () #)
                                                         `cast` ...)
                                                      `cast` ...)
                                                     (ipv53 `cast` ...))
                                                  `cast` ...
                                               } in
                                               let { (# ipv57, ipv58 #) ~ _
                                               <- unsafeFreezeByteArray# ipv54 (ipv55 `cast` ...)
                                               } in
                                               (# ipv57 `cast` ...,
                                                  (Vector 0 ipv52 ipv58) `cast` ... #)
                                           }) } in
                                  let {
                                    a17
                                    a17 =
                                      let { UPVSegd ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ~ _ <- w6 } in
                                      let { Vector ipv14 ipv15 ipv16 ~ _ <- xarr } in
                                      let { Vector ww1 ww2 ww3 ~ _
                                      <- runSTRep
                                           (\ @ s s1 ->
                                              let { (# ipv17, ipv18 #) ~ _
                                              <- newArray# ipv15 (uninitialised) (s1 `cast` ...)
                                              } in
                                              letrec {
                                                $wa
                                                $wa =
                                                  \ w10 ww ww1 w11 ->
                                                    let { __DEFAULT ~ _ <- w10 } in
                                                    case >=# ww1 ipv15 of _ {
                                                      False ->
                                                        let { (# ipv19 #) ~ _
                                                        <- indexArray# ipv16 (+# ipv14 ww1)
                                                        } in
                                                        $wa
                                                          SPEC
                                                          (+# ww 1)
                                                          (+# ww1 1)
                                                          ((writeArray#
                                                              ipv18
                                                              ww
                                                              (let { PNested ds4 ds5 ds6 ds7 ~ _
                                                               <- ipv19 `cast` ...
                                                               } in
                                                               let { UPVSegd ds8 ds9 ds10 ds11 ds12
                                                                             ds13 ~ _
                                                               <- ds4
                                                               } in
                                                               let { UPSSegd dt10 dt11 dt14 dt15
                                                                             dt16 dt17 dt18 dt19
                                                                             dt20 dt21 ds14 ~ _
                                                               <- ds12
                                                               } in
                                                               dt11)
                                                              (w11 `cast` ...))
                                                           `cast` ...);
                                                      True -> (# w11, I# ww #)
                                                    }; } in
                                              let { (# ipv19, ipv20 #) ~ _
                                              <- $wa SPEC 0 0 (ipv17 `cast` ...)
                                              } in
                                              let { I# dt11 ~ _ <- ipv20 } in
                                              let { (# ipv21, ipv22 #) ~ _
                                              <- unsafeFreezeArray# ipv18 (ipv19 `cast` ...)
                                              } in
                                              (# ipv21 `cast` ..., Vector 0 dt11 ipv22 #))
                                      } in
                                      let { Vectors ipv17 ipv18 ipv19 ipv20 ~ _
                                      <- runSTRep
                                           ((\ @ s ->
                                               let { Vector ww5 ww6 ww7 ~ _
                                               <- runSTRep
                                                    (\ @ s1 s2 ->
                                                       let { (# ipv17, ipv18 #) ~ _
                                                       <- newArray#
                                                            ww2 (uninitialised) (s2 `cast` ...)
                                                       } in
                                                       letrec {
                                                         $wa
                                                         $wa =
                                                           \ w10 ww4 ww5 w11 ->
                                                             let { __DEFAULT ~ _ <- w10 } in
                                                             case >=# ww5 ww2 of _ {
                                                               False ->
                                                                 $wa
                                                                   SPEC
                                                                   (+# ww4 1)
                                                                   (+# ww5 1)
                                                                   ((writeArray#
                                                                       ipv18
                                                                       ww4
                                                                       (runSTRep
                                                                          (\ @ s3 s4 ->
                                                                             let { (# ipv19 #) ~ _
                                                                             <- indexArray#
                                                                                  ww3 (+# ww1 ww5)
                                                                             } in
                                                                             let { Vector ipv20
                                                                                          ipv21
                                                                                          ipv22 ~ _
                                                                             <- ipv19 `cast` ...
                                                                             } in
                                                                             let { (# ipv23, ipv24 #) ~ _
                                                                             <- newByteArray#
                                                                                  (*# ipv21 8)
                                                                                  (s4 `cast` ...)
                                                                             } in
                                                                             letrec {
                                                                               $wa1
                                                                               $wa1 =
                                                                                 \ w12
                                                                                   ww6
                                                                                   ww7
                                                                                   w13 ->
                                                                                   let { __DEFAULT ~ _
                                                                                   <- w12
                                                                                   } in
                                                                                   case >=#
                                                                                          ww7 ipv21
                                                                                   of _ {
                                                                                     False ->
                                                                                       let { __DEFAULT ~ wild5
                                                                                       <- indexIntArray#
                                                                                            ipv22
                                                                                            (+#
                                                                                               ipv20
                                                                                               ww7)
                                                                                       } in
                                                                                       $wa1
                                                                                         SPEC
                                                                                         (+# ww6 1)
                                                                                         (+# ww7 1)
                                                                                         ((writeIntArray#
                                                                                             ipv24
                                                                                             ww6
                                                                                             wild5
                                                                                             (w13
                                                                                              `cast` ...))
                                                                                          `cast` ...);
                                                                                     True ->
                                                                                       (# w13,
                                                                                          I# ww6 #)
                                                                                   }; } in
                                                                             let { (# ipv25, ipv26 #) ~ _
                                                                             <- $wa1
                                                                                  SPEC
                                                                                  0
                                                                                  0
                                                                                  (ipv23 `cast` ...)
                                                                             } in
                                                                             let { I# dt11 ~ dt10
                                                                             <- ipv26
                                                                             } in
                                                                             let { (# ipv27, ipv28 #) ~ _
                                                                             <- unsafeFreezeByteArray#
                                                                                  (ipv24 `cast` ...)
                                                                                  ipv25
                                                                             } in
                                                                             (# ipv27 `cast` ...,
                                                                                (ByteArray ipv28,
                                                                                 lvl7,
                                                                                 dt10) #)))
                                                                       (w11 `cast` ...))
                                                                    `cast` ...);
                                                               True -> (# w11, I# ww4 #)
                                                             }; } in
                                                       let { (# ipv19, ipv20 #) ~ _
                                                       <- $wa SPEC 0 0 (ipv17 `cast` ...)
                                                       } in
                                                       let { I# dt11 ~ _ <- ipv20 } in
                                                       let { (# ipv21, ipv22 #) ~ _
                                                       <- unsafeFreezeArray#
                                                            ipv18 (ipv19 `cast` ...)
                                                       } in
                                                       (# ipv21 `cast` ..., Vector 0 dt11 ipv22 #))
                                               } in
                                               (\ s1 ->
                                                  let { (# ipv17, ipv18 #) ~ _
                                                  <- newArrayArray# ww2 s1
                                                  } in
                                                  letrec {
                                                    $wa
                                                    $wa =
                                                      \ w10 ww8 ww9 ww10 w11 ->
                                                        let { __DEFAULT ~ _ <- w10 } in
                                                        case ww10 of _ {
                                                          Nothing ->
                                                            let { (x1, n1) ~ _ <- ww8 } in
                                                            let { I# x ~ _ <- n1 } in
                                                            case ># x 0 of _ {
                                                              False -> (# w11, () #);
                                                              True ->
                                                                $wa
                                                                  SPEC
                                                                  (let { I# x2 ~ _ <- x1 } in
                                                                   I# (+# x2 1),
                                                                   I# (-# x 1))
                                                                  ww9
                                                                  (Just x1)
                                                                  w11
                                                            };
                                                          Just x ->
                                                            let { I# x1 ~ _ <- ww9 } in
                                                            case >=# x1 ww2 of _ {
                                                              False ->
                                                                let { I# i# ~ _ <- x } in
                                                                let { (ba, ds, ds3) ~ _
                                                                <- runSTRep
                                                                     (\ @ s2 s3 ->
                                                                        let { (# ipv19 #) ~ _
                                                                        <- indexArray#
                                                                             ww3 (+# ww1 x1)
                                                                        } in
                                                                        let { Vector ipv20 ipv21
                                                                                     ipv22 ~ _
                                                                        <- ipv19 `cast` ...
                                                                        } in
                                                                        let { (# ipv23, ipv24 #) ~ _
                                                                        <- newByteArray#
                                                                             (*# ipv21 8)
                                                                             (s3 `cast` ...)
                                                                        } in
                                                                        letrec {
                                                                          $wa1
                                                                          $wa1 =
                                                                            \ w12 ww11 ww12 w13 ->
                                                                              let { __DEFAULT ~ _
                                                                              <- w12
                                                                              } in
                                                                              case >=# ww12 ipv21
                                                                              of _ {
                                                                                False ->
                                                                                  let { __DEFAULT ~ wild8
                                                                                  <- indexIntArray#
                                                                                       ipv22
                                                                                       (+#
                                                                                          ipv20
                                                                                          ww12)
                                                                                  } in
                                                                                  $wa1
                                                                                    SPEC
                                                                                    (+# ww11 1)
                                                                                    (+# ww12 1)
                                                                                    ((writeIntArray#
                                                                                        ipv24
                                                                                        ww11
                                                                                        wild8
                                                                                        (w13
                                                                                         `cast` ...))
                                                                                     `cast` ...);
                                                                                True ->
                                                                                  (# w13, I# ww11 #)
                                                                              }; } in
                                                                        let { (# ipv25, ipv26 #) ~ _
                                                                        <- $wa1
                                                                             SPEC
                                                                             0
                                                                             0
                                                                             (ipv23 `cast` ...)
                                                                        } in
                                                                        let { I# dt11 ~ dt10
                                                                        <- ipv26
                                                                        } in
                                                                        let { (# ipv27, ipv28 #) ~ _
                                                                        <- unsafeFreezeByteArray#
                                                                             (ipv24 `cast` ...)
                                                                             ipv25
                                                                        } in
                                                                        (# ipv27 `cast` ...,
                                                                           (ByteArray ipv28,
                                                                            lvl7,
                                                                            dt10) #))
                                                                } in
                                                                let { ByteArray ba# ~ _ <- ba } in
                                                                let { __DEFAULT ~ s'#
                                                                <- writeByteArrayArray#
                                                                     ipv18 i# ba# w11
                                                                } in
                                                                $wa
                                                                  SPEC
                                                                  ww8
                                                                  (I# (+# x1 1))
                                                                  (Nothing)
                                                                  s'#;
                                                              True -> (# w11, () #)
                                                            }
                                                        }; } in
                                                  let { (# ipv19, ipv20 #) ~ _
                                                  <- $wa SPEC (lvl7, I# ww2) lvl7 (Nothing) ipv17
                                                  } in
                                                  let { (# ipv21, ipv22 #) ~ _
                                                  <- unsafeFreezeArrayArray# ipv18 ipv19
                                                  } in
                                                  (# ipv21,
                                                     let { (baStarts, ds4, ds5) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv23, ipv24 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww6 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww8 ww9 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww9 ww6 of _ {
                                                                     False ->
                                                                       let { (# ipv25 #) ~ _
                                                                       <- indexArray#
                                                                            ww7 (+# ww5 ww9)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv25
                                                                       } in
                                                                       let { I# x# ~ _ <- b1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww8 1)
                                                                         (+# ww9 1)
                                                                         ((writeIntArray#
                                                                             ipv24
                                                                             ww8
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww8 #)
                                                                   }; } in
                                                             let { (# ipv25, ipv26 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv23 `cast` ...)
                                                             } in
                                                             let { I# dt11 ~ dt10 <- ipv26 } in
                                                             let { (# ipv27, ipv28 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv24 `cast` ...) ipv25
                                                             } in
                                                             (# ipv27 `cast` ...,
                                                                (ByteArray ipv28, lvl7, dt10) #))
                                                     } in
                                                     let { ByteArray dt10 ~ _ <- baStarts } in
                                                     let { (baLens, ds6, ds7) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv23, ipv24 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww6 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww8 ww9 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww9 ww6 of _ {
                                                                     False ->
                                                                       let { (# ipv25 #) ~ _
                                                                       <- indexArray#
                                                                            ww7 (+# ww5 ww9)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv25
                                                                       } in
                                                                       let { I# x# ~ _ <- c1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww8 1)
                                                                         (+# ww9 1)
                                                                         ((writeIntArray#
                                                                             ipv24
                                                                             ww8
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww8 #)
                                                                   }; } in
                                                             let { (# ipv25, ipv26 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv23 `cast` ...)
                                                             } in
                                                             let { I# dt14 ~ dt11 <- ipv26 } in
                                                             let { (# ipv27, ipv28 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv24 `cast` ...) ipv25
                                                             } in
                                                             (# ipv27 `cast` ...,
                                                                (ByteArray ipv28, lvl7, dt11) #))
                                                     } in
                                                     let { ByteArray dt14 ~ _ <- baLens } in
                                                     Vectors ww2 dt10 dt14 ipv22 #))
                                               `cast` ...)
                                            `cast` ...)
                                      } in
                                      let { UPVSegd ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ~ _
                                      <- ipv4
                                      } in
                                      let { Vector ipv27 ipv28 ipv29 ~ _ <- yarr } in
                                      let { Vector ww5 ww6 ww7 ~ _
                                      <- runSTRep
                                           (\ @ s s1 ->
                                              let { (# ipv30, ipv31 #) ~ _
                                              <- newArray# ipv28 (uninitialised) (s1 `cast` ...)
                                              } in
                                              letrec {
                                                $wa
                                                $wa =
                                                  \ w10 ww4 ww5 w11 ->
                                                    let { __DEFAULT ~ _ <- w10 } in
                                                    case >=# ww5 ipv28 of _ {
                                                      False ->
                                                        let { (# ipv32 #) ~ _
                                                        <- indexArray# ipv29 (+# ipv27 ww5)
                                                        } in
                                                        $wa
                                                          SPEC
                                                          (+# ww4 1)
                                                          (+# ww5 1)
                                                          ((writeArray#
                                                              ipv31
                                                              ww4
                                                              (let { PNested ds4 ds5 ds6 ds7 ~ _
                                                               <- ipv32 `cast` ...
                                                               } in
                                                               let { UPVSegd ds8 ds9 ds10 ds11 ds12
                                                                             ds13 ~ _
                                                               <- ds4
                                                               } in
                                                               let { UPSSegd dt10 dt11 dt14 dt15
                                                                             dt16 dt17 dt18 dt19
                                                                             dt20 dt21 ds14 ~ _
                                                               <- ds12
                                                               } in
                                                               dt11)
                                                              (w11 `cast` ...))
                                                           `cast` ...);
                                                      True -> (# w11, I# ww4 #)
                                                    }; } in
                                              let { (# ipv32, ipv33 #) ~ _
                                              <- $wa SPEC 0 0 (ipv30 `cast` ...)
                                              } in
                                              let { I# dt11 ~ _ <- ipv33 } in
                                              let { (# ipv34, ipv35 #) ~ _
                                              <- unsafeFreezeArray# ipv31 (ipv32 `cast` ...)
                                              } in
                                              (# ipv34 `cast` ..., Vector 0 dt11 ipv35 #))
                                      } in
                                      let { Vectors ipv30 ipv31 ipv32 ipv33 ~ _
                                      <- runSTRep
                                           ((\ @ s ->
                                               let { Vector ww9 ww10 ww11 ~ _
                                               <- runSTRep
                                                    (\ @ s1 s2 ->
                                                       let { (# ipv30, ipv31 #) ~ _
                                                       <- newArray#
                                                            ww6 (uninitialised) (s2 `cast` ...)
                                                       } in
                                                       letrec {
                                                         $wa
                                                         $wa =
                                                           \ w10 ww8 ww9 w11 ->
                                                             let { __DEFAULT ~ _ <- w10 } in
                                                             case >=# ww9 ww6 of _ {
                                                               False ->
                                                                 $wa
                                                                   SPEC
                                                                   (+# ww8 1)
                                                                   (+# ww9 1)
                                                                   ((writeArray#
                                                                       ipv31
                                                                       ww8
                                                                       (runSTRep
                                                                          (\ @ s3 s4 ->
                                                                             let { (# ipv32 #) ~ _
                                                                             <- indexArray#
                                                                                  ww7 (+# ww5 ww9)
                                                                             } in
                                                                             let { Vector ipv33
                                                                                          ipv34
                                                                                          ipv35 ~ _
                                                                             <- ipv32 `cast` ...
                                                                             } in
                                                                             let { (# ipv36, ipv37 #) ~ _
                                                                             <- newByteArray#
                                                                                  (*# ipv34 8)
                                                                                  (s4 `cast` ...)
                                                                             } in
                                                                             letrec {
                                                                               $wa1
                                                                               $wa1 =
                                                                                 \ w12
                                                                                   ww10
                                                                                   ww11
                                                                                   w13 ->
                                                                                   let { __DEFAULT ~ _
                                                                                   <- w12
                                                                                   } in
                                                                                   case >=#
                                                                                          ww11 ipv34
                                                                                   of _ {
                                                                                     False ->
                                                                                       let { __DEFAULT ~ wild5
                                                                                       <- indexIntArray#
                                                                                            ipv35
                                                                                            (+#
                                                                                               ipv33
                                                                                               ww11)
                                                                                       } in
                                                                                       $wa1
                                                                                         SPEC
                                                                                         (+# ww10 1)
                                                                                         (+# ww11 1)
                                                                                         ((writeIntArray#
                                                                                             ipv37
                                                                                             ww10
                                                                                             wild5
                                                                                             (w13
                                                                                              `cast` ...))
                                                                                          `cast` ...);
                                                                                     True ->
                                                                                       (# w13,
                                                                                          I# ww10 #)
                                                                                   }; } in
                                                                             let { (# ipv38, ipv39 #) ~ _
                                                                             <- $wa1
                                                                                  SPEC
                                                                                  0
                                                                                  0
                                                                                  (ipv36 `cast` ...)
                                                                             } in
                                                                             let { I# dt11 ~ dt10
                                                                             <- ipv39
                                                                             } in
                                                                             let { (# ipv40, ipv41 #) ~ _
                                                                             <- unsafeFreezeByteArray#
                                                                                  (ipv37 `cast` ...)
                                                                                  ipv38
                                                                             } in
                                                                             (# ipv40 `cast` ...,
                                                                                (ByteArray ipv41,
                                                                                 lvl7,
                                                                                 dt10) #)))
                                                                       (w11 `cast` ...))
                                                                    `cast` ...);
                                                               True -> (# w11, I# ww8 #)
                                                             }; } in
                                                       let { (# ipv32, ipv33 #) ~ _
                                                       <- $wa SPEC 0 0 (ipv30 `cast` ...)
                                                       } in
                                                       let { I# dt11 ~ _ <- ipv33 } in
                                                       let { (# ipv34, ipv35 #) ~ _
                                                       <- unsafeFreezeArray#
                                                            ipv31 (ipv32 `cast` ...)
                                                       } in
                                                       (# ipv34 `cast` ..., Vector 0 dt11 ipv35 #))
                                               } in
                                               (\ s1 ->
                                                  let { (# ipv30, ipv31 #) ~ _
                                                  <- newArrayArray# ww6 s1
                                                  } in
                                                  letrec {
                                                    $wa
                                                    $wa =
                                                      \ w10 ww12 ww13 ww14 w11 ->
                                                        let { __DEFAULT ~ _ <- w10 } in
                                                        case ww14 of _ {
                                                          Nothing ->
                                                            let { (x1, n1) ~ _ <- ww12 } in
                                                            let { I# x ~ _ <- n1 } in
                                                            case ># x 0 of _ {
                                                              False -> (# w11, () #);
                                                              True ->
                                                                $wa
                                                                  SPEC
                                                                  (let { I# x2 ~ _ <- x1 } in
                                                                   I# (+# x2 1),
                                                                   I# (-# x 1))
                                                                  ww13
                                                                  (Just x1)
                                                                  w11
                                                            };
                                                          Just x ->
                                                            let { I# x1 ~ _ <- ww13 } in
                                                            case >=# x1 ww6 of _ {
                                                              False ->
                                                                let { I# i# ~ _ <- x } in
                                                                let { (ba, ds, ds3) ~ _
                                                                <- runSTRep
                                                                     (\ @ s2 s3 ->
                                                                        let { (# ipv32 #) ~ _
                                                                        <- indexArray#
                                                                             ww7 (+# ww5 x1)
                                                                        } in
                                                                        let { Vector ipv33 ipv34
                                                                                     ipv35 ~ _
                                                                        <- ipv32 `cast` ...
                                                                        } in
                                                                        let { (# ipv36, ipv37 #) ~ _
                                                                        <- newByteArray#
                                                                             (*# ipv34 8)
                                                                             (s3 `cast` ...)
                                                                        } in
                                                                        letrec {
                                                                          $wa1
                                                                          $wa1 =
                                                                            \ w12 ww15 ww16 w13 ->
                                                                              let { __DEFAULT ~ _
                                                                              <- w12
                                                                              } in
                                                                              case >=# ww16 ipv34
                                                                              of _ {
                                                                                False ->
                                                                                  let { __DEFAULT ~ wild8
                                                                                  <- indexIntArray#
                                                                                       ipv35
                                                                                       (+#
                                                                                          ipv33
                                                                                          ww16)
                                                                                  } in
                                                                                  $wa1
                                                                                    SPEC
                                                                                    (+# ww15 1)
                                                                                    (+# ww16 1)
                                                                                    ((writeIntArray#
                                                                                        ipv37
                                                                                        ww15
                                                                                        wild8
                                                                                        (w13
                                                                                         `cast` ...))
                                                                                     `cast` ...);
                                                                                True ->
                                                                                  (# w13, I# ww15 #)
                                                                              }; } in
                                                                        let { (# ipv38, ipv39 #) ~ _
                                                                        <- $wa1
                                                                             SPEC
                                                                             0
                                                                             0
                                                                             (ipv36 `cast` ...)
                                                                        } in
                                                                        let { I# dt11 ~ dt10
                                                                        <- ipv39
                                                                        } in
                                                                        let { (# ipv40, ipv41 #) ~ _
                                                                        <- unsafeFreezeByteArray#
                                                                             (ipv37 `cast` ...)
                                                                             ipv38
                                                                        } in
                                                                        (# ipv40 `cast` ...,
                                                                           (ByteArray ipv41,
                                                                            lvl7,
                                                                            dt10) #))
                                                                } in
                                                                let { ByteArray ba# ~ _ <- ba } in
                                                                let { __DEFAULT ~ s'#
                                                                <- writeByteArrayArray#
                                                                     ipv31 i# ba# w11
                                                                } in
                                                                $wa
                                                                  SPEC
                                                                  ww12
                                                                  (I# (+# x1 1))
                                                                  (Nothing)
                                                                  s'#;
                                                              True -> (# w11, () #)
                                                            }
                                                        }; } in
                                                  let { (# ipv32, ipv33 #) ~ _
                                                  <- $wa SPEC (lvl7, I# ww6) lvl7 (Nothing) ipv30
                                                  } in
                                                  let { (# ipv34, ipv35 #) ~ _
                                                  <- unsafeFreezeArrayArray# ipv31 ipv32
                                                  } in
                                                  (# ipv34,
                                                     let { (baStarts, ds4, ds5) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv36, ipv37 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww10 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww12 ww13 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww13 ww10 of _ {
                                                                     False ->
                                                                       let { (# ipv38 #) ~ _
                                                                       <- indexArray#
                                                                            ww11 (+# ww9 ww13)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv38
                                                                       } in
                                                                       let { I# x# ~ _ <- b1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww12 1)
                                                                         (+# ww13 1)
                                                                         ((writeIntArray#
                                                                             ipv37
                                                                             ww12
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww12 #)
                                                                   }; } in
                                                             let { (# ipv38, ipv39 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv36 `cast` ...)
                                                             } in
                                                             let { I# dt11 ~ dt10 <- ipv39 } in
                                                             let { (# ipv40, ipv41 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv37 `cast` ...) ipv38
                                                             } in
                                                             (# ipv40 `cast` ...,
                                                                (ByteArray ipv41, lvl7, dt10) #))
                                                     } in
                                                     let { ByteArray dt10 ~ _ <- baStarts } in
                                                     let { (baLens, ds6, ds7) ~ _
                                                     <- runSTRep
                                                          (\ @ s2 s3 ->
                                                             let { (# ipv36, ipv37 #) ~ _
                                                             <- newByteArray#
                                                                  (*# ww10 8) (s3 `cast` ...)
                                                             } in
                                                             letrec {
                                                               $wa1
                                                               $wa1 =
                                                                 \ w10 ww12 ww13 w11 ->
                                                                   let { __DEFAULT ~ _ <- w10 } in
                                                                   case >=# ww13 ww10 of _ {
                                                                     False ->
                                                                       let { (# ipv38 #) ~ _
                                                                       <- indexArray#
                                                                            ww11 (+# ww9 ww13)
                                                                       } in
                                                                       let { (a28, b1, c1) ~ _
                                                                       <- ipv38
                                                                       } in
                                                                       let { I# x# ~ _ <- c1 } in
                                                                       $wa1
                                                                         SPEC
                                                                         (+# ww12 1)
                                                                         (+# ww13 1)
                                                                         ((writeIntArray#
                                                                             ipv37
                                                                             ww12
                                                                             x#
                                                                             (w11 `cast` ...))
                                                                          `cast` ...);
                                                                     True -> (# w11, I# ww12 #)
                                                                   }; } in
                                                             let { (# ipv38, ipv39 #) ~ _
                                                             <- $wa1 SPEC 0 0 (ipv36 `cast` ...)
                                                             } in
                                                             let { I# dt14 ~ dt11 <- ipv39 } in
                                                             let { (# ipv40, ipv41 #) ~ _
                                                             <- unsafeFreezeByteArray#
                                                                  (ipv37 `cast` ...) ipv38
                                                             } in
                                                             (# ipv40 `cast` ...,
                                                                (ByteArray ipv41, lvl7, dt11) #))
                                                     } in
                                                     let { ByteArray dt14 ~ _ <- baLens } in
                                                     Vectors ww6 dt10 dt14 ipv35 #))
                                               `cast` ...)
                                            `cast` ...)
                                      } in
                                      let { UPSegd dt dt10 dt11 dt14 dt15 dt16 dt17 ds2 ~ _
                                      <- segd'
                                      } in
                                      let { DVector ipv34 ipv35 ipv36 ipv37 ipv38 ipv39 ~ nt2
                                      <- (imapD'
                                            lvl81
                                            $dDT1
                                            lvl82
                                            theGang
                                            (\ _ x ->
                                               let { (x1, y) ~ _ <- x } in
                                               let { (x2, y1) ~ _ <- x1 } in
                                               let { USegd dt18 dt19 dt20 dt21 dt22 dt23 dt24 ~ _
                                               <- x2
                                               } in
                                               let { I# ipv34 ~ _ <- y1 } in
                                               let { I# ipv35 ~ _ <- y } in
                                               let { UPSSegd dt25 dt26 dt27 dt28 dt29 dt30 dt31 dt32
                                                             dt33 dt34 ds3 ~ _
                                               <- ipv24
                                               } in
                                               let { Vector ipv36 ipv37 ipv38 ~ _
                                               <- dt27 `cast` ...
                                               } in
                                               let { Vector ipv39 ipv40 ipv41 ~ _
                                               <- dt26 `cast` ...
                                               } in
                                               let { UPSSegd dt35 dt36 dt37 dt38 dt39 dt40 dt41 dt42
                                                             dt43 dt44 ds4 ~ _
                                               <- ipv11
                                               } in
                                               let { Vector ipv42 ipv43 ipv44 ~ _
                                               <- dt37 `cast` ...
                                               } in
                                               let { Vector ipv45 ipv46 ipv47 ~ _
                                               <- dt36 `cast` ...
                                               } in
                                               let { Vector ipv48 ipv49 ipv50 ~ _
                                               <- ipv22 `cast` ...
                                               } in
                                               let { Vector ipv51 ipv52 ipv53 ~ _
                                               <- ipv9 `cast` ...
                                               } in
                                               runSTRep
                                                 (\ @ s s1 ->
                                                    let { (# ipv54, ipv55 #) ~ _
                                                    <- newByteArray# (*# dt24 8) (s1 `cast` ...)
                                                    } in
                                                    letrec {
                                                      $wa
                                                      $wa =
                                                        \ w10
                                                          ww8
                                                          ww9
                                                          ww10
                                                          ww11
                                                          ww12
                                                          ww13
                                                          ww14
                                                          ww15
                                                          w11 ->
                                                          let { __DEFAULT ~ _ <- w10 } in
                                                          case ww13 of ds10 {
                                                            __DEFAULT ->
                                                              case ww9 of ds11 {
                                                                __DEFAULT ->
                                                                  case ww12 of wild9 {
                                                                    __DEFAULT ->
                                                                      let { __DEFAULT ~ wild10
                                                                      <- indexIntArray# ipv31 ww15
                                                                      } in
                                                                      let { __DEFAULT ~ wild11
                                                                      <- indexByteArrayArray#
                                                                           ipv33 ww15
                                                                      } in
                                                                      let { __DEFAULT ~ wild12
                                                                      <- indexIntArray#
                                                                           wild11
                                                                           (+#
                                                                              wild10 (+# ww14 ww11))
                                                                      } in
                                                                      $wa
                                                                        SPEC
                                                                        (+# ww8 1)
                                                                        ds11
                                                                        ww10
                                                                        (+# ww11 1)
                                                                        (-# wild9 1)
                                                                        (-# ds10 1)
                                                                        ww14
                                                                        ww15
                                                                        ((writeIntArray#
                                                                            ipv55
                                                                            ww8
                                                                            wild12
                                                                            (w11 `cast` ...))
                                                                         `cast` ...);
                                                                    0 ->
                                                                      let {
                                                                        i1
                                                                        i1 = +# ww10 1 } in
                                                                      let { __DEFAULT ~ wild10
                                                                      <- indexIntArray#
                                                                           ipv53 (+# ipv51 i1)
                                                                      } in
                                                                      let { __DEFAULT ~ wild11
                                                                      <- indexIntArray#
                                                                           ipv44 (+# ipv42 wild10)
                                                                      } in
                                                                      let { __DEFAULT ~ wild12
                                                                      <- indexIntArray#
                                                                           ipv47 (+# ipv45 wild10)
                                                                      } in
                                                                      let { __DEFAULT ~ wild13
                                                                      <- indexIntArray#
                                                                           dt40 (+# dt38 wild10)
                                                                      } in
                                                                      $wa
                                                                        SPEC
                                                                        ww8
                                                                        0
                                                                        i1
                                                                        0
                                                                        wild13
                                                                        ds10
                                                                        wild12
                                                                        wild11
                                                                        w11
                                                                  };
                                                                0 ->
                                                                  case ww12 of wild9 {
                                                                    __DEFAULT ->
                                                                      let { __DEFAULT ~ wild10
                                                                      <- indexIntArray# ipv18 ww15
                                                                      } in
                                                                      let { __DEFAULT ~ wild11
                                                                      <- indexByteArrayArray#
                                                                           ipv20 ww15
                                                                      } in
                                                                      let { __DEFAULT ~ wild12
                                                                      <- indexIntArray#
                                                                           wild11
                                                                           (+#
                                                                              wild10 (+# ww14 ww11))
                                                                      } in
                                                                      $wa
                                                                        SPEC
                                                                        (+# ww8 1)
                                                                        0
                                                                        ww10
                                                                        (+# ww11 1)
                                                                        (-# wild9 1)
                                                                        (-# ds10 1)
                                                                        ww14
                                                                        ww15
                                                                        ((writeIntArray#
                                                                            ipv55
                                                                            ww8
                                                                            wild12
                                                                            (w11 `cast` ...))
                                                                         `cast` ...);
                                                                    0 ->
                                                                      let { __DEFAULT ~ wild10
                                                                      <- indexIntArray#
                                                                           ipv50 (+# ipv48 ww10)
                                                                      } in
                                                                      let { __DEFAULT ~ wild11
                                                                      <- indexIntArray#
                                                                           ipv38 (+# ipv36 wild10)
                                                                      } in
                                                                      let { __DEFAULT ~ wild12
                                                                      <- indexIntArray#
                                                                           ipv41 (+# ipv39 wild10)
                                                                      } in
                                                                      let { __DEFAULT ~ wild13
                                                                      <- indexIntArray#
                                                                           dt30 (+# dt28 wild10)
                                                                      } in
                                                                      $wa
                                                                        SPEC
                                                                        ww8
                                                                        1
                                                                        ww10
                                                                        0
                                                                        wild13
                                                                        ds10
                                                                        wild12
                                                                        wild11
                                                                        w11
                                                                  }
                                                              };
                                                            0 -> (# w11, I# ww8 #)
                                                          }; } in
                                                    case dt24 of wild9 {
                                                      __DEFAULT ->
                                                        let { __DEFAULT ~ wild10
                                                        <- indexIntArray# ipv53 (+# ipv51 ipv34)
                                                        } in
                                                        let { __DEFAULT ~ wild11
                                                        <- indexIntArray# dt40 (+# dt38 wild10)
                                                        } in
                                                        case <# ipv35 wild11 of _ {
                                                          False ->
                                                            let { __DEFAULT ~ wild13
                                                            <- indexIntArray# ipv50 (+# ipv48 ipv34)
                                                            } in
                                                            let { __DEFAULT ~ wild14
                                                            <- indexIntArray#
                                                                 ipv38 (+# ipv36 wild13)
                                                            } in
                                                            let { __DEFAULT ~ wild15
                                                            <- indexIntArray#
                                                                 ipv41 (+# ipv39 wild13)
                                                            } in
                                                            let {
                                                              i1
                                                              i1 = -# ipv35 wild11 } in
                                                            let { __DEFAULT ~ wild16
                                                            <- indexIntArray# dt30 (+# dt28 wild13)
                                                            } in
                                                            let { (# ipv56, ipv57 #) ~ _
                                                            <- $wa
                                                                 SPEC
                                                                 0
                                                                 1
                                                                 ipv34
                                                                 i1
                                                                 (-# wild16 i1)
                                                                 wild9
                                                                 wild15
                                                                 wild14
                                                                 (ipv54 `cast` ...)
                                                            } in
                                                            let { I# dt46 ~ _ <- ipv57 } in
                                                            let { (# ipv58, ipv59 #) ~ _
                                                            <- unsafeFreezeByteArray#
                                                                 ipv55 (ipv56 `cast` ...)
                                                            } in
                                                            (# ipv58 `cast` ...,
                                                               (Vector 0 dt46 ipv59) `cast` ... #);
                                                          True ->
                                                            let { __DEFAULT ~ wild13
                                                            <- indexIntArray#
                                                                 ipv44 (+# ipv42 wild10)
                                                            } in
                                                            let { __DEFAULT ~ wild14
                                                            <- indexIntArray#
                                                                 ipv47 (+# ipv45 wild10)
                                                            } in
                                                            let { (# ipv56, ipv57 #) ~ _
                                                            <- $wa
                                                                 SPEC
                                                                 0
                                                                 0
                                                                 ipv34
                                                                 ipv35
                                                                 (-# wild11 ipv35)
                                                                 wild9
                                                                 wild14
                                                                 wild13
                                                                 (ipv54 `cast` ...)
                                                            } in
                                                            let { I# dt46 ~ _ <- ipv57 } in
                                                            let { (# ipv58, ipv59 #) ~ _
                                                            <- unsafeFreezeByteArray#
                                                                 ipv55 (ipv56 `cast` ...)
                                                            } in
                                                            (# ipv58 `cast` ...,
                                                               (Vector 0 dt46 ipv59) `cast` ... #)
                                                        };
                                                      0 ->
                                                        let { (# ipv56, ipv57 #) ~ _
                                                        <- $wa
                                                             SPEC 0 0 0 0 0 0 0 0 (ipv54 `cast` ...)
                                                        } in
                                                        let { I# dt46 ~ _ <- ipv57 } in
                                                        let { (# ipv58, ipv59 #) ~ _
                                                        <- unsafeFreezeByteArray#
                                                             ipv55 (ipv56 `cast` ...)
                                                        } in
                                                        (# ipv58 `cast` ...,
                                                           (Vector 0 dt46 ipv59) `cast` ... #)
                                                    }))
                                            ds2)
                                         `cast` ...
                                      } in
                                      runSTRep
                                        (\ @ s s1 ->
                                           let { (di, n) ~ _
                                           <- scanD
                                                $fDTInt
                                                lvl80
                                                theGang
                                                $fNumInt_$c+
                                                lvl7
                                                ((DInt ipv34 ipv35 ipv36) `cast` ...)
                                           } in
                                           let { DInt ipv40 ipv41 ipv42 ~ nt3 <- di `cast` ... } in
                                           let { I# ipv43 ~ n1 <- n } in
                                           case >=# ipv43 0 of _ {
                                             False -> case lvl78 ipv43 of wild6 { };
                                             True ->
                                               let { (# ipv44, ipv45 #) ~ _
                                               <- newByteArray# (*# ipv43 8) (s1 `cast` ...)
                                               } in
                                               let { Gang ww9 ww10 ww11 ~ _ <- theGang } in
                                               let {
                                                 nt4
                                                 nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                                               let { (# ipv46, ipv47 #) ~ _
                                               <- ($wa1
                                                     ww9
                                                     ww10
                                                     ww11
                                                     (++
                                                        $fShowComp2
                                                        ($fShowComp_$cshowsPrec
                                                           $fShowComp7 (WJoinCopy n1) ([])))
                                                     (WorkCopy n1)
                                                     ((\ i s2 ->
                                                         let { (# ipv46, ipv47 #) ~ _
                                                         <- ((((myD lvl79 (nt4 `cast` ...))
                                                               `cast` ...)
                                                                i)
                                                             `cast` ...)
                                                              s2
                                                         } in
                                                         let { (x, y) ~ _ <- ipv47 } in
                                                         let { I# ipv48 ~ _ <- x } in
                                                         let { Vector ipv49 ipv50 ipv51 ~ _
                                                         <- y `cast` ...
                                                         } in
                                                         (# copyByteArray#
                                                              ipv51
                                                              (*# ipv49 8)
                                                              ipv45
                                                              (*# ipv48 8)
                                                              (*# ipv50 8)
                                                              (ipv46 `cast` ...),
                                                            () #)
                                                         `cast` ...)
                                                      `cast` ...)
                                                     (ipv44 `cast` ...))
                                                  `cast` ...
                                               } in
                                               let { (# ipv48, ipv49 #) ~ _
                                               <- unsafeFreezeByteArray# ipv45 (ipv46 `cast` ...)
                                               } in
                                               (# ipv48 `cast` ...,
                                                  (Vector 0 ipv43 ipv49) `cast` ... #)
                                           }) } in
                                  UPSSegd
                                    False
                                    a17
                                    a18
                                    dt3
                                    dt4
                                    dt5
                                    dt6
                                    dt7
                                    dt8
                                    dt9
                                    (splitSSegdOnElemsD
                                       theGang
                                       (USSegd False a17 a18 dt3 dt4 dt5 dt6 dt7 dt8 dt9)) } in
                              let {
                                vsegids3
                                vsegids3 =
                                  let { UPSSegd dt3 dt6 dt7 dt8 dt9 dt10 dt11 dt4 dt5 dt14 ds1 ~ _
                                  <- a19
                                  } in
                                  runSTRep
                                    (\ @ s s1 ->
                                       let {
                                         a11
                                         a11 = -# dt9 1 } in
                                       let {
                                         $j
                                         $j =
                                           \ x ->
                                             let { (# ipv8, ipv9 #) ~ _
                                             <- newByteArray# (*# x 8) (s1 `cast` ...)
                                             } in
                                             letrec {
                                               $wa
                                               $wa =
                                                 \ w10 ww ww1 w11 ->
                                                   let { __DEFAULT ~ _ <- w10 } in
                                                   case <=# ww1 a11 of _ {
                                                     False -> (# w11, I# ww #);
                                                     True ->
                                                       $wa
                                                         SPEC
                                                         (+# ww 1)
                                                         (+# ww1 1)
                                                         ((writeIntArray#
                                                             ipv9 ww ww1 (w11 `cast` ...))
                                                          `cast` ...)
                                                   }; } in
                                             let { (# ipv10, ipv11 #) ~ _
                                             <- $wa SPEC 0 0 (ipv8 `cast` ...)
                                             } in
                                             let { I# dt16 ~ _ <- ipv11 } in
                                             let { (# ipv12, ipv13 #) ~ _
                                             <- unsafeFreezeByteArray# ipv9 (ipv10 `cast` ...)
                                             } in
                                             (# ipv12 `cast` ...,
                                                (Vector 0 dt16 ipv13) `cast` ... #) } in
                                       case ># 0 a11 of _ {
                                         False ->
                                           let {
                                             a12
                                             a12 = +# a11 1 } in
                                           case ># a12 0 of _ {
                                             False -> case lvl89 of wild5 { };
                                             True -> $j a12
                                           };
                                         True -> $j 0
                                       }) } in
                              let {
                                a11
                                a11 =
                                  let { UPSSegd ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ~ _
                                  <- a19
                                  } in
                                  $wmkDist vsegids3 ww4 ww6 ww9 } in
                              let {
                                a12
                                a12 =
                                  $fPRInt_$cfromVectordPR
                                    (let { Vector ww1 ww2 ww3 ~ _ <- xdata } in
                                     let { Vector ipv8 ipv9 ipv10 ~ _ <- $wccat ww1 ww2 ww3 } in
                                     let { Vector ww5 ww6 ww7 ~ _ <- ydata } in
                                     let { Vector ipv11 ipv12 ipv13 ~ _ <- $wccat ww5 ww6 ww7 } in
                                     (runSTRep
                                        (\ @ s s1 ->
                                           let { (# ipv14, ipv15 #) ~ _
                                           <- newArray#
                                                (+# ipv9 ipv12) (uninitialised) (s1 `cast` ...)
                                           } in
                                           letrec {
                                             $wa
                                             $wa =
                                               \ w10 ww8 w11 w12 ->
                                                 let { __DEFAULT ~ _ <- w10 } in
                                                 case w11 of _ {
                                                   Left sa1 ->
                                                     let { I# x ~ _ <- sa1 } in
                                                     case >=# x ipv9 of _ {
                                                       False ->
                                                         let { (# ipv16 #) ~ _
                                                         <- indexArray# ipv10 (+# ipv8 x)
                                                         } in
                                                         $wa
                                                           SPEC
                                                           (+# ww8 1)
                                                           (Left (I# (+# x 1)))
                                                           ((writeArray#
                                                               ipv15 ww8 ipv16 (w12 `cast` ...))
                                                            `cast` ...);
                                                       True -> $wa SPEC ww8 lvl50 w12
                                                     };
                                                   Right sb5 ->
                                                     let { I# x ~ _ <- sb5 } in
                                                     case >=# x ipv12 of _ {
                                                       False ->
                                                         let { (# ipv16 #) ~ _
                                                         <- indexArray# ipv13 (+# ipv11 x)
                                                         } in
                                                         $wa
                                                           SPEC
                                                           (+# ww8 1)
                                                           (Right (I# (+# x 1)))
                                                           ((writeArray#
                                                               ipv15 ww8 ipv16 (w12 `cast` ...))
                                                            `cast` ...);
                                                       True -> (# w12, I# ww8 #)
                                                     }
                                                 }; } in
                                           let { (# ipv16, ipv17 #) ~ _
                                           <- $wa SPEC 0 lvl51 (ipv14 `cast` ...)
                                           } in
                                           let { I# dt6 ~ _ <- ipv17 } in
                                           let { (# ipv18, ipv19 #) ~ _
                                           <- unsafeFreezeArray# ipv15 (ipv16 `cast` ...)
                                           } in
                                           (# ipv18 `cast` ..., Vector 0 dt6 ipv19 #)))
                                     `cast` ...) } in
                              (PNested
                                 (UPVSegd True vsegids3 vsegids3 a19 a19 a11)
                                 a12
                                 segd'1
                                 (let { PInts arrs ~ _ <- a12 `cast` ... } in
                                  (PInt
                                     (let { Vectors ipv8 ipv9 ipv10 ipv11 ~ _ <- arrs } in
                                      let { UPSSegd dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt14
                                                    ds1 ~ _
                                      <- a19
                                      } in
                                      let { Vector ipv12 ipv13 ipv14 ~ _ <- vsegids3 `cast` ... } in
                                      let { DProd ipv15 ipv16 ~ nt3 <- a11 `cast` ... } in
                                      let { DVector ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ~ nt4
                                      <- (imapD'
                                            lvl93
                                            $dDT1
                                            lvl95
                                            theGang
                                            (\ _ x ->
                                               let { (x1, y) ~ _ <- x } in
                                               let { (x2, y1) ~ _ <- x1 } in
                                               let { USegd dt dt15 dt16 dt17 dt18 dt19 dt20 ~ _
                                               <- x2
                                               } in
                                               let { I# ipv17 ~ _ <- y1 } in
                                               let { I# ipv18 ~ _ <- y } in
                                               let { ByteArray ipv26 ~ _ <- lvl97 } in
                                               let { Vector ipv27 ipv28 ipv29 ~ _
                                               <- dt5 `cast` ...
                                               } in
                                               let { Vector ipv30 ipv31 ipv32 ~ _
                                               <- dt4 `cast` ...
                                               } in
                                               letrec {
                                                 $wfoldlM'_loop
                                                 $wfoldlM'_loop =
                                                   \ w10 ww ww1 ->
                                                     let { __DEFAULT ~ _ <- w10 } in
                                                     case >=# ww1 dt15 of _ {
                                                       False ->
                                                         let { __DEFAULT ~ wild8
                                                         <- indexIntArray# dt16 (+# dt ww1)
                                                         } in
                                                         $wfoldlM'_loop
                                                           SPEC (+# ww wild8) (+# ww1 1);
                                                       True -> ww
                                                     }; } in
                                               let { __DEFAULT ~ ww <- $wfoldlM'_loop SPEC 0 0 } in
                                               runSTRep
                                                 (\ @ s s1 ->
                                                    let { (# ipv19, ipv20 #) ~ _
                                                    <- newByteArray# (*# ww 8) (s1 `cast` ...)
                                                    } in
                                                    letrec {
                                                      $wa
                                                      $wa =
                                                        \ w10 ww1 ww2 ww3 ww4 ww5 w11 ->
                                                          let { __DEFAULT ~ _ <- w10 } in
                                                          case >=# ww5 ww4 of _ {
                                                            False ->
                                                              let { __DEFAULT ~ wild8
                                                              <- indexIntArray# ww3 ww5
                                                              } in
                                                              $wa
                                                                SPEC
                                                                (+# ww1 1)
                                                                ww2
                                                                ww3
                                                                ww4
                                                                (+# ww5 1)
                                                                ((writeIntArray#
                                                                    ipv20
                                                                    ww1
                                                                    wild8
                                                                    (w11 `cast` ...))
                                                                 `cast` ...);
                                                            True ->
                                                              case >=# (+# ww2 1) dt15 of _ {
                                                                False ->
                                                                  let {
                                                                    a13
                                                                    a13 = +# ww2 1 } in
                                                                  let { __DEFAULT ~ wild9
                                                                  <- indexIntArray#
                                                                       ipv14
                                                                       (+# ipv12 (+# a13 ipv17))
                                                                  } in
                                                                  let { __DEFAULT ~ wild10
                                                                  <- indexIntArray#
                                                                       ipv29 (+# ipv27 wild9)
                                                                  } in
                                                                  let {
                                                                    $j
                                                                    $j =
                                                                      \ ww6 ->
                                                                        let { __DEFAULT ~ wild11
                                                                        <- indexIntArray#
                                                                             ipv9 wild10
                                                                        } in
                                                                        let { __DEFAULT ~ wild12
                                                                        <- indexIntArray#
                                                                             ipv32 (+# ipv30 wild9)
                                                                        } in
                                                                        let { __DEFAULT ~ wild13
                                                                        <- indexIntArray#
                                                                             dt16 (+# dt a13)
                                                                        } in
                                                                        let { __DEFAULT ~ wild14
                                                                        <- indexByteArrayArray#
                                                                             ipv11 wild10
                                                                        } in
                                                                        $wa
                                                                          SPEC
                                                                          ww1
                                                                          a13
                                                                          wild14
                                                                          (+#
                                                                             (+#
                                                                                (+# wild11 wild12)
                                                                                ww6)
                                                                             wild13)
                                                                          (+#
                                                                             (+# wild11 wild12) ww6)
                                                                          w11 } in
                                                                  case a13 of _ {
                                                                    __DEFAULT -> $j 0;
                                                                    0 -> $j ipv18
                                                                  };
                                                                True -> (# w11, I# ww1 #)
                                                              }
                                                          }; } in
                                                    let { (# ipv21, ipv22 #) ~ _
                                                    <- $wa SPEC 0 (-1) ipv26 0 0 (ipv19 `cast` ...)
                                                    } in
                                                    let { I# dt22 ~ _ <- ipv22 } in
                                                    let { (# ipv23, ipv24 #) ~ _
                                                    <- unsafeFreezeByteArray#
                                                         ipv20 (ipv21 `cast` ...)
                                                    } in
                                                    (# ipv23 `cast` ...,
                                                       (Vector 0 dt22 ipv24) `cast` ... #)))
                                            (nt3 `cast` ...))
                                         `cast` ...
                                      } in
                                      runSTRep
                                        (\ @ s s1 ->
                                           let { (di, n) ~ _
                                           <- scanD
                                                $fDTInt
                                                lvl92
                                                theGang
                                                $fNumInt_$c+
                                                lvl7
                                                ((DInt ipv17 ipv18 ipv19) `cast` ...)
                                           } in
                                           let { DInt ipv23 ipv24 ipv25 ~ nt5 <- di `cast` ... } in
                                           let { I# ipv26 ~ n1 <- n } in
                                           case >=# ipv26 0 of _ {
                                             False -> case lvl90 ipv26 of wild6 { };
                                             True ->
                                               let { (# ipv27, ipv28 #) ~ _
                                               <- newByteArray# (*# ipv26 8) (s1 `cast` ...)
                                               } in
                                               let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                                               let {
                                                 nt6
                                                 nt6 = DProd (nt5 `cast` ...) (nt4 `cast` ...) } in
                                               let { (# ipv29, ipv30 #) ~ _
                                               <- ($wa1
                                                     ww1
                                                     ww2
                                                     ww3
                                                     (++
                                                        $fShowComp2
                                                        ($fShowComp_$cshowsPrec
                                                           $fShowComp7 (WJoinCopy n1) ([])))
                                                     (WorkCopy n1)
                                                     ((\ i s2 ->
                                                         let { (# ipv29, ipv30 #) ~ _
                                                         <- ((((myD lvl91 (nt6 `cast` ...))
                                                               `cast` ...)
                                                                i)
                                                             `cast` ...)
                                                              s2
                                                         } in
                                                         let { (x, y) ~ _ <- ipv30 } in
                                                         let { I# ipv31 ~ _ <- x } in
                                                         let { Vector ipv32 ipv33 ipv34 ~ _
                                                         <- y `cast` ...
                                                         } in
                                                         (# copyByteArray#
                                                              ipv34
                                                              (*# ipv32 8)
                                                              ipv28
                                                              (*# ipv31 8)
                                                              (*# ipv33 8)
                                                              (ipv29 `cast` ...),
                                                            () #)
                                                         `cast` ...)
                                                      `cast` ...)
                                                     (ipv27 `cast` ...))
                                                  `cast` ...
                                               } in
                                               let { (# ipv31, ipv32 #) ~ _
                                               <- unsafeFreezeByteArray# ipv28 (ipv29 `cast` ...)
                                               } in
                                               (# ipv31 `cast` ...,
                                                  (Vector 0 ipv26 ipv32) `cast` ... #)
                                           })))
                                  `cast` ...))
                              `cast` ... } in
                          (PNested
                             (let {
                                upssegd
                                upssegd =
                                  let { UPSegd dt dt3 dt4 dt5 dt6 dt7 dt8 ds1 ~ _ <- segd' } in
                                  let {
                                    dt9
                                    dt9 =
                                      runSTRep
                                        (\ @ s s1 ->
                                           let {
                                             $j
                                             $j =
                                               \ x ->
                                                 let { (# ipv8, ipv9 #) ~ _
                                                 <- newByteArray# (*# x 8) (s1 `cast` ...)
                                                 } in
                                                 letrec {
                                                   $wa
                                                   $wa =
                                                     \ w10 ww ww1 w11 ->
                                                       let { __DEFAULT ~ _ <- w10 } in
                                                       case <=# ww1 0 of _ {
                                                         False ->
                                                           $wa
                                                             SPEC
                                                             (+# ww 1)
                                                             (-# ww1 1)
                                                             ((writeIntArray#
                                                                 ipv9 ww 0 (w11 `cast` ...))
                                                              `cast` ...);
                                                         True -> (# w11, I# ww #)
                                                       }; } in
                                                 let { (# ipv10, ipv11 #) ~ _
                                                 <- $wa SPEC 0 dt3 (ipv8 `cast` ...)
                                                 } in
                                                 let { I# dt11 ~ _ <- ipv11 } in
                                                 let { (# ipv12, ipv13 #) ~ _
                                                 <- unsafeFreezeByteArray# ipv9 (ipv10 `cast` ...)
                                                 } in
                                                 (# ipv12 `cast` ...,
                                                    (Vector 0 dt11 ipv13) `cast` ... #) } in
                                           case <=# dt3 0 of _ {
                                             False -> $j dt3;
                                             True -> $j 0
                                           }) } in
                                  let {
                                    a11
                                    a11 = Vector dt5 dt6 dt7 } in
                                  UPSSegd
                                    True
                                    (a11 `cast` ...)
                                    dt9
                                    dt
                                    dt3
                                    dt4
                                    dt5
                                    dt6
                                    dt7
                                    dt8
                                    (splitSSegdOnElemsD
                                       theGang
                                       (USSegd
                                          True
                                          (a11 `cast` ...)
                                          dt9
                                          dt
                                          dt3
                                          dt4
                                          dt5
                                          dt6
                                          dt7
                                          dt8)) } in
                              let {
                                vsegids3
                                vsegids3 =
                                  let { UPSSegd dt3 dt6 dt7 dt8 dt9 dt10 dt11 dt4 dt5 dt14 ds1 ~ _
                                  <- upssegd
                                  } in
                                  runSTRep
                                    (\ @ s s1 ->
                                       let {
                                         a11
                                         a11 = -# dt9 1 } in
                                       let {
                                         $j
                                         $j =
                                           \ x ->
                                             let { (# ipv8, ipv9 #) ~ _
                                             <- newByteArray# (*# x 8) (s1 `cast` ...)
                                             } in
                                             letrec {
                                               $wa
                                               $wa =
                                                 \ w10 ww ww1 w11 ->
                                                   let { __DEFAULT ~ _ <- w10 } in
                                                   case <=# ww1 a11 of _ {
                                                     False -> (# w11, I# ww #);
                                                     True ->
                                                       $wa
                                                         SPEC
                                                         (+# ww 1)
                                                         (+# ww1 1)
                                                         ((writeIntArray#
                                                             ipv9 ww ww1 (w11 `cast` ...))
                                                          `cast` ...)
                                                   }; } in
                                             let { (# ipv10, ipv11 #) ~ _
                                             <- $wa SPEC 0 0 (ipv8 `cast` ...)
                                             } in
                                             let { I# dt16 ~ _ <- ipv11 } in
                                             let { (# ipv12, ipv13 #) ~ _
                                             <- unsafeFreezeByteArray# ipv9 (ipv10 `cast` ...)
                                             } in
                                             (# ipv12 `cast` ...,
                                                (Vector 0 dt16 ipv13) `cast` ... #) } in
                                       case ># 0 a11 of _ {
                                         False ->
                                           let {
                                             a12
                                             a12 = +# a11 1 } in
                                           case ># a12 0 of _ {
                                             False -> case lvl98 of wild3 { };
                                             True -> $j a12
                                           };
                                         True -> $j 0
                                       }) } in
                              UPVSegd
                                True vsegids3 vsegids3 upssegd upssegd (mkDist vsegids3 upssegd))
                             ((PNesteds
                                 (runSTRep
                                    (\ @ s s1 ->
                                       let { (# ipv8, ipv9 #) ~ _
                                       <- newArray# 1 (uninitialised) (s1 `cast` ...)
                                       } in
                                       letrec {
                                         $wa
                                         $wa =
                                           \ w10 ww w11 w12 ->
                                             let { __DEFAULT ~ _ <- w10 } in
                                             case w11 of _ {
                                               False -> (# w12, I# ww #);
                                               True ->
                                                 $wa
                                                   SPEC
                                                   (+# ww 1)
                                                   False
                                                   ((writeArray# ipv9 ww lvl230 (w12 `cast` ...))
                                                    `cast` ...)
                                             }; } in
                                       let { (# ipv10, ipv11 #) ~ _
                                       <- $wa SPEC 0 True (ipv8 `cast` ...)
                                       } in
                                       let { I# dt6 ~ _ <- ipv11 } in
                                       let { (# ipv12, ipv13 #) ~ _
                                       <- unsafeFreezeArray# ipv9 (ipv10 `cast` ...)
                                       } in
                                       (# ipv12 `cast` ..., Vector 0 dt6 ipv13 #))))
                              `cast` ...)
                             segd'
                             lvl230)
                          `cast` ...))
                      `cast` ... } in
                case w of wild2 {
                  __DEFAULT ->
                    let { DVector ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ~ nt1
                    <- (imapD'
                          $fDTInt $dDT1 lvl123 theGang lvl124 (splitLenD theGang (I# wild2)))
                       `cast` ...
                    } in
                    let { Vector dt3 dt4 dt5 ~ _
                    <- (runSTRep
                          (\ @ s s1 ->
                             let { (di, n) ~ _
                             <- scanD
                                  $fDTInt
                                  lvl121
                                  theGang
                                  $fNumInt_$c+
                                  lvl7
                                  ((DInt ipv4 ipv5 ipv6) `cast` ...)
                             } in
                             let { DInt ipv10 ipv11 ipv12 ~ nt2 <- di `cast` ... } in
                             let { I# ipv13 ~ n1 <- n } in
                             case >=# ipv13 0 of _ {
                               False -> case lvl119 ipv13 of wild3 { };
                               True ->
                                 let { (# ipv14, ipv15 #) ~ _
                                 <- newByteArray# (*# ipv13 8) (s1 `cast` ...)
                                 } in
                                 let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                                 let {
                                   nt3
                                   nt3 = DProd (nt2 `cast` ...) (nt1 `cast` ...) } in
                                 let { (# ipv16, ipv17 #) ~ _
                                 <- ($wa1
                                       ww1
                                       ww2
                                       ww3
                                       (++
                                          $fShowComp2
                                          ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                       (WorkCopy n1)
                                       ((\ i s2 ->
                                           let { (# ipv16, ipv17 #) ~ _
                                           <- ((((myD lvl120 (nt3 `cast` ...)) `cast` ...) i)
                                               `cast` ...)
                                                s2
                                           } in
                                           let { (x, y) ~ _ <- ipv17 } in
                                           let { I# ipv18 ~ _ <- x } in
                                           let { Vector ipv19 ipv20 ipv21 ~ _ <- y `cast` ... } in
                                           (# copyByteArray#
                                                ipv21
                                                (*# ipv19 8)
                                                ipv15
                                                (*# ipv18 8)
                                                (*# ipv20 8)
                                                (ipv16 `cast` ...),
                                              () #)
                                           `cast` ...)
                                        `cast` ...)
                                       (ipv14 `cast` ...))
                                    `cast` ...
                                 } in
                                 let { (# ipv18, ipv19 #) ~ _
                                 <- unsafeFreezeByteArray# ipv15 (ipv16 `cast` ...)
                                 } in
                                 (# ipv18 `cast` ..., (Vector 0 ipv13 ipv19) `cast` ... #)
                             }))
                       `cast` ...
                    } in
                    let { Gang dt6 ds1 ds2 ~ wild <- theGang } in
                    let { __DEFAULT ~ wild1 <- quotInt# dt4 dt6 } in
                    let { __DEFAULT ~ wild3 <- remInt# dt4 dt6 } in
                    let { DProd dx dy ~ _
                    <- (generateD
                          lvl115
                          lvl117
                          wild
                          (\ i ->
                             let {
                               ys
                               ys =
                                 let { I# x1 ~ _ <- i } in
                                 let {
                                   $j
                                   $j =
                                     \ y ->
                                       let {
                                         $j1
                                         $j1 =
                                           \ dt7 ->
                                             runSTRep
                                               (\ @ s s1 ->
                                                  let { (# ipv10, ipv11 #) ~ _
                                                  <- newByteArray# (*# (+# 1 dt7) 8) (s1 `cast` ...)
                                                  } in
                                                  let {
                                                    a11
                                                    a11 = +# dt3 y } in
                                                  letrec {
                                                    $wa
                                                    $wa =
                                                      \ w9 ww w10 w11 ->
                                                        let { __DEFAULT ~ _ <- w9 } in
                                                        case w10 of _ {
                                                          Left sa1 ->
                                                            case sa1 of _ {
                                                              False -> $wa SPEC ww lvl118 w11;
                                                              True ->
                                                                $wa
                                                                  SPEC
                                                                  (+# ww 1)
                                                                  lvl71
                                                                  ((writeIntArray#
                                                                      ipv11 ww 0 (w11 `cast` ...))
                                                                   `cast` ...)
                                                            };
                                                          Right sb5 ->
                                                            let { (s2, x) ~ _ <- sb5 } in
                                                            let { I# x2 ~ _ <- s2 } in
                                                            case >=# x2 dt7 of _ {
                                                              False ->
                                                                let { I# x3 ~ _ <- x } in
                                                                let { __DEFAULT ~ wild10
                                                                <- indexIntArray# dt5 (+# a11 x2)
                                                                } in
                                                                let {
                                                                  x#
                                                                  x# = +# x3 wild10 } in
                                                                $wa
                                                                  SPEC
                                                                  (+# ww 1)
                                                                  (Right (I# (+# x2 1), I# x#))
                                                                  ((writeIntArray#
                                                                      ipv11 ww x# (w11 `cast` ...))
                                                                   `cast` ...);
                                                              True -> (# w11, I# ww #)
                                                            }
                                                        }; } in
                                                  let { (# ipv12, ipv13 #) ~ _
                                                  <- $wa SPEC 0 lvl72 (ipv10 `cast` ...)
                                                  } in
                                                  let { I# dt9 ~ _ <- ipv13 } in
                                                  let { (# ipv14, ipv15 #) ~ _
                                                  <- unsafeFreezeByteArray# ipv11 (ipv12 `cast` ...)
                                                  } in
                                                  (# ipv14 `cast` ...,
                                                     (Vector 0 dt9 ipv15) `cast` ... #)) } in
                                       case <# x1 wild3 of _ {
                                         False -> $j1 wild1;
                                         True -> $j1 (+# wild1 1)
                                       } } in
                                 case <# x1 wild3 of _ {
                                   False -> $j (+# (*# wild1 x1) wild3);
                                   True -> $j (*# (+# wild1 1) x1)
                                 } } in
                             (let { Vector dt7 dt8 dt9 ~ _ <- ys `cast` ... } in
                              (Vector dt7 (-# dt8 1) dt9) `cast` ...,
                              let { Vector dt7 dt8 dt9 ~ _ <- ys `cast` ... } in
                              let { __DEFAULT ~ wild5
                              <- indexIntArray# dt9 (+# dt7 (-# dt8 1))
                              } in
                              I# wild5)))
                       `cast` ...
                    } in
                    let { (x1, ds3) ~ _
                    <- scanD $fDTInt lvl114 wild $fNumInt_$c+ lvl7 dy
                    } in
                    let { DInt ipv10 ipv11 ipv12 ~ nt2 <- x1 `cast` ... } in
                    let { DVector ipv13 ipv14 ipv15 ipv16 ipv17 ipv18 ~ nt3
                    <- (imapD'
                          lvl112
                          $dDT2
                          lvl113
                          wild
                          lvl63
                          ((DProd (nt2 `cast` ...) dx) `cast` ...))
                       `cast` ...
                    } in
                    let { Vector dt8 dt9 dt10 ~ dt7
                    <- (runSTRep
                          (\ @ s s1 ->
                             let { (di, n) ~ _
                             <- scanD
                                  $fDTInt
                                  lvl111
                                  wild
                                  $fNumInt_$c+
                                  lvl7
                                  ((DInt ipv13 ipv14 ipv15) `cast` ...)
                             } in
                             let { DInt ipv19 ipv20 ipv21 ~ nt4 <- di `cast` ... } in
                             let { I# ipv22 ~ n1 <- n } in
                             case >=# ipv22 0 of _ {
                               False -> case lvl109 ipv22 of wild8 { };
                               True ->
                                 let { (# ipv23, ipv24 #) ~ _
                                 <- newByteArray# (*# ipv22 8) (s1 `cast` ...)
                                 } in
                                 let {
                                   nt5
                                   nt5 = DProd (nt4 `cast` ...) (nt3 `cast` ...) } in
                                 let { (# ipv25, ipv26 #) ~ _
                                 <- ($wa1
                                       dt6
                                       ds1
                                       ds2
                                       (++
                                          $fShowComp2
                                          ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                       (WorkCopy n1)
                                       ((\ i s2 ->
                                           let { (# ipv25, ipv26 #) ~ _
                                           <- ((((myD lvl110 (nt5 `cast` ...)) `cast` ...) i)
                                               `cast` ...)
                                                s2
                                           } in
                                           let { (x, y) ~ _ <- ipv26 } in
                                           let { I# ipv27 ~ _ <- x } in
                                           let { Vector ipv28 ipv29 ipv30 ~ _ <- y `cast` ... } in
                                           (# copyByteArray#
                                                ipv30
                                                (*# ipv28 8)
                                                ipv24
                                                (*# ipv27 8)
                                                (*# ipv29 8)
                                                (ipv25 `cast` ...),
                                              () #)
                                           `cast` ...)
                                        `cast` ...)
                                       (ipv23 `cast` ...))
                                    `cast` ...
                                 } in
                                 let { (# ipv27, ipv28 #) ~ _
                                 <- unsafeFreezeByteArray# ipv24 (ipv25 `cast` ...)
                                 } in
                                 (# ipv27 `cast` ..., (Vector 0 ipv22 ipv28) `cast` ... #)
                             }))
                       `cast` ...
                    } in
                    let { I# dt14 ~ _
                    <- foldD
                         $fDTInt
                         lvl106
                         wild
                         $fNumInt_$c+
                         (generateD
                            $fDTInt
                            lvl108
                            wild
                            ((\ i ->
                                let { I# x2 ~ _ <- i } in
                                let {
                                  $w$j4
                                  $w$j4 =
                                    \ w9 ->
                                      let {
                                        $w$j5
                                        $w$j5 =
                                          \ w10 ->
                                            let {
                                              a11
                                              a11 = +# dt3 w9 } in
                                            letrec {
                                              $wfoldlM'_loop
                                              $wfoldlM'_loop =
                                                \ w11 ww ww1 ->
                                                  let { __DEFAULT ~ _ <- w11 } in
                                                  case >=# ww1 w10 of _ {
                                                    False ->
                                                      let { __DEFAULT ~ wild8
                                                      <- indexIntArray# dt5 (+# a11 ww1)
                                                      } in
                                                      $wfoldlM'_loop SPEC (+# ww wild8) (+# ww1 1);
                                                    True -> ww
                                                  }; } in
                                            $wfoldlM'_loop SPEC 0 0 } in
                                      case <# x2 wild3 of _ {
                                        False -> $w$j5 wild1;
                                        True -> $w$j5 (+# wild1 1)
                                      } } in
                                case <# x2 wild3 of _ {
                                  False ->
                                    let { __DEFAULT ~ ww <- $w$j4 (+# (*# wild1 x2) wild3) } in
                                    (I# ww) `cast` ...;
                                  True ->
                                    let { __DEFAULT ~ ww <- $w$j4 (*# (+# wild1 1) x2) } in
                                    (I# ww) `cast` ...
                                })
                             `cast` ...))
                    } in
                    let { PNested vsegd xs segd flat ~ _ <- w2 `cast` ... } in
                    let {
                      ipv19
                      ipv19 =
                        splitSegdOnElemsD wild (USegd dt3 dt4 dt5 dt8 dt9 dt10 dt14) } in
                    let {
                      segd1
                      segd1 = UPSegd dt3 dt4 dt5 dt8 dt9 dt10 dt14 ipv19 } in
                    let {
                      vsegd'
                      vsegd' = updateVSegs (replicate_s $fEltInt segd1) vsegd } in
                    let {
                      a11
                      a11 = unsafeDemoteToUPSegd vsegd' } in
                    let {
                      flat1
                      flat1 =
                        let { PInts arrs ~ _ <- xs `cast` ... } in
                        (PInt
                           (let { UPVSegd ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ~ _
                            <- vsegd'
                            } in
                            let { Vectors ipv26 ipv27 ipv28 ipv29 ~ _ <- arrs } in
                            let { UPSSegd dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24
                                          ds4 ~ _
                            <- ipv23
                            } in
                            let { Vector ipv30 ipv31 ipv32 ~ _ <- ipv21 `cast` ... } in
                            let { DProd ipv33 ipv34 ~ nt5 <- ipv25 `cast` ... } in
                            let { DVector ipv35 ipv36 ipv37 ipv38 ipv39 ipv40 ~ nt6
                            <- (imapD'
                                  lvl103
                                  $dDT1
                                  lvl104
                                  wild
                                  (\ _ x ->
                                     let { (x2, y) ~ _ <- x } in
                                     let { (x3, y1) ~ _ <- x2 } in
                                     let { USegd dt25 dt26 dt27 dt28 dt29 dt30 dt31 ~ _ <- x3 } in
                                     let { I# ipv35 ~ _ <- y1 } in
                                     let { I# ipv36 ~ _ <- y } in
                                     let { ByteArray ipv37 ~ _ <- lvl105 } in
                                     let { Vector ipv38 ipv39 ipv40 ~ _ <- dt17 `cast` ... } in
                                     let { Vector ipv41 ipv42 ipv43 ~ _ <- dt16 `cast` ... } in
                                     letrec {
                                       $wfoldlM'_loop
                                       $wfoldlM'_loop =
                                         \ w9 ww ww1 ->
                                           let { __DEFAULT ~ _ <- w9 } in
                                           case >=# ww1 dt26 of _ {
                                             False ->
                                               let { __DEFAULT ~ wild13
                                               <- indexIntArray# dt27 (+# dt25 ww1)
                                               } in
                                               $wfoldlM'_loop SPEC (+# ww wild13) (+# ww1 1);
                                             True -> ww
                                           }; } in
                                     let { __DEFAULT ~ ww <- $wfoldlM'_loop SPEC 0 0 } in
                                     runSTRep
                                       (\ @ s s1 ->
                                          let { (# ipv44, ipv45 #) ~ _
                                          <- newByteArray# (*# ww 8) (s1 `cast` ...)
                                          } in
                                          letrec {
                                            $wa
                                            $wa =
                                              \ w9 ww1 ww2 ww3 ww4 ww5 w10 ->
                                                let { __DEFAULT ~ _ <- w9 } in
                                                case >=# ww5 ww4 of _ {
                                                  False ->
                                                    let { __DEFAULT ~ wild13
                                                    <- indexIntArray# ww3 ww5
                                                    } in
                                                    $wa
                                                      SPEC
                                                      (+# ww1 1)
                                                      ww2
                                                      ww3
                                                      ww4
                                                      (+# ww5 1)
                                                      ((writeIntArray#
                                                          ipv45 ww1 wild13 (w10 `cast` ...))
                                                       `cast` ...);
                                                  True ->
                                                    case >=# (+# ww2 1) dt26 of _ {
                                                      False ->
                                                        let {
                                                          a12
                                                          a12 = +# ww2 1 } in
                                                        let { __DEFAULT ~ wild14
                                                        <- indexIntArray#
                                                             ipv32 (+# ipv30 (+# a12 ipv35))
                                                        } in
                                                        let { __DEFAULT ~ wild15
                                                        <- indexIntArray# ipv40 (+# ipv38 wild14)
                                                        } in
                                                        let {
                                                          $j
                                                          $j =
                                                            \ ww6 ->
                                                              let { __DEFAULT ~ wild16
                                                              <- indexIntArray# ipv27 wild15
                                                              } in
                                                              let { __DEFAULT ~ wild17
                                                              <- indexIntArray#
                                                                   ipv43 (+# ipv41 wild14)
                                                              } in
                                                              let { __DEFAULT ~ wild18
                                                              <- indexIntArray# dt27 (+# dt25 a12)
                                                              } in
                                                              let { __DEFAULT ~ wild19
                                                              <- indexByteArrayArray# ipv29 wild15
                                                              } in
                                                              $wa
                                                                SPEC
                                                                ww1
                                                                a12
                                                                wild19
                                                                (+#
                                                                   (+# (+# wild16 wild17) ww6)
                                                                   wild18)
                                                                (+# (+# wild16 wild17) ww6)
                                                                w10 } in
                                                        case a12 of _ {
                                                          __DEFAULT -> $j 0;
                                                          0 -> $j ipv36
                                                        };
                                                      True -> (# w10, I# ww1 #)
                                                    }
                                                }; } in
                                          let { (# ipv46, ipv47 #) ~ _
                                          <- $wa SPEC 0 (-1) ipv37 0 0 (ipv44 `cast` ...)
                                          } in
                                          let { I# dt33 ~ _ <- ipv47 } in
                                          let { (# ipv48, ipv49 #) ~ _
                                          <- unsafeFreezeByteArray# ipv45 (ipv46 `cast` ...)
                                          } in
                                          (# ipv48 `cast` ..., (Vector 0 dt33 ipv49) `cast` ... #)))
                                  (nt5 `cast` ...))
                               `cast` ...
                            } in
                            runSTRep
                              (\ @ s s1 ->
                                 let { (di, n) ~ _
                                 <- scanD
                                      $fDTInt
                                      lvl102
                                      wild
                                      $fNumInt_$c+
                                      lvl7
                                      ((DInt ipv35 ipv36 ipv37) `cast` ...)
                                 } in
                                 let { DInt ipv41 ipv42 ipv43 ~ nt7 <- di `cast` ... } in
                                 let { I# ipv44 ~ n1 <- n } in
                                 case >=# ipv44 0 of _ {
                                   False -> case lvl100 ipv44 of wild11 { };
                                   True ->
                                     let { (# ipv45, ipv46 #) ~ _
                                     <- newByteArray# (*# ipv44 8) (s1 `cast` ...)
                                     } in
                                     let {
                                       nt8
                                       nt8 = DProd (nt7 `cast` ...) (nt6 `cast` ...) } in
                                     let { (# ipv47, ipv48 #) ~ _
                                     <- ($wa1
                                           dt6
                                           ds1
                                           ds2
                                           (++
                                              $fShowComp2
                                              ($fShowComp_$cshowsPrec
                                                 $fShowComp7 (WJoinCopy n1) ([])))
                                           (WorkCopy n1)
                                           ((\ i s2 ->
                                               let { (# ipv47, ipv48 #) ~ _
                                               <- ((((myD lvl101 (nt8 `cast` ...)) `cast` ...) i)
                                                   `cast` ...)
                                                    s2
                                               } in
                                               let { (x, y) ~ _ <- ipv48 } in
                                               let { I# ipv49 ~ _ <- x } in
                                               let { Vector ipv50 ipv51 ipv52 ~ _
                                               <- y `cast` ...
                                               } in
                                               (# copyByteArray#
                                                    ipv52
                                                    (*# ipv50 8)
                                                    ipv46
                                                    (*# ipv49 8)
                                                    (*# ipv51 8)
                                                    (ipv47 `cast` ...),
                                                  () #)
                                               `cast` ...)
                                            `cast` ...)
                                           (ipv45 `cast` ...))
                                        `cast` ...
                                     } in
                                     let { (# ipv49, ipv50 #) ~ _
                                     <- unsafeFreezeByteArray# ipv46 (ipv47 `cast` ...)
                                     } in
                                     (# ipv49 `cast` ..., (Vector 0 ipv44 ipv50) `cast` ... #)
                                 })))
                        `cast` ... } in
                    $w$j3
                      ((PNested
                          (let {
                             vsegids3
                             vsegids3 =
                               runSTRep
                                 (\ @ s s1 ->
                                    let {
                                      a12
                                      a12 = -# dt4 1 } in
                                    let {
                                      $j
                                      $j =
                                        \ x ->
                                          let { (# ipv20, ipv21 #) ~ _
                                          <- newByteArray# (*# x 8) (s1 `cast` ...)
                                          } in
                                          letrec {
                                            $wa
                                            $wa =
                                              \ w9 ww ww1 w10 ->
                                                let { __DEFAULT ~ _ <- w9 } in
                                                case <=# ww1 a12 of _ {
                                                  False -> (# w10, I# ww #);
                                                  True ->
                                                    $wa
                                                      SPEC
                                                      (+# ww 1)
                                                      (+# ww1 1)
                                                      ((writeIntArray#
                                                          ipv21 ww ww1 (w10 `cast` ...))
                                                       `cast` ...)
                                                }; } in
                                          let { (# ipv22, ipv23 #) ~ _
                                          <- $wa SPEC 0 0 (ipv20 `cast` ...)
                                          } in
                                          let { I# dt16 ~ _ <- ipv23 } in
                                          let { (# ipv24, ipv25 #) ~ _
                                          <- unsafeFreezeByteArray# ipv21 (ipv22 `cast` ...)
                                          } in
                                          (# ipv24 `cast` ...,
                                             (Vector 0 dt16 ipv25) `cast` ... #) } in
                                    case ># 0 a12 of _ {
                                      False ->
                                        let {
                                          a13
                                          a13 = +# a12 1 } in
                                        case ># a13 0 of _ {
                                          False -> case lvl99 of wild9 { };
                                          True -> $j a13
                                        };
                                      True -> $j 0
                                    }) } in
                           let {
                             dt15
                             dt15 =
                               runSTRep
                                 (\ @ s s1 ->
                                    let {
                                      $j
                                      $j =
                                        \ x ->
                                          let { (# ipv20, ipv21 #) ~ _
                                          <- newByteArray# (*# x 8) (s1 `cast` ...)
                                          } in
                                          letrec {
                                            $wa
                                            $wa =
                                              \ w9 ww ww1 w10 ->
                                                let { __DEFAULT ~ _ <- w9 } in
                                                case <=# ww1 0 of _ {
                                                  False ->
                                                    $wa
                                                      SPEC
                                                      (+# ww 1)
                                                      (-# ww1 1)
                                                      ((writeIntArray# ipv21 ww 0 (w10 `cast` ...))
                                                       `cast` ...);
                                                  True -> (# w10, I# ww #)
                                                }; } in
                                          let { (# ipv22, ipv23 #) ~ _
                                          <- $wa SPEC 0 dt4 (ipv20 `cast` ...)
                                          } in
                                          let { I# dt17 ~ _ <- ipv23 } in
                                          let { (# ipv24, ipv25 #) ~ _
                                          <- unsafeFreezeByteArray# ipv21 (ipv22 `cast` ...)
                                          } in
                                          (# ipv24 `cast` ...,
                                             (Vector 0 dt17 ipv25) `cast` ... #) } in
                                    case <=# dt4 0 of _ {
                                      False -> $j dt4;
                                      True -> $j 0
                                    }) } in
                           let {
                             a12
                             a12 =
                               splitSSegdOnElemsD
                                 wild
                                 (USSegd
                                    True (dt7 `cast` ...) dt15 dt3 dt4 dt5 dt8 dt9 dt10 dt14) } in
                           let {
                             upssegd
                             upssegd =
                               UPSSegd
                                 True (dt7 `cast` ...) dt15 dt3 dt4 dt5 dt8 dt9 dt10 dt14 a12 } in
                           UPVSegd
                             True
                             vsegids3
                             vsegids3
                             upssegd
                             upssegd
                             ($wmkDist vsegids3 dt3 dt5 dt10))
                          ((PNesteds
                              (runSTRep
                                 (\ @ s s1 ->
                                    let { (# ipv20, ipv21 #) ~ _
                                    <- newArray# 1 (uninitialised) (s1 `cast` ...)
                                    } in
                                    let {
                                      lvl230
                                      lvl230 = PNested vsegd' xs a11 (flat1 `cast` ...) } in
                                    letrec {
                                      $wa
                                      $wa =
                                        \ w9 ww w10 w11 ->
                                          let { __DEFAULT ~ _ <- w9 } in
                                          case w10 of _ {
                                            False -> (# w11, I# ww #);
                                            True ->
                                              $wa
                                                SPEC
                                                (+# ww 1)
                                                False
                                                ((writeArray#
                                                    ipv21 ww (lvl230 `cast` ...) (w11 `cast` ...))
                                                 `cast` ...)
                                          }; } in
                                    let { (# ipv22, ipv23 #) ~ _
                                    <- $wa SPEC 0 True (ipv20 `cast` ...)
                                    } in
                                    let { I# dt16 ~ _ <- ipv23 } in
                                    let { (# ipv24, ipv25 #) ~ _
                                    <- unsafeFreezeArray# ipv21 (ipv22 `cast` ...)
                                    } in
                                    (# ipv24 `cast` ..., Vector 0 dt16 ipv25 #))))
                           `cast` ...)
                          segd1
                          ((PNested vsegd' xs a11 (flat1 `cast` ...)) `cast` ...))
                       `cast` ...);
                  0 -> $w$j3 (lvl129 `cast` ...)
                } } in
          case w of wild2 {
            __DEFAULT ->
              let { DVector ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ~ nt1
              <- (imapD'
                    $fDTInt $dDT1 lvl153 theGang lvl154 (splitLenD theGang (I# wild2)))
                 `cast` ...
              } in
              let { Vector dt3 dt4 dt5 ~ _
              <- (runSTRep
                    (\ @ s s1 ->
                       let { (di, n) ~ _
                       <- scanD
                            $fDTInt
                            lvl152
                            theGang
                            $fNumInt_$c+
                            lvl7
                            ((DInt ipv4 ipv5 ipv6) `cast` ...)
                       } in
                       let { DInt ipv10 ipv11 ipv12 ~ nt2 <- di `cast` ... } in
                       let { I# ipv13 ~ n1 <- n } in
                       case >=# ipv13 0 of _ {
                         False -> case lvl150 ipv13 of wild3 { };
                         True ->
                           let { (# ipv14, ipv15 #) ~ _
                           <- newByteArray# (*# ipv13 8) (s1 `cast` ...)
                           } in
                           let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                           let {
                             nt3
                             nt3 = DProd (nt2 `cast` ...) (nt1 `cast` ...) } in
                           let { (# ipv16, ipv17 #) ~ _
                           <- ($wa1
                                 ww1
                                 ww2
                                 ww3
                                 (++
                                    $fShowComp2
                                    ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                 (WorkCopy n1)
                                 ((\ i s2 ->
                                     let { (# ipv16, ipv17 #) ~ _
                                     <- ((((myD lvl151 (nt3 `cast` ...)) `cast` ...) i) `cast` ...)
                                          s2
                                     } in
                                     let { (x, y) ~ _ <- ipv17 } in
                                     let { I# ipv18 ~ _ <- x } in
                                     let { Vector ipv19 ipv20 ipv21 ~ _ <- y `cast` ... } in
                                     (# copyByteArray#
                                          ipv21
                                          (*# ipv19 8)
                                          ipv15
                                          (*# ipv18 8)
                                          (*# ipv20 8)
                                          (ipv16 `cast` ...),
                                        () #)
                                     `cast` ...)
                                  `cast` ...)
                                 (ipv14 `cast` ...))
                              `cast` ...
                           } in
                           let { (# ipv18, ipv19 #) ~ _
                           <- unsafeFreezeByteArray# ipv15 (ipv16 `cast` ...)
                           } in
                           (# ipv18 `cast` ..., (Vector 0 ipv13 ipv19) `cast` ... #)
                       }))
                 `cast` ...
              } in
              let { Gang dt6 ds1 ds2 ~ wild <- theGang } in
              let { __DEFAULT ~ wild1 <- quotInt# dt4 dt6 } in
              let { __DEFAULT ~ wild3 <- remInt# dt4 dt6 } in
              let { DProd dx dy ~ _
              <- (generateD
                    lvl146
                    lvl148
                    wild
                    (\ i ->
                       let {
                         ys
                         ys =
                           let { I# x1 ~ _ <- i } in
                           let {
                             $j
                             $j =
                               \ y ->
                                 let {
                                   $j1
                                   $j1 =
                                     \ dt7 ->
                                       runSTRep
                                         (\ @ s s1 ->
                                            let { (# ipv10, ipv11 #) ~ _
                                            <- newByteArray# (*# (+# 1 dt7) 8) (s1 `cast` ...)
                                            } in
                                            let {
                                              a11
                                              a11 = +# dt3 y } in
                                            letrec {
                                              $wa
                                              $wa =
                                                \ w6 ww w7 w8 ->
                                                  let { __DEFAULT ~ _ <- w6 } in
                                                  case w7 of _ {
                                                    Left sa1 ->
                                                      case sa1 of _ {
                                                        False -> $wa SPEC ww lvl149 w8;
                                                        True ->
                                                          $wa
                                                            SPEC
                                                            (+# ww 1)
                                                            lvl71
                                                            ((writeIntArray#
                                                                ipv11 ww 0 (w8 `cast` ...))
                                                             `cast` ...)
                                                      };
                                                    Right sb5 ->
                                                      let { (s2, x) ~ _ <- sb5 } in
                                                      let { I# x2 ~ _ <- s2 } in
                                                      case >=# x2 dt7 of _ {
                                                        False ->
                                                          let { I# x3 ~ _ <- x } in
                                                          let { __DEFAULT ~ wild10
                                                          <- indexIntArray# dt5 (+# a11 x2)
                                                          } in
                                                          let {
                                                            x#
                                                            x# = +# x3 wild10 } in
                                                          $wa
                                                            SPEC
                                                            (+# ww 1)
                                                            (Right (I# (+# x2 1), I# x#))
                                                            ((writeIntArray#
                                                                ipv11 ww x# (w8 `cast` ...))
                                                             `cast` ...);
                                                        True -> (# w8, I# ww #)
                                                      }
                                                  }; } in
                                            let { (# ipv12, ipv13 #) ~ _
                                            <- $wa SPEC 0 lvl72 (ipv10 `cast` ...)
                                            } in
                                            let { I# dt9 ~ _ <- ipv13 } in
                                            let { (# ipv14, ipv15 #) ~ _
                                            <- unsafeFreezeByteArray# ipv11 (ipv12 `cast` ...)
                                            } in
                                            (# ipv14 `cast` ...,
                                               (Vector 0 dt9 ipv15) `cast` ... #)) } in
                                 case <# x1 wild3 of _ {
                                   False -> $j1 wild1;
                                   True -> $j1 (+# wild1 1)
                                 } } in
                           case <# x1 wild3 of _ {
                             False -> $j (+# (*# wild1 x1) wild3);
                             True -> $j (*# (+# wild1 1) x1)
                           } } in
                       (let { Vector dt7 dt8 dt9 ~ _ <- ys `cast` ... } in
                        (Vector dt7 (-# dt8 1) dt9) `cast` ...,
                        let { Vector dt7 dt8 dt9 ~ _ <- ys `cast` ... } in
                        let { __DEFAULT ~ wild5
                        <- indexIntArray# dt9 (+# dt7 (-# dt8 1))
                        } in
                        I# wild5)))
                 `cast` ...
              } in
              let { (x1, ds3) ~ _
              <- scanD $fDTInt lvl145 wild $fNumInt_$c+ lvl7 dy
              } in
              let { DInt ipv10 ipv11 ipv12 ~ nt2 <- x1 `cast` ... } in
              let { DVector ipv13 ipv14 ipv15 ipv16 ipv17 ipv18 ~ nt3
              <- (imapD'
                    lvl143
                    $dDT3
                    lvl144
                    wild
                    lvl63
                    ((DProd (nt2 `cast` ...) dx) `cast` ...))
                 `cast` ...
              } in
              let { Vector dt8 dt9 dt10 ~ dt7
              <- (runSTRep
                    (\ @ s s1 ->
                       let { (di, n) ~ _
                       <- scanD
                            $fDTInt
                            lvl142
                            wild
                            $fNumInt_$c+
                            lvl7
                            ((DInt ipv13 ipv14 ipv15) `cast` ...)
                       } in
                       let { DInt ipv19 ipv20 ipv21 ~ nt4 <- di `cast` ... } in
                       let { I# ipv22 ~ n1 <- n } in
                       case >=# ipv22 0 of _ {
                         False -> case lvl140 ipv22 of wild8 { };
                         True ->
                           let { (# ipv23, ipv24 #) ~ _
                           <- newByteArray# (*# ipv22 8) (s1 `cast` ...)
                           } in
                           let {
                             nt5
                             nt5 = DProd (nt4 `cast` ...) (nt3 `cast` ...) } in
                           let { (# ipv25, ipv26 #) ~ _
                           <- ($wa1
                                 dt6
                                 ds1
                                 ds2
                                 (++
                                    $fShowComp2
                                    ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                 (WorkCopy n1)
                                 ((\ i s2 ->
                                     let { (# ipv25, ipv26 #) ~ _
                                     <- ((((myD lvl141 (nt5 `cast` ...)) `cast` ...) i) `cast` ...)
                                          s2
                                     } in
                                     let { (x, y) ~ _ <- ipv26 } in
                                     let { I# ipv27 ~ _ <- x } in
                                     let { Vector ipv28 ipv29 ipv30 ~ _ <- y `cast` ... } in
                                     (# copyByteArray#
                                          ipv30
                                          (*# ipv28 8)
                                          ipv24
                                          (*# ipv27 8)
                                          (*# ipv29 8)
                                          (ipv25 `cast` ...),
                                        () #)
                                     `cast` ...)
                                  `cast` ...)
                                 (ipv23 `cast` ...))
                              `cast` ...
                           } in
                           let { (# ipv27, ipv28 #) ~ _
                           <- unsafeFreezeByteArray# ipv24 (ipv25 `cast` ...)
                           } in
                           (# ipv27 `cast` ..., (Vector 0 ipv22 ipv28) `cast` ... #)
                       }))
                 `cast` ...
              } in
              let { I# dt14 ~ _
              <- foldD
                   $fDTInt
                   lvl137
                   wild
                   $fNumInt_$c+
                   (generateD
                      $fDTInt
                      lvl139
                      wild
                      ((\ i ->
                          let { I# x2 ~ _ <- i } in
                          let {
                            $w$j3
                            $w$j3 =
                              \ w6 ->
                                let {
                                  $w$j4
                                  $w$j4 =
                                    \ w7 ->
                                      let {
                                        a11
                                        a11 = +# dt3 w6 } in
                                      letrec {
                                        $wfoldlM'_loop
                                        $wfoldlM'_loop =
                                          \ w8 ww ww1 ->
                                            let { __DEFAULT ~ _ <- w8 } in
                                            case >=# ww1 w7 of _ {
                                              False ->
                                                let { __DEFAULT ~ wild8
                                                <- indexIntArray# dt5 (+# a11 ww1)
                                                } in
                                                $wfoldlM'_loop SPEC (+# ww wild8) (+# ww1 1);
                                              True -> ww
                                            }; } in
                                      $wfoldlM'_loop SPEC 0 0 } in
                                case <# x2 wild3 of _ {
                                  False -> $w$j4 wild1;
                                  True -> $w$j4 (+# wild1 1)
                                } } in
                          case <# x2 wild3 of _ {
                            False ->
                              let { __DEFAULT ~ ww <- $w$j3 (+# (*# wild1 x2) wild3) } in
                              (I# ww) `cast` ...;
                            True ->
                              let { __DEFAULT ~ ww <- $w$j3 (*# (+# wild1 1) x2) } in
                              (I# ww) `cast` ...
                          })
                       `cast` ...))
              } in
              let { PNested vsegd xs segd flat ~ _ <- w2 `cast` ... } in
              let {
                ipv19
                ipv19 =
                  splitSegdOnElemsD wild (USegd dt3 dt4 dt5 dt8 dt9 dt10 dt14) } in
              let {
                segd1
                segd1 = UPSegd dt3 dt4 dt5 dt8 dt9 dt10 dt14 ipv19 } in
              $w$j2
                (let {
                   vsegids3
                   vsegids3 =
                     runSTRep
                       (\ @ s s1 ->
                          let {
                            a11
                            a11 = -# dt4 1 } in
                          let {
                            $j
                            $j =
                              \ x ->
                                let { (# ipv20, ipv21 #) ~ _
                                <- newByteArray# (*# x 8) (s1 `cast` ...)
                                } in
                                letrec {
                                  $wa
                                  $wa =
                                    \ w6 ww ww1 w7 ->
                                      let { __DEFAULT ~ _ <- w6 } in
                                      case <=# ww1 a11 of _ {
                                        False -> (# w7, I# ww #);
                                        True ->
                                          $wa
                                            SPEC
                                            (+# ww 1)
                                            (+# ww1 1)
                                            ((writeIntArray# ipv21 ww ww1 (w7 `cast` ...))
                                             `cast` ...)
                                      }; } in
                                let { (# ipv22, ipv23 #) ~ _
                                <- $wa SPEC 0 0 (ipv20 `cast` ...)
                                } in
                                let { I# dt16 ~ _ <- ipv23 } in
                                let { (# ipv24, ipv25 #) ~ _
                                <- unsafeFreezeByteArray# ipv21 (ipv22 `cast` ...)
                                } in
                                (# ipv24 `cast` ..., (Vector 0 dt16 ipv25) `cast` ... #) } in
                          case ># 0 a11 of _ {
                            False ->
                              let {
                                a12
                                a12 = +# a11 1 } in
                              case ># a12 0 of _ {
                                False -> case lvl130 of wild9 { };
                                True -> $j a12
                              };
                            True -> $j 0
                          }) } in
                 let {
                   dt15
                   dt15 =
                     runSTRep
                       (\ @ s s1 ->
                          let {
                            $j
                            $j =
                              \ x ->
                                let { (# ipv20, ipv21 #) ~ _
                                <- newByteArray# (*# x 8) (s1 `cast` ...)
                                } in
                                letrec {
                                  $wa
                                  $wa =
                                    \ w6 ww ww1 w7 ->
                                      let { __DEFAULT ~ _ <- w6 } in
                                      case <=# ww1 0 of _ {
                                        False ->
                                          $wa
                                            SPEC
                                            (+# ww 1)
                                            (-# ww1 1)
                                            ((writeIntArray# ipv21 ww 0 (w7 `cast` ...))
                                             `cast` ...);
                                        True -> (# w7, I# ww #)
                                      }; } in
                                let { (# ipv22, ipv23 #) ~ _
                                <- $wa SPEC 0 dt4 (ipv20 `cast` ...)
                                } in
                                let { I# dt17 ~ _ <- ipv23 } in
                                let { (# ipv24, ipv25 #) ~ _
                                <- unsafeFreezeByteArray# ipv21 (ipv22 `cast` ...)
                                } in
                                (# ipv24 `cast` ..., (Vector 0 dt17 ipv25) `cast` ... #) } in
                          case <=# dt4 0 of _ {
                            False -> $j dt4;
                            True -> $j 0
                          }) } in
                 let {
                   a11
                   a11 =
                     splitSSegdOnElemsD
                       wild
                       (USSegd
                          True (dt7 `cast` ...) dt15 dt3 dt4 dt5 dt8 dt9 dt10 dt14) } in
                 let {
                   upssegd
                   upssegd =
                     UPSSegd
                       True (dt7 `cast` ...) dt15 dt3 dt4 dt5 dt8 dt9 dt10 dt14 a11 } in
                 UPVSegd
                   True
                   vsegids3
                   vsegids3
                   upssegd
                   upssegd
                   ($wmkDist vsegids3 dt3 dt5 dt10))
                ((PNesteds
                    (runSTRep
                       (\ @ s s1 ->
                          let { (# ipv20, ipv21 #) ~ _
                          <- newArray# 1 (uninitialised) (s1 `cast` ...)
                          } in
                          let {
                            vsegd'
                            vsegd' = updateVSegs (replicate_s $fEltInt segd1) vsegd } in
                          let {
                            a11
                            a11 = unsafeDemoteToUPSegd vsegd' } in
                          let {
                            flat1
                            flat1 =
                              let { PInts arrs ~ _ <- xs `cast` ... } in
                              (PInt
                                 (let { UPVSegd ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ~ _
                                  <- vsegd'
                                  } in
                                  let { Vectors ipv28 ipv29 ipv30 ipv31 ~ _ <- arrs } in
                                  let { UPSSegd dt15 dt16 dt17 dt18 dt19 dt20 dt21 dt22 dt23 dt24
                                                ds5 ~ _
                                  <- ipv25
                                  } in
                                  let { Vector ipv32 ipv33 ipv34 ~ _ <- ipv23 `cast` ... } in
                                  let { DProd ipv35 ipv36 ~ nt5 <- ipv27 `cast` ... } in
                                  let { DVector ipv37 ipv38 ipv39 ipv40 ipv41 ipv42 ~ nt6
                                  <- (imapD'
                                        lvl134
                                        $dDT1
                                        lvl135
                                        wild
                                        (\ _ x ->
                                           let { (x2, y) ~ _ <- x } in
                                           let { (x3, y1) ~ _ <- x2 } in
                                           let { USegd dt25 dt26 dt27 dt28 dt29 dt30 dt31 ~ _
                                           <- x3
                                           } in
                                           let { I# ipv37 ~ _ <- y1 } in
                                           let { I# ipv38 ~ _ <- y } in
                                           let { ByteArray ipv39 ~ _ <- lvl136 } in
                                           let { Vector ipv40 ipv41 ipv42 ~ _
                                           <- dt17 `cast` ...
                                           } in
                                           let { Vector ipv43 ipv44 ipv45 ~ _
                                           <- dt16 `cast` ...
                                           } in
                                           letrec {
                                             $wfoldlM'_loop
                                             $wfoldlM'_loop =
                                               \ w6 ww ww1 ->
                                                 let { __DEFAULT ~ _ <- w6 } in
                                                 case >=# ww1 dt26 of _ {
                                                   False ->
                                                     let { __DEFAULT ~ wild13
                                                     <- indexIntArray# dt27 (+# dt25 ww1)
                                                     } in
                                                     $wfoldlM'_loop SPEC (+# ww wild13) (+# ww1 1);
                                                   True -> ww
                                                 }; } in
                                           let { __DEFAULT ~ ww <- $wfoldlM'_loop SPEC 0 0 } in
                                           runSTRep
                                             (\ @ s2 s3 ->
                                                let { (# ipv46, ipv47 #) ~ _
                                                <- newByteArray# (*# ww 8) (s3 `cast` ...)
                                                } in
                                                letrec {
                                                  $wa
                                                  $wa =
                                                    \ w6 ww1 ww2 ww3 ww4 ww5 w7 ->
                                                      let { __DEFAULT ~ _ <- w6 } in
                                                      case >=# ww5 ww4 of _ {
                                                        False ->
                                                          let { __DEFAULT ~ wild13
                                                          <- indexIntArray# ww3 ww5
                                                          } in
                                                          $wa
                                                            SPEC
                                                            (+# ww1 1)
                                                            ww2
                                                            ww3
                                                            ww4
                                                            (+# ww5 1)
                                                            ((writeIntArray#
                                                                ipv47 ww1 wild13 (w7 `cast` ...))
                                                             `cast` ...);
                                                        True ->
                                                          case >=# (+# ww2 1) dt26 of _ {
                                                            False ->
                                                              let {
                                                                a12
                                                                a12 = +# ww2 1 } in
                                                              let { __DEFAULT ~ wild14
                                                              <- indexIntArray#
                                                                   ipv34 (+# ipv32 (+# a12 ipv37))
                                                              } in
                                                              let { __DEFAULT ~ wild15
                                                              <- indexIntArray#
                                                                   ipv42 (+# ipv40 wild14)
                                                              } in
                                                              let {
                                                                $j
                                                                $j =
                                                                  \ ww6 ->
                                                                    let { __DEFAULT ~ wild16
                                                                    <- indexIntArray# ipv29 wild15
                                                                    } in
                                                                    let { __DEFAULT ~ wild17
                                                                    <- indexIntArray#
                                                                         ipv45 (+# ipv43 wild14)
                                                                    } in
                                                                    let { __DEFAULT ~ wild18
                                                                    <- indexIntArray#
                                                                         dt27 (+# dt25 a12)
                                                                    } in
                                                                    let { __DEFAULT ~ wild19
                                                                    <- indexByteArrayArray#
                                                                         ipv31 wild15
                                                                    } in
                                                                    $wa
                                                                      SPEC
                                                                      ww1
                                                                      a12
                                                                      wild19
                                                                      (+#
                                                                         (+# (+# wild16 wild17) ww6)
                                                                         wild18)
                                                                      (+# (+# wild16 wild17) ww6)
                                                                      w7 } in
                                                              case a12 of _ {
                                                                __DEFAULT -> $j 0;
                                                                0 -> $j ipv38
                                                              };
                                                            True -> (# w7, I# ww1 #)
                                                          }
                                                      }; } in
                                                let { (# ipv48, ipv49 #) ~ _
                                                <- $wa SPEC 0 (-1) ipv39 0 0 (ipv46 `cast` ...)
                                                } in
                                                let { I# dt33 ~ _ <- ipv49 } in
                                                let { (# ipv50, ipv51 #) ~ _
                                                <- unsafeFreezeByteArray# ipv47 (ipv48 `cast` ...)
                                                } in
                                                (# ipv50 `cast` ...,
                                                   (Vector 0 dt33 ipv51) `cast` ... #)))
                                        (nt5 `cast` ...))
                                     `cast` ...
                                  } in
                                  runSTRep
                                    (\ @ s2 s3 ->
                                       let { (di, n) ~ _
                                       <- scanD
                                            $fDTInt
                                            lvl133
                                            wild
                                            $fNumInt_$c+
                                            lvl7
                                            ((DInt ipv37 ipv38 ipv39) `cast` ...)
                                       } in
                                       let { DInt ipv43 ipv44 ipv45 ~ nt7 <- di `cast` ... } in
                                       let { I# ipv46 ~ n1 <- n } in
                                       case >=# ipv46 0 of _ {
                                         False -> case lvl131 ipv46 of wild11 { };
                                         True ->
                                           let { (# ipv47, ipv48 #) ~ _
                                           <- newByteArray# (*# ipv46 8) (s3 `cast` ...)
                                           } in
                                           let {
                                             nt8
                                             nt8 = DProd (nt7 `cast` ...) (nt6 `cast` ...) } in
                                           let { (# ipv49, ipv50 #) ~ _
                                           <- ($wa1
                                                 dt6
                                                 ds1
                                                 ds2
                                                 (++
                                                    $fShowComp2
                                                    ($fShowComp_$cshowsPrec
                                                       $fShowComp7 (WJoinCopy n1) ([])))
                                                 (WorkCopy n1)
                                                 ((\ i s4 ->
                                                     let { (# ipv49, ipv50 #) ~ _
                                                     <- ((((myD lvl132 (nt8 `cast` ...)) `cast` ...)
                                                            i)
                                                         `cast` ...)
                                                          s4
                                                     } in
                                                     let { (x, y) ~ _ <- ipv50 } in
                                                     let { I# ipv51 ~ _ <- x } in
                                                     let { Vector ipv52 ipv53 ipv54 ~ _
                                                     <- y `cast` ...
                                                     } in
                                                     (# copyByteArray#
                                                          ipv54
                                                          (*# ipv52 8)
                                                          ipv48
                                                          (*# ipv51 8)
                                                          (*# ipv53 8)
                                                          (ipv49 `cast` ...),
                                                        () #)
                                                     `cast` ...)
                                                  `cast` ...)
                                                 (ipv47 `cast` ...))
                                              `cast` ...
                                           } in
                                           let { (# ipv51, ipv52 #) ~ _
                                           <- unsafeFreezeByteArray# ipv48 (ipv49 `cast` ...)
                                           } in
                                           (# ipv51 `cast` ..., (Vector 0 ipv46 ipv52) `cast` ... #)
                                       })))
                              `cast` ... } in
                          let {
                            lvl230
                            lvl230 = PNested vsegd' xs a11 (flat1 `cast` ...) } in
                          letrec {
                            $wa
                            $wa =
                              \ w6 ww w7 w8 ->
                                let { __DEFAULT ~ _ <- w6 } in
                                case w7 of _ {
                                  False -> (# w8, I# ww #);
                                  True ->
                                    $wa
                                      SPEC
                                      (+# ww 1)
                                      False
                                      ((writeArray# ipv21 ww (lvl230 `cast` ...) (w8 `cast` ...))
                                       `cast` ...)
                                }; } in
                          let { (# ipv22, ipv23 #) ~ _
                          <- $wa SPEC 0 True (ipv20 `cast` ...)
                          } in
                          let { I# dt16 ~ _ <- ipv23 } in
                          let { (# ipv24, ipv25 #) ~ _
                          <- unsafeFreezeArray# ipv21 (ipv22 `cast` ...)
                          } in
                          (# ipv24 `cast` ..., Vector 0 dt16 ipv25 #))))
                 `cast` ...)
                segd1;
            0 -> $w$j2 empty (lvl156 `cast` ...) empty
          } } in
    case w of wild2 {
      __DEFAULT ->
        let { DVector ipv ipv1 ipv2 ipv3 ipv4 ipv5 ~ nt
        <- (imapD'
              $fDTInt $dDT1 lvl204 theGang lvl205 (splitLenD theGang (I# wild2)))
           `cast` ...
        } in
        let { Vector dt3 dt4 dt5 ~ _
        <- (runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl203
                      theGang
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv ipv1 ipv2) `cast` ...)
                 } in
                 let { DInt ipv6 ipv7 ipv8 ~ nt1 <- di `cast` ... } in
                 let { I# ipv9 ~ n1 <- n } in
                 case >=# ipv9 0 of _ {
                   False -> case lvl201 ipv9 of wild3 { };
                   True ->
                     let { (# ipv10, ipv11 #) ~ _
                     <- newByteArray# (*# ipv9 8) (s1 `cast` ...)
                     } in
                     let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                     let {
                       nt2
                       nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                     let { (# ipv14, ipv15 #) ~ _
                     <- ($wa1
                           ww1
                           ww2
                           ww3
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv14, ipv15 #) ~ _
                               <- ((((myD lvl202 (nt2 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv15 } in
                               let { I# ipv16 ~ _ <- x } in
                               let { Vector ipv12 ipv13 ipv17 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv17
                                    (*# ipv12 8)
                                    ipv11
                                    (*# ipv16 8)
                                    (*# ipv13 8)
                                    (ipv14 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv10 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv12, ipv13 #) ~ _
                     <- unsafeFreezeByteArray# ipv11 (ipv14 `cast` ...)
                     } in
                     (# ipv12 `cast` ..., (Vector 0 ipv9 ipv13) `cast` ... #)
                 }))
           `cast` ...
        } in
        let { Gang dt6 ds1 ds2 ~ wild <- theGang } in
        let { __DEFAULT ~ wild1 <- quotInt# dt4 dt6 } in
        let { __DEFAULT ~ wild3 <- remInt# dt4 dt6 } in
        let { DProd dx dy ~ _
        <- (generateD
              lvl197
              lvl199
              wild
              (\ i ->
                 let {
                   ys
                   ys =
                     let { I# x1 ~ _ <- i } in
                     let {
                       $j
                       $j =
                         \ y ->
                           let {
                             $j1
                             $j1 =
                               \ dt7 ->
                                 runSTRep
                                   (\ @ s s1 ->
                                      let { (# ipv6, ipv7 #) ~ _
                                      <- newByteArray# (*# (+# 1 dt7) 8) (s1 `cast` ...)
                                      } in
                                      let {
                                        a11
                                        a11 = +# dt3 y } in
                                      letrec {
                                        $wa
                                        $wa =
                                          \ w3 ww w4 w5 ->
                                            let { __DEFAULT ~ _ <- w3 } in
                                            case w4 of _ {
                                              Left sa1 ->
                                                case sa1 of _ {
                                                  False -> $wa SPEC ww lvl200 w5;
                                                  True ->
                                                    $wa
                                                      SPEC
                                                      (+# ww 1)
                                                      lvl71
                                                      ((writeIntArray# ipv7 ww 0 (w5 `cast` ...))
                                                       `cast` ...)
                                                };
                                              Right sb5 ->
                                                let { (s2, x) ~ _ <- sb5 } in
                                                let { I# x2 ~ _ <- s2 } in
                                                case >=# x2 dt7 of _ {
                                                  False ->
                                                    let { I# x3 ~ _ <- x } in
                                                    let { __DEFAULT ~ wild10
                                                    <- indexIntArray# dt5 (+# a11 x2)
                                                    } in
                                                    let {
                                                      x#
                                                      x# = +# x3 wild10 } in
                                                    $wa
                                                      SPEC
                                                      (+# ww 1)
                                                      (Right (I# (+# x2 1), I# x#))
                                                      ((writeIntArray# ipv7 ww x# (w5 `cast` ...))
                                                       `cast` ...);
                                                  True -> (# w5, I# ww #)
                                                }
                                            }; } in
                                      let { (# ipv8, ipv9 #) ~ _
                                      <- $wa SPEC 0 lvl72 (ipv6 `cast` ...)
                                      } in
                                      let { I# dt9 ~ _ <- ipv9 } in
                                      let { (# ipv10, ipv11 #) ~ _
                                      <- unsafeFreezeByteArray# ipv7 (ipv8 `cast` ...)
                                      } in
                                      (# ipv10 `cast` ..., (Vector 0 dt9 ipv11) `cast` ... #)) } in
                           case <# x1 wild3 of _ {
                             False -> $j1 wild1;
                             True -> $j1 (+# wild1 1)
                           } } in
                     case <# x1 wild3 of _ {
                       False -> $j (+# (*# wild1 x1) wild3);
                       True -> $j (*# (+# wild1 1) x1)
                     } } in
                 (let { Vector dt7 dt8 dt9 ~ _ <- ys `cast` ... } in
                  (Vector dt7 (-# dt8 1) dt9) `cast` ...,
                  let { Vector dt7 dt8 dt9 ~ _ <- ys `cast` ... } in
                  let { __DEFAULT ~ wild5
                  <- indexIntArray# dt9 (+# dt7 (-# dt8 1))
                  } in
                  I# wild5)))
           `cast` ...
        } in
        let { (x1, ds3) ~ _
        <- scanD $fDTInt lvl196 wild $fNumInt_$c+ lvl7 dy
        } in
        let { DInt ipv6 ipv7 ipv8 ~ nt1 <- x1 `cast` ... } in
        let { DVector ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ~ nt2
        <- (imapD'
              lvl194
              $dDT6
              lvl195
              wild
              lvl63
              ((DProd (nt1 `cast` ...) dx) `cast` ...))
           `cast` ...
        } in
        let { Vector dt8 dt9 dt10 ~ dt7
        <- (runSTRep
              (\ @ s s1 ->
                 let { (di, n) ~ _
                 <- scanD
                      $fDTInt
                      lvl193
                      wild
                      $fNumInt_$c+
                      lvl7
                      ((DInt ipv9 ipv10 ipv11) `cast` ...)
                 } in
                 let { DInt ipv15 ipv16 ipv17 ~ nt3 <- di `cast` ... } in
                 let { I# ipv18 ~ n1 <- n } in
                 case >=# ipv18 0 of _ {
                   False -> case lvl191 ipv18 of wild8 { };
                   True ->
                     let { (# ipv19, ipv20 #) ~ _
                     <- newByteArray# (*# ipv18 8) (s1 `cast` ...)
                     } in
                     let {
                       nt4
                       nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                     let { (# ipv21, ipv22 #) ~ _
                     <- ($wa1
                           dt6
                           ds1
                           ds2
                           (++
                              $fShowComp2
                              ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                           (WorkCopy n1)
                           ((\ i s2 ->
                               let { (# ipv21, ipv22 #) ~ _
                               <- ((((myD lvl192 (nt4 `cast` ...)) `cast` ...) i) `cast` ...) s2
                               } in
                               let { (x, y) ~ _ <- ipv22 } in
                               let { I# ipv23 ~ _ <- x } in
                               let { Vector ipv24 ipv25 ipv26 ~ _ <- y `cast` ... } in
                               (# copyByteArray#
                                    ipv26
                                    (*# ipv24 8)
                                    ipv20
                                    (*# ipv23 8)
                                    (*# ipv25 8)
                                    (ipv21 `cast` ...),
                                  () #)
                               `cast` ...)
                            `cast` ...)
                           (ipv19 `cast` ...))
                        `cast` ...
                     } in
                     let { (# ipv23, ipv24 #) ~ _
                     <- unsafeFreezeByteArray# ipv20 (ipv21 `cast` ...)
                     } in
                     (# ipv23 `cast` ..., (Vector 0 ipv18 ipv24) `cast` ... #)
                 }))
           `cast` ...
        } in
        let { I# dt14 ~ _
        <- foldD
             $fDTInt
             lvl188
             wild
             $fNumInt_$c+
             (generateD
                $fDTInt
                lvl190
                wild
                ((\ i ->
                    let { I# x2 ~ _ <- i } in
                    let {
                      $w$j1
                      $w$j1 =
                        \ w3 ->
                          let {
                            $w$j2
                            $w$j2 =
                              \ w4 ->
                                let {
                                  a11
                                  a11 = +# dt3 w3 } in
                                letrec {
                                  $wfoldlM'_loop
                                  $wfoldlM'_loop =
                                    \ w5 ww ww1 ->
                                      let { __DEFAULT ~ _ <- w5 } in
                                      case >=# ww1 w4 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild8
                                          <- indexIntArray# dt5 (+# a11 ww1)
                                          } in
                                          $wfoldlM'_loop SPEC (+# ww wild8) (+# ww1 1);
                                        True -> ww
                                      }; } in
                                $wfoldlM'_loop SPEC 0 0 } in
                          case <# x2 wild3 of _ {
                            False -> $w$j2 wild1;
                            True -> $w$j2 (+# wild1 1)
                          } } in
                    case <# x2 wild3 of _ {
                      False ->
                        let { __DEFAULT ~ ww <- $w$j1 (+# (*# wild1 x2) wild3) } in
                        (I# ww) `cast` ...;
                      True ->
                        let { __DEFAULT ~ ww <- $w$j1 (*# (+# wild1 1) x2) } in
                        (I# ww) `cast` ...
                    })
                 `cast` ...))
        } in
        let { PInt arr ~ _ <- w1 `cast` ... } in
        let {
          ipv15
          ipv15 =
            splitSegdOnElemsD wild (USegd dt3 dt4 dt5 dt8 dt9 dt10 dt14) } in
        $w$j
          (let {
             vsegids3
             vsegids3 =
               runSTRep
                 (\ @ s s1 ->
                    let {
                      a11
                      a11 = -# dt4 1 } in
                    let {
                      $j
                      $j =
                        \ x ->
                          let { (# ipv16, ipv17 #) ~ _
                          <- newByteArray# (*# x 8) (s1 `cast` ...)
                          } in
                          letrec {
                            $wa
                            $wa =
                              \ w3 ww ww1 w4 ->
                                let { __DEFAULT ~ _ <- w3 } in
                                case <=# ww1 a11 of _ {
                                  False -> (# w4, I# ww #);
                                  True ->
                                    $wa
                                      SPEC
                                      (+# ww 1)
                                      (+# ww1 1)
                                      ((writeIntArray# ipv17 ww ww1 (w4 `cast` ...)) `cast` ...)
                                }; } in
                          let { (# ipv18, ipv19 #) ~ _
                          <- $wa SPEC 0 0 (ipv16 `cast` ...)
                          } in
                          let { I# dt16 ~ _ <- ipv19 } in
                          let { (# ipv20, ipv21 #) ~ _
                          <- unsafeFreezeByteArray# ipv17 (ipv18 `cast` ...)
                          } in
                          (# ipv20 `cast` ..., (Vector 0 dt16 ipv21) `cast` ... #) } in
                    case ># 0 a11 of _ {
                      False ->
                        let {
                          a12
                          a12 = +# a11 1 } in
                        case ># a12 0 of _ {
                          False -> case lvl182 of wild9 { };
                          True -> $j a12
                        };
                      True -> $j 0
                    }) } in
           let {
             dt15
             dt15 =
               runSTRep
                 (\ @ s s1 ->
                    let {
                      $j
                      $j =
                        \ x ->
                          let { (# ipv16, ipv17 #) ~ _
                          <- newByteArray# (*# x 8) (s1 `cast` ...)
                          } in
                          letrec {
                            $wa
                            $wa =
                              \ w3 ww ww1 w4 ->
                                let { __DEFAULT ~ _ <- w3 } in
                                case <=# ww1 0 of _ {
                                  False ->
                                    $wa
                                      SPEC
                                      (+# ww 1)
                                      (-# ww1 1)
                                      ((writeIntArray# ipv17 ww 0 (w4 `cast` ...)) `cast` ...);
                                  True -> (# w4, I# ww #)
                                }; } in
                          let { (# ipv18, ipv19 #) ~ _
                          <- $wa SPEC 0 dt4 (ipv16 `cast` ...)
                          } in
                          let { I# dt17 ~ _ <- ipv19 } in
                          let { (# ipv20, ipv21 #) ~ _
                          <- unsafeFreezeByteArray# ipv17 (ipv18 `cast` ...)
                          } in
                          (# ipv20 `cast` ..., (Vector 0 dt17 ipv21) `cast` ... #) } in
                    case <=# dt4 0 of _ {
                      False -> $j dt4;
                      True -> $j 0
                    }) } in
           let {
             a11
             a11 =
               splitSSegdOnElemsD
                 wild
                 (USSegd
                    True (dt7 `cast` ...) dt15 dt3 dt4 dt5 dt8 dt9 dt10 dt14) } in
           let {
             upssegd
             upssegd =
               UPSSegd
                 True (dt7 `cast` ...) dt15 dt3 dt4 dt5 dt8 dt9 dt10 dt14 a11 } in
           UPVSegd
             True
             vsegids3
             vsegids3
             upssegd
             upssegd
             ($wmkDist vsegids3 dt3 dt5 dt10))
          ((PInts
              (runSTRep
                 (\ @ s s1 ->
                    let { Vector ipv16 ipv17 ipv18 ~ _ <- arr `cast` ... } in
                    let { DVector ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ~ nt4
                    <- (imapD'
                          foldSegsWithP1
                          $dDT1
                          lvl186
                          wild
                          (\ _ x ->
                             let { (x2, y) ~ _ <- x } in
                             let { (x3, y1) ~ _ <- x2 } in
                             let { USegd dt15 dt16 dt17 dt18 dt19 dt20 dt21 ~ _ <- x3 } in
                             let { I# ipv19 ~ _ <- y1 } in
                             let { I# ipv20 ~ _ <- y } in
                             runSTRep
                               (\ @ s2 s3 ->
                                  let { (# ipv21, ipv22 #) ~ _
                                  <- newByteArray# (*# dt21 8) (s3 `cast` ...)
                                  } in
                                  let {
                                    a11
                                    a11 = +# ipv16 ipv19 } in
                                  letrec {
                                    $wa
                                    $wa =
                                      \ w3 ww ww1 ww2 ww3 w4 ->
                                        let { __DEFAULT ~ _ <- w3 } in
                                        case ww1 of ds6 {
                                          __DEFAULT ->
                                            case ww2 of wild10 {
                                              Nothing -> (# w4, I# ww #);
                                              Just x4 ->
                                                let { I# x# ~ _ <- x4 } in
                                                $wa
                                                  SPEC
                                                  (+# ww 1)
                                                  (-# ds6 1)
                                                  wild10
                                                  ww3
                                                  ((writeIntArray# ipv22 ww x# (w4 `cast` ...))
                                                   `cast` ...)
                                            };
                                          0 ->
                                            let { (sa1, sb5, ds5) ~ _ <- ww3 } in
                                            case ds5 of _ {
                                              Nothing ->
                                                let { I# x4 ~ _ <- sa1 } in
                                                case >=# x4 dt16 of _ {
                                                  False ->
                                                    $wa
                                                      SPEC
                                                      ww
                                                      0
                                                      (Nothing)
                                                      (I# (+# x4 1),
                                                       sb5,
                                                       Just
                                                         (let { __DEFAULT ~ wild14
                                                          <- indexIntArray# dt17 (+# dt15 x4)
                                                          } in
                                                          I# wild14))
                                                      w4;
                                                  True -> (# w4, I# ww #)
                                                };
                                              Just x4 ->
                                                let { I# x5 ~ _ <- sb5 } in
                                                case >=# x5 dt16 of _ {
                                                  False ->
                                                    let { I# ww5 ~ _ <- x4 } in
                                                    $wa
                                                      SPEC
                                                      ww
                                                      ww5
                                                      (Just
                                                         (let { __DEFAULT ~ wild14
                                                          <- indexIntArray# ipv18 (+# a11 x5)
                                                          } in
                                                          I# wild14))
                                                      (sa1, I# (+# x5 1), Nothing)
                                                      w4;
                                                  True -> (# w4, I# ww #)
                                                }
                                            }
                                        }; } in
                                  let { (# ipv23, ipv24 #) ~ _
                                  <- $wa SPEC 0 0 (Nothing) lvl187 (ipv21 `cast` ...)
                                  } in
                                  let { I# dt23 ~ _ <- ipv24 } in
                                  let { (# ipv25, ipv26 #) ~ _
                                  <- unsafeFreezeByteArray# ipv22 (ipv23 `cast` ...)
                                  } in
                                  (# ipv25 `cast` ..., (Vector 0 dt23 ipv26) `cast` ... #)))
                          ipv15)
                       `cast` ...
                    } in
                    let { Vector ipv25 ipv26 ipv27 ~ _
                    <- (runSTRep
                          (\ @ s2 s3 ->
                             let { (di, n) ~ _
                             <- scanD
                                  $fDTInt
                                  lvl185
                                  wild
                                  $fNumInt_$c+
                                  lvl7
                                  ((DInt ipv19 ipv20 ipv21) `cast` ...)
                             } in
                             let { DInt ipv25 ipv26 ipv27 ~ nt5 <- di `cast` ... } in
                             let { I# ipv28 ~ n1 <- n } in
                             case >=# ipv28 0 of _ {
                               False -> case lvl183 ipv28 of wild9 { };
                               True ->
                                 let { (# ipv29, ipv30 #) ~ _
                                 <- newByteArray# (*# ipv28 8) (s3 `cast` ...)
                                 } in
                                 let {
                                   nt6
                                   nt6 = DProd (nt5 `cast` ...) (nt4 `cast` ...) } in
                                 let { (# ipv31, ipv32 #) ~ _
                                 <- ($wa1
                                       dt6
                                       ds1
                                       ds2
                                       (++
                                          $fShowComp2
                                          ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                       (WorkCopy n1)
                                       ((\ i s4 ->
                                           let { (# ipv31, ipv32 #) ~ _
                                           <- ((((myD lvl184 (nt6 `cast` ...)) `cast` ...) i)
                                               `cast` ...)
                                                s4
                                           } in
                                           let { (x, y) ~ _ <- ipv32 } in
                                           let { I# ipv33 ~ _ <- x } in
                                           let { Vector ipv34 ipv35 ipv36 ~ _ <- y `cast` ... } in
                                           (# copyByteArray#
                                                ipv36
                                                (*# ipv34 8)
                                                ipv30
                                                (*# ipv33 8)
                                                (*# ipv35 8)
                                                (ipv31 `cast` ...),
                                              () #)
                                           `cast` ...)
                                        `cast` ...)
                                       (ipv29 `cast` ...))
                                    `cast` ...
                                 } in
                                 let { (# ipv33, ipv34 #) ~ _
                                 <- unsafeFreezeByteArray# ipv30 (ipv31 `cast` ...)
                                 } in
                                 (# ipv33 `cast` ..., (Vector 0 ipv28 ipv34) `cast` ... #)
                             }))
                       `cast` ...
                    } in
                    let { (# ipv28, ipv29 #) ~ _
                    <- newByteArray# (*# ipv26 8) (s1 `cast` ...)
                    } in
                    letrec {
                      $wa
                      $wa =
                        \ w3 ww ww1 w4 ->
                          let { __DEFAULT ~ _ <- w3 } in
                          case >=# ww1 ipv26 of _ {
                            False ->
                              let { __DEFAULT ~ wild8 <- indexIntArray# ipv27 (+# ipv25 ww1) } in
                              $wa
                                SPEC
                                (+# ww 1)
                                (+# ww1 1)
                                ((writeIntArray# ipv29 ww wild8 (w4 `cast` ...)) `cast` ...);
                            True -> (# w4, I# ww #)
                          }; } in
                    let { (# ipv30, ipv31 #) ~ _
                    <- $wa SPEC 0 0 (ipv28 `cast` ...)
                    } in
                    let { I# dt16 ~ _ <- ipv31 } in
                    let { (# ipv32, ipv33 #) ~ _
                    <- unsafeFreezeByteArray# (ipv29 `cast` ...) ipv30
                    } in
                    let { (# ipv34, ipv35 #) ~ _ <- newByteArray# 8 ipv32 } in
                    let { (# ipv36, ipv37 #) ~ _
                    <- unsafeFreezeByteArray# ipv35 (writeIntArray# ipv35 0 0 ipv34)
                    } in
                    let { (# ipv38, ipv39 #) ~ _ <- newByteArray# 8 ipv36 } in
                    let { (# ipv40, ipv41 #) ~ _
                    <- unsafeFreezeByteArray# ipv39 (writeIntArray# ipv39 0 dt16 ipv38)
                    } in
                    let { (# ipv42, ipv43 #) ~ _
                    <- newArrayArray# 1 (ipv40 `cast` ...)
                    } in
                    let { __DEFAULT ~ s'#
                    <- writeByteArrayArray# ipv43 0 ipv33 ipv42
                    } in
                    let { (# ipv44, ipv45 #) ~ _
                    <- unsafeFreezeArrayArray# ipv43 s'#
                    } in
                    (# ipv44, Vectors 1 ipv37 ipv41 ipv45 #))))
           `cast` ...)
          (UPSegd dt3 dt4 dt5 dt8 dt9 dt10 dt14 ipv15);
      0 -> $w$j empty $fPRInt_$cemptydPR empty
    }

$vsplitPoints4
$vsplitPoints4 = $wlsplitPoints

$vsplitPoints3
$vsplitPoints3 = $vsplitPoints4

lvl206
lvl206 = Right lvl7

lvl207
lvl207 = Left lvl7

lvl208
lvl208 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl209
lvl209 = $fDT(,) $fDTInt $dDT1

lvl210
lvl210 = What lvl5

lvl211
lvl211 = What lvl122

lvl212
lvl212 = I# 1

lvl213
lvl213 = splitLenD theGang lvl212

lvl214
lvl214 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl215
lvl215 = $fDT(,) $fDTInt $dDT1

lvl216
lvl216 = What lvl5

lvl217
lvl217 = What lvl122

lvl218
lvl218 = splitLenD theGang lvl212

lvl219
lvl219 =
  \ @ s s1 ->
    let { (# ipv, ipv1 #) ~ _ <- newByteArray# 8 (s1 `cast` ...) } in
    letrec {
      $wa
      $wa =
        \ w ww ww1 w1 ->
          let { __DEFAULT ~ _ <- w } in
          case <=# ww1 0 of _ {
            False ->
              $wa
                SPEC
                (+# ww 1)
                (-# ww1 1)
                ((writeIntArray# ipv1 ww 0 (w1 `cast` ...)) `cast` ...);
            True -> (# w1, I# ww #)
          }; } in
    let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 1 (ipv `cast` ...) } in
    let { I# dt4 ~ _ <- ipv6 } in
    let { (# ipv2, ipv3 #) ~ _
    <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
    } in
    (# ipv2 `cast` ..., (Vector 0 dt4 ipv3) `cast` ... #)

vsegids2
vsegids2 = runSTRep lvl219

lvl220
lvl220 =
  \ @ s s1 ->
    let { (# ipv, ipv1 #) ~ _ <- newByteArray# 8 (s1 `cast` ...) } in
    letrec {
      $wa
      $wa =
        \ w ww w1 w2 ->
          let { __DEFAULT ~ _ <- w } in
          case w1 of _ {
            False -> (# w2, I# ww #);
            True ->
              $wa
                SPEC
                (+# ww 1)
                False
                ((writeIntArray# ipv1 ww 0 (w2 `cast` ...)) `cast` ...)
          }; } in
    let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 True (ipv `cast` ...) } in
    let { I# dt4 ~ _ <- ipv6 } in
    let { (# ipv2, ipv3 #) ~ _
    <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
    } in
    (# ipv2 `cast` ..., (Vector 0 dt4 ipv3) `cast` ... #)

dt12
dt12 = runSTRep lvl220

dt13
dt13 = runSTRep lvl220

lvl221
lvl221 = runSTRep lvl220

vsegids1
vsegids1 = runSTRep lvl219

dt1
dt1 = runSTRep lvl220

dt2
dt2 = runSTRep lvl220

lvl222
lvl222 = runSTRep lvl220

lvl223
lvl223 =
  \ @ s ipv9 ->
    checkError lvl lvl1 Bounds lvl2 (checkLength_msg# ipv9)

lvl224
lvl224 = $fDT(,) $fDTInt $dDT1

lvl225
lvl225 = What lvl5

lvl226
lvl226 = $fDT(,) lvl19 $fDTInt

lvl227
lvl227 = What lvl94

lvl228
lvl228 = unsafeDupablePerformIO (lvl96 `cast` ...)

$wvsplitPoints
$wvsplitPoints =
  \ w w1 ->
    (# PArray
         2
         ((PInt
             (let { I# ipv ~ _ <- w } in
              let { DVector ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ~ nt
              <- (imapD'
                    $fDTInt
                    $dDT1
                    lvl217
                    theGang
                    (\ _ x ->
                       let { I# ipv1 ~ _ <- x } in
                       runSTRep
                         (\ @ s s1 ->
                            let {
                              $j
                              $j =
                                \ x1 ->
                                  let { (# ipv2, ipv3 #) ~ _
                                  <- newByteArray# (*# x1 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $wa
                                    $wa =
                                      \ w2 ww ww1 w3 ->
                                        let { __DEFAULT ~ _ <- w2 } in
                                        case <=# ww1 0 of _ {
                                          False ->
                                            $wa
                                              SPEC
                                              (+# ww 1)
                                              (-# ww1 1)
                                              ((writeIntArray# ipv3 ww ipv (w3 `cast` ...))
                                               `cast` ...);
                                          True -> (# w3, I# ww #)
                                        }; } in
                                  let { (# ipv5, ipv6 #) ~ _
                                  <- $wa SPEC 0 ipv1 (ipv2 `cast` ...)
                                  } in
                                  let { I# dt4 ~ _ <- ipv6 } in
                                  let { (# ipv4, ipv7 #) ~ _
                                  <- unsafeFreezeByteArray# ipv3 (ipv5 `cast` ...)
                                  } in
                                  (# ipv4 `cast` ..., (Vector 0 dt4 ipv7) `cast` ... #) } in
                            case <=# ipv1 0 of _ {
                              False -> $j ipv1;
                              True -> $j 0
                            }))
                    lvl218)
                 `cast` ...
              } in
              let { Vector ipv7 ipv8 ipv9 ~ _
              <- (runSTRep
                    (\ @ s s1 ->
                       let { (di, n) ~ _
                       <- scanD
                            $fDTInt
                            lvl216
                            theGang
                            $fNumInt_$c+
                            lvl7
                            ((DInt ipv1 ipv2 ipv3) `cast` ...)
                       } in
                       let { DInt ipv7 ipv8 ipv9 ~ nt1 <- di `cast` ... } in
                       let { I# ipv10 ~ n1 <- n } in
                       case >=# ipv10 0 of _ {
                         False -> case lvl214 ipv10 of wild1 { };
                         True ->
                           let { (# ipv11, ipv12 #) ~ _
                           <- newByteArray# (*# ipv10 8) (s1 `cast` ...)
                           } in
                           let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                           let {
                             nt2
                             nt2 = DProd (nt1 `cast` ...) (nt `cast` ...) } in
                           let { (# ipv14, ipv15 #) ~ _
                           <- ($wa1
                                 ww1
                                 ww2
                                 ww3
                                 (++
                                    $fShowComp2
                                    ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                 (WorkCopy n1)
                                 ((\ i s2 ->
                                     let { (# ipv14, ipv15 #) ~ _
                                     <- ((((myD lvl215 (nt2 `cast` ...)) `cast` ...) i) `cast` ...)
                                          s2
                                     } in
                                     let { (x, y) ~ _ <- ipv15 } in
                                     let { I# ipv16 ~ _ <- x } in
                                     let { Vector ipv13 ipv17 ipv18 ~ _ <- y `cast` ... } in
                                     (# copyByteArray#
                                          ipv18
                                          (*# ipv13 8)
                                          ipv12
                                          (*# ipv16 8)
                                          (*# ipv17 8)
                                          (ipv14 `cast` ...),
                                        () #)
                                     `cast` ...)
                                  `cast` ...)
                                 (ipv11 `cast` ...))
                              `cast` ...
                           } in
                           let { (# ipv13, ipv16 #) ~ _
                           <- unsafeFreezeByteArray# ipv12 (ipv14 `cast` ...)
                           } in
                           (# ipv13 `cast` ..., (Vector 0 ipv10 ipv16) `cast` ... #)
                       }))
                 `cast` ...
              } in
              let { DVector ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ~ nt2
              <- (imapD'
                    $fDTInt
                    $dDT1
                    lvl211
                    theGang
                    (\ _ x ->
                       let { I# ipv10 ~ _ <- x } in
                       runSTRep
                         (\ @ s s1 ->
                            let {
                              $j
                              $j =
                                \ x1 ->
                                  let { (# ipv11, ipv12 #) ~ _
                                  <- newByteArray# (*# x1 8) (s1 `cast` ...)
                                  } in
                                  letrec {
                                    $wa
                                    $wa =
                                      \ w2 ww ww1 w3 ->
                                        let { __DEFAULT ~ _ <- w2 } in
                                        case <=# ww1 0 of _ {
                                          False ->
                                            $wa
                                              SPEC
                                              (+# ww 1)
                                              (-# ww1 1)
                                              ((writeIntArray# ipv12 ww ipv (w3 `cast` ...))
                                               `cast` ...);
                                          True -> (# w3, I# ww #)
                                        }; } in
                                  let { (# ipv13, ipv14 #) ~ _
                                  <- $wa SPEC 0 ipv10 (ipv11 `cast` ...)
                                  } in
                                  let { I# dt4 ~ _ <- ipv14 } in
                                  let { (# ipv15, ipv16 #) ~ _
                                  <- unsafeFreezeByteArray# ipv12 (ipv13 `cast` ...)
                                  } in
                                  (# ipv15 `cast` ..., (Vector 0 dt4 ipv16) `cast` ... #) } in
                            case <=# ipv10 0 of _ {
                              False -> $j ipv10;
                              True -> $j 0
                            }))
                    lvl213)
                 `cast` ...
              } in
              let { Vector ipv16 ipv17 ipv18 ~ _
              <- (runSTRep
                    (\ @ s s1 ->
                       let { (di, n) ~ _
                       <- scanD
                            $fDTInt
                            lvl210
                            theGang
                            $fNumInt_$c+
                            lvl7
                            ((DInt ipv10 ipv11 ipv12) `cast` ...)
                       } in
                       let { DInt ipv16 ipv17 ipv18 ~ nt3 <- di `cast` ... } in
                       let { I# ipv19 ~ n1 <- n } in
                       case >=# ipv19 0 of _ {
                         False -> case lvl208 ipv19 of wild1 { };
                         True ->
                           let { (# ipv20, ipv21 #) ~ _
                           <- newByteArray# (*# ipv19 8) (s1 `cast` ...)
                           } in
                           let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                           let {
                             nt4
                             nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                           let { (# ipv22, ipv23 #) ~ _
                           <- ($wa1
                                 ww1
                                 ww2
                                 ww3
                                 (++
                                    $fShowComp2
                                    ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n1) ([])))
                                 (WorkCopy n1)
                                 ((\ i s2 ->
                                     let { (# ipv22, ipv23 #) ~ _
                                     <- ((((myD lvl209 (nt4 `cast` ...)) `cast` ...) i) `cast` ...)
                                          s2
                                     } in
                                     let { (x, y) ~ _ <- ipv23 } in
                                     let { I# ipv24 ~ _ <- x } in
                                     let { Vector ipv25 ipv26 ipv27 ~ _ <- y `cast` ... } in
                                     (# copyByteArray#
                                          ipv27
                                          (*# ipv25 8)
                                          ipv21
                                          (*# ipv24 8)
                                          (*# ipv26 8)
                                          (ipv22 `cast` ...),
                                        () #)
                                     `cast` ...)
                                  `cast` ...)
                                 (ipv20 `cast` ...))
                              `cast` ...
                           } in
                           let { (# ipv24, ipv25 #) ~ _
                           <- unsafeFreezeByteArray# ipv21 (ipv22 `cast` ...)
                           } in
                           (# ipv24 `cast` ..., (Vector 0 ipv19 ipv25) `cast` ... #)
                       }))
                 `cast` ...
              } in
              runSTRep
                (\ @ s s1 ->
                   let { (# ipv19, ipv20 #) ~ _
                   <- newByteArray# (*# (+# ipv8 ipv17) 8) (s1 `cast` ...)
                   } in
                   letrec {
                     $wa
                     $wa =
                       \ w2 ww w3 w4 ->
                         let { __DEFAULT ~ _ <- w2 } in
                         case w3 of _ {
                           Left sa1 ->
                             let { I# x ~ _ <- sa1 } in
                             case >=# x ipv8 of _ {
                               False ->
                                 let { __DEFAULT ~ wild3 <- indexIntArray# ipv9 (+# ipv7 x) } in
                                 $wa
                                   SPEC
                                   (+# ww 1)
                                   (Left (I# (+# x 1)))
                                   ((writeIntArray# ipv20 ww wild3 (w4 `cast` ...)) `cast` ...);
                               True -> $wa SPEC ww lvl206 w4
                             };
                           Right sb5 ->
                             let { I# x ~ _ <- sb5 } in
                             case >=# x ipv17 of _ {
                               False ->
                                 let { __DEFAULT ~ wild3 <- indexIntArray# ipv18 (+# ipv16 x) } in
                                 $wa
                                   SPEC
                                   (+# ww 1)
                                   (Right (I# (+# x 1)))
                                   ((writeIntArray# ipv20 ww wild3 (w4 `cast` ...)) `cast` ...);
                               True -> (# w4, I# ww #)
                             }
                         }; } in
                   let { (# ipv21, ipv22 #) ~ _
                   <- $wa SPEC 0 lvl207 (ipv19 `cast` ...)
                   } in
                   let { I# dt4 ~ _ <- ipv22 } in
                   let { (# ipv23, ipv24 #) ~ _
                   <- unsafeFreezeByteArray# ipv20 (ipv21 `cast` ...)
                   } in
                   (# ipv23 `cast` ..., (Vector 0 dt4 ipv24) `cast` ... #))))
          `cast` ...),
       PArray
         2
         (let { PArray n xs ~ _ <- w1 } in
          let {
            pdatas
            pdatas =
              let { PInt arr ~ _ <- xs `cast` ... } in
              (PInts
                 (runSTRep
                    (\ @ s s1 ->
                       let { Vector ipv ipv1 ipv2 ~ _ <- arr `cast` ... } in
                       let { (# ipv3, ipv4 #) ~ _
                       <- newByteArray# (*# ipv1 8) (s1 `cast` ...)
                       } in
                       letrec {
                         $wa
                         $wa =
                           \ w2 ww ww1 w3 ->
                             let { __DEFAULT ~ _ <- w2 } in
                             case >=# ww1 ipv1 of _ {
                               False ->
                                 let { __DEFAULT ~ wild3 <- indexIntArray# ipv2 (+# ipv ww1) } in
                                 $wa
                                   SPEC
                                   (+# ww 1)
                                   (+# ww1 1)
                                   ((writeIntArray# ipv4 ww wild3 (w3 `cast` ...)) `cast` ...);
                               True -> (# w3, I# ww #)
                             }; } in
                       let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 0 (ipv3 `cast` ...) } in
                       let { I# dt4 ~ _ <- ipv6 } in
                       let { (# ipv7, ipv8 #) ~ _
                       <- unsafeFreezeByteArray# (ipv4 `cast` ...) ipv5
                       } in
                       let { (# ipv9, ipv10 #) ~ _ <- newByteArray# 8 ipv7 } in
                       let { (# ipv11, ipv12 #) ~ _
                       <- unsafeFreezeByteArray# ipv10 (writeIntArray# ipv10 0 0 ipv9)
                       } in
                       let { (# ipv13, ipv14 #) ~ _ <- newByteArray# 8 ipv11 } in
                       let { (# ipv15, ipv16 #) ~ _
                       <- unsafeFreezeByteArray# ipv14 (writeIntArray# ipv14 0 dt4 ipv13)
                       } in
                       let { (# ipv17, ipv18 #) ~ _
                       <- newArrayArray# 1 (ipv15 `cast` ...)
                       } in
                       let { __DEFAULT ~ s'#
                       <- writeByteArrayArray# ipv18 0 ipv8 ipv17
                       } in
                       let { (# ipv19, ipv20 #) ~ _
                       <- unsafeFreezeArrayArray# ipv18 s'#
                       } in
                       (# ipv19, Vectors 1 ipv12 ipv16 ipv20 #))))
              `cast` ... } in
          let {
            vsegd'
            vsegd' =
              let {
                ussegd
                ussegd =
                  let { Vector dt3 dt6 dt7 ~ _
                  <- (runSTRep
                        (\ @ s s1 ->
                           let { (# ipv, ipv1 #) ~ _ <- newByteArray# 8 (s1 `cast` ...) } in
                           letrec {
                             $wa
                             $wa =
                               \ w2 ww w3 w4 ->
                                 let { __DEFAULT ~ _ <- w2 } in
                                 case w3 of _ {
                                   False -> (# w4, I# ww #);
                                   True ->
                                     $wa
                                       SPEC
                                       (+# ww 1)
                                       False
                                       ((writeIntArray# ipv1 ww n (w4 `cast` ...)) `cast` ...)
                                 }; } in
                           let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 True (ipv `cast` ...) } in
                           let { I# dt4 ~ _ <- ipv6 } in
                           let { (# ipv2, ipv3 #) ~ _
                           <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
                           } in
                           (# ipv2 `cast` ..., (Vector 0 dt4 ipv3) `cast` ... #)))
                     `cast` ...
                  } in
                  let { Vector dt9 dt10 dt11 ~ _ <- lvl221 `cast` ... } in
                  UPSSegd
                    True
                    dt12
                    dt13
                    dt3
                    dt6
                    dt7
                    dt9
                    dt10
                    dt11
                    n
                    (splitSSegdOnElemsD
                       theGang (USSegd True dt12 dt13 dt3 dt6 dt7 dt9 dt10 dt11 n)) } in
              let {
                ussegd1
                ussegd1 =
                  let { Vector dt3 dt6 dt7 ~ _
                  <- (runSTRep
                        (\ @ s s1 ->
                           let { (# ipv, ipv1 #) ~ _ <- newByteArray# 8 (s1 `cast` ...) } in
                           letrec {
                             $wa
                             $wa =
                               \ w2 ww w3 w4 ->
                                 let { __DEFAULT ~ _ <- w2 } in
                                 case w3 of _ {
                                   False -> (# w4, I# ww #);
                                   True ->
                                     $wa
                                       SPEC
                                       (+# ww 1)
                                       False
                                       ((writeIntArray# ipv1 ww n (w4 `cast` ...)) `cast` ...)
                                 }; } in
                           let { (# ipv5, ipv6 #) ~ _ <- $wa SPEC 0 True (ipv `cast` ...) } in
                           let { I# dt4 ~ _ <- ipv6 } in
                           let { (# ipv2, ipv3 #) ~ _
                           <- unsafeFreezeByteArray# ipv1 (ipv5 `cast` ...)
                           } in
                           (# ipv2 `cast` ..., (Vector 0 dt4 ipv3) `cast` ... #)))
                     `cast` ...
                  } in
                  let { Vector dt9 dt10 dt11 ~ _ <- lvl222 `cast` ... } in
                  UPSSegd
                    True
                    dt1
                    dt2
                    dt3
                    dt6
                    dt7
                    dt9
                    dt10
                    dt11
                    n
                    (splitSSegdOnElemsD
                       theGang (USSegd True dt1 dt2 dt3 dt6 dt7 dt9 dt10 dt11 n)) } in
              appendWith
                (UPVSegd
                   False vsegids2 vsegids2 ussegd ussegd (mkDist vsegids2 ussegd))
                ($fPRInt_$clengthdPR (pdatas `cast` ...))
                (UPVSegd
                   False vsegids1 vsegids1 ussegd1 ussegd1 (mkDist vsegids1 ussegd1))
                ($fPRInt_$clengthdPR (pdatas `cast` ...)) } in
          let {
            pdatas'
            pdatas' =
              let { PInts xs1 ~ _ <- pdatas `cast` ... } in
              (PInts
                 (let { Vectors dt dt3 dt4 dt5 ~ _ <- xs1 } in
                  runSTRep
                    (\ @ s s1 ->
                       let {
                         a11
                         a11 = sizeofByteArray# dt3 } in
                       let {
                         a12
                         a12 = sizeofByteArray# dt3 } in
                       let { (# ipv, ipv1 #) ~ _
                       <- newByteArray# (+# a12 a11) (s1 `cast` ...)
                       } in
                       let { (# ipv2, ipv3 #) ~ _
                       <- unsafeFreezeByteArray#
                            ipv1
                            (copyByteArray#
                               dt3 0 ipv1 a12 a11 (copyByteArray# dt3 0 ipv1 0 a12 ipv))
                       } in
                       let {
                         a13
                         a13 = sizeofByteArray# dt4 } in
                       let {
                         a14
                         a14 = sizeofByteArray# dt4 } in
                       let { (# ipv4, ipv5 #) ~ _ <- newByteArray# (+# a14 a13) ipv2 } in
                       let { (# ipv6, ipv7 #) ~ _
                       <- unsafeFreezeByteArray#
                            ipv5
                            (copyByteArray#
                               dt4 0 ipv5 a12 a13 (copyByteArray# dt4 0 ipv5 0 a14 ipv4))
                       } in
                       let {
                         a15
                         a15 = +# dt dt } in
                       let { (# ipv8, ipv9 #) ~ _
                       <- newArrayArray# a15 (ipv6 `cast` ...)
                       } in
                       let {
                         ipv10
                         ipv10 = MutableArrayArray ipv9 } in
                       let { (# ipv11, ipv12 #) ~ _
                       <- $wa ipv10 0 (ArrayArray dt5) 0 dt ipv8
                       } in
                       let { (# ipv13, ipv14 #) ~ _
                       <- $wa ipv10 dt (ArrayArray dt5) 0 dt ipv11
                       } in
                       let { (# ipv15, ipv16 #) ~ _
                       <- unsafeFreezeArrayArray# ipv9 ipv13
                       } in
                       (# ipv15, Vectors a15 ipv3 ipv7 ipv16 #))))
              `cast` ... } in
          (PNested
             vsegd'
             (pdatas' `cast` ...)
             (unsafeDemoteToUPSegd vsegd')
             (let { PInts arrs ~ _ <- pdatas' `cast` ... } in
              (PInt
                 (let { UPVSegd ipv ipv1 ipv2 ipv3 ipv4 ipv5 ~ _ <- vsegd' } in
                  let { Vectors ipv6 ipv7 ipv8 ipv9 ~ _ <- arrs } in
                  let { UPSSegd dt3 dt4 dt5 dt6 dt7 dt8 dt9 dt10 dt11 dt14 ds1 ~ _
                  <- ipv3
                  } in
                  let { Vector ipv10 ipv11 ipv12 ~ _ <- ipv1 `cast` ... } in
                  let { DProd ipv13 ipv14 ~ nt1 <- ipv5 `cast` ... } in
                  let { DVector ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ~ nt2
                  <- (imapD'
                        lvl226
                        $dDT1
                        lvl227
                        theGang
                        (\ _ x ->
                           let { (x1, y) ~ _ <- x } in
                           let { (x2, y1) ~ _ <- x1 } in
                           let { USegd dt dt15 dt16 dt17 dt18 dt19 dt20 ~ _ <- x2 } in
                           let { I# ipv15 ~ _ <- y1 } in
                           let { I# ipv16 ~ _ <- y } in
                           let { ByteArray ipv26 ~ _ <- lvl228 } in
                           let { Vector ipv27 ipv28 ipv29 ~ _ <- dt5 `cast` ... } in
                           let { Vector ipv30 ipv31 ipv32 ~ _ <- dt4 `cast` ... } in
                           letrec {
                             $wfoldlM'_loop
                             $wfoldlM'_loop =
                               \ w2 ww ww1 ->
                                 let { __DEFAULT ~ _ <- w2 } in
                                 case >=# ww1 dt15 of _ {
                                   False ->
                                     let { __DEFAULT ~ wild7 <- indexIntArray# dt16 (+# dt ww1) } in
                                     $wfoldlM'_loop SPEC (+# ww wild7) (+# ww1 1);
                                   True -> ww
                                 }; } in
                           let { __DEFAULT ~ ww <- $wfoldlM'_loop SPEC 0 0 } in
                           runSTRep
                             (\ @ s s1 ->
                                let { (# ipv17, ipv18 #) ~ _
                                <- newByteArray# (*# ww 8) (s1 `cast` ...)
                                } in
                                letrec {
                                  $wa
                                  $wa =
                                    \ w2 ww1 ww2 ww3 ww4 ww5 w3 ->
                                      let { __DEFAULT ~ _ <- w2 } in
                                      case >=# ww5 ww4 of _ {
                                        False ->
                                          let { __DEFAULT ~ wild7 <- indexIntArray# ww3 ww5 } in
                                          $wa
                                            SPEC
                                            (+# ww1 1)
                                            ww2
                                            ww3
                                            ww4
                                            (+# ww5 1)
                                            ((writeIntArray# ipv18 ww1 wild7 (w3 `cast` ...))
                                             `cast` ...);
                                        True ->
                                          case >=# (+# ww2 1) dt15 of _ {
                                            False ->
                                              let {
                                                a11
                                                a11 = +# ww2 1 } in
                                              let { __DEFAULT ~ wild8
                                              <- indexIntArray# ipv12 (+# ipv10 (+# a11 ipv15))
                                              } in
                                              let { __DEFAULT ~ wild9
                                              <- indexIntArray# ipv29 (+# ipv27 wild8)
                                              } in
                                              let {
                                                $j
                                                $j =
                                                  \ ww6 ->
                                                    let { __DEFAULT ~ wild10
                                                    <- indexIntArray# ipv7 wild9
                                                    } in
                                                    let { __DEFAULT ~ wild11
                                                    <- indexIntArray# ipv32 (+# ipv30 wild8)
                                                    } in
                                                    let { __DEFAULT ~ wild12
                                                    <- indexIntArray# dt16 (+# dt a11)
                                                    } in
                                                    let { __DEFAULT ~ wild13
                                                    <- indexByteArrayArray# ipv9 wild9
                                                    } in
                                                    $wa
                                                      SPEC
                                                      ww1
                                                      a11
                                                      wild13
                                                      (+# (+# (+# wild10 wild11) ww6) wild12)
                                                      (+# (+# wild10 wild11) ww6)
                                                      w3 } in
                                              case a11 of _ {
                                                __DEFAULT -> $j 0;
                                                0 -> $j ipv16
                                              };
                                            True -> (# w3, I# ww1 #)
                                          }
                                      }; } in
                                let { (# ipv19, ipv20 #) ~ _
                                <- $wa SPEC 0 (-1) ipv26 0 0 (ipv17 `cast` ...)
                                } in
                                let { I# dt22 ~ _ <- ipv20 } in
                                let { (# ipv21, ipv22 #) ~ _
                                <- unsafeFreezeByteArray# ipv18 (ipv19 `cast` ...)
                                } in
                                (# ipv21 `cast` ..., (Vector 0 dt22 ipv22) `cast` ... #)))
                        (nt1 `cast` ...))
                     `cast` ...
                  } in
                  runSTRep
                    (\ @ s s1 ->
                       let { (di, n1) ~ _
                       <- scanD
                            $fDTInt
                            lvl225
                            theGang
                            $fNumInt_$c+
                            lvl7
                            ((DInt ipv15 ipv16 ipv17) `cast` ...)
                       } in
                       let { DInt ipv21 ipv22 ipv23 ~ nt3 <- di `cast` ... } in
                       let { I# ipv24 ~ n2 <- n1 } in
                       case >=# ipv24 0 of _ {
                         False -> case lvl223 ipv24 of wild5 { };
                         True ->
                           let { (# ipv25, ipv26 #) ~ _
                           <- newByteArray# (*# ipv24 8) (s1 `cast` ...)
                           } in
                           let { Gang ww1 ww2 ww3 ~ _ <- theGang } in
                           let {
                             nt4
                             nt4 = DProd (nt3 `cast` ...) (nt2 `cast` ...) } in
                           let { (# ipv27, ipv28 #) ~ _
                           <- ($wa1
                                 ww1
                                 ww2
                                 ww3
                                 (++
                                    $fShowComp2
                                    ($fShowComp_$cshowsPrec $fShowComp7 (WJoinCopy n2) ([])))
                                 (WorkCopy n2)
                                 ((\ i s2 ->
                                     let { (# ipv27, ipv28 #) ~ _
                                     <- ((((myD lvl224 (nt4 `cast` ...)) `cast` ...) i) `cast` ...)
                                          s2
                                     } in
                                     let { (x, y) ~ _ <- ipv28 } in
                                     let { I# ipv29 ~ _ <- x } in
                                     let { Vector ipv30 ipv31 ipv32 ~ _ <- y `cast` ... } in
                                     (# copyByteArray#
                                          ipv32
                                          (*# ipv30 8)
                                          ipv26
                                          (*# ipv29 8)
                                          (*# ipv31 8)
                                          (ipv27 `cast` ...),
                                        () #)
                                     `cast` ...)
                                  `cast` ...)
                                 (ipv25 `cast` ...))
                              `cast` ...
                           } in
                           let { (# ipv29, ipv30 #) ~ _
                           <- unsafeFreezeByteArray# ipv26 (ipv27 `cast` ...)
                           } in
                           (# ipv29 `cast` ..., (Vector 0 ipv24 ipv30) `cast` ... #)
                       })))
              `cast` ...))
          `cast` ...) #)

$vsplitPoints6
$vsplitPoints6 =
  \ w w1 ->
    let { (# ww1, ww2 #) ~ _ <- $wvsplitPoints w w1 } in (ww1, ww2)

$vsplitPoints5
$vsplitPoints5 = $vsplitPoints6

lvl229
lvl229 = \ ds v x -> let { I# c ~ _ <- ds } in $wlsplitPoints c v x

$vsplitPoints8
$vsplitPoints8 = \ x -> Clo $fPAInt $vsplitPoints5 lvl229 x

$vsplitPoints7
$vsplitPoints7 = \ _ arg -> $vsplitPoints8 arg

a9
a9 = \ _ x -> AClo $fPAInt $vsplitPoints5 lvl229 x

$vsplitPoints2
$vsplitPoints2 = a9 `cast` ...

$vsplitPoints1
$vsplitPoints1 = \ lc _ arg -> $vsplitPoints2 lc arg

a10
a10 = \ ds _ x -> let { I# c ~ _ <- ds } in $vsplitPoints2 c x

$vsplitPoints
$vsplitPoints = Clo $fPAVoid $vsplitPoints7 a10 void



